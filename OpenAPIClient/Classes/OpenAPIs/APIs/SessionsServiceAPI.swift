//
// SessionsServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SessionsServiceAPI {

    /**

     - parameter key: (path) Auth Key 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteAuthKeysByKey(key: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteAuthKeysByKeyWithRequestBuilder(key: key).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /Auth/Keys/{Key}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter key: (path) Auth Key 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAuthKeysByKeyWithRequestBuilder(key: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Auth/Keys/{Key}"
        let keyPreEscape = "\(APIHelper.mapValueToPathItem(key))"
        let keyPostEscape = keyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Key}", with: keyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Removes an additional user from a session
     
     - parameter id: (path) Session Id 
     - parameter userId: (path) UserId Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteSessionsByIdUsersByUserid(id: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteSessionsByIdUsersByUseridWithRequestBuilder(id: id, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Removes an additional user from a session
     - DELETE /Sessions/{Id}/Users/{UserId}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter userId: (path) UserId Id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteSessionsByIdUsersByUseridWithRequestBuilder(id: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Users/{UserId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAuthKeys(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getAuthKeysWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Auth/Keys
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<Void> 
     */
    open class func getAuthKeysWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/Auth/Keys"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAuthProviders(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [NameIdPair]?, _ error: Error?) -> Void)) -> RequestTask {
        return getAuthProvidersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Auth/Providers
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getAuthProvidersWithRequestBuilder() -> RequestBuilder<[NameIdPair]> {
        let localVariablePath = "/Auth/Providers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NameIdPair]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a list of sessions
     
     - parameter controllableByUserId: (query) Optional. Filter by sessions that a given user is allowed to remote control. (optional)
     - parameter deviceId: (query) Optional. Filter by device id. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSessions(controllableByUserId: String? = nil, deviceId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [SessionSessionInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getSessionsWithRequestBuilder(controllableByUserId: controllableByUserId, deviceId: deviceId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of sessions
     - GET /Sessions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter controllableByUserId: (query) Optional. Filter by sessions that a given user is allowed to remote control. (optional)
     - parameter deviceId: (query) Optional. Filter by device id. (optional)
     - returns: RequestBuilder<[SessionSessionInfo]> 
     */
    open class func getSessionsWithRequestBuilder(controllableByUserId: String? = nil, deviceId: String? = nil) -> RequestBuilder<[SessionSessionInfo]> {
        let localVariablePath = "/Sessions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ControllableByUserId": (wrappedValue: controllableByUserId?.encodeToJSON(), isExplode: true),
            "DeviceId": (wrappedValue: deviceId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[SessionSessionInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter app: (query) App 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postAuthKeys(app: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postAuthKeysWithRequestBuilder(app: app).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Auth/Keys
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter app: (query) App 
     - returns: RequestBuilder<Void> 
     */
    open class func postAuthKeysWithRequestBuilder(app: String) -> RequestBuilder<Void> {
        let localVariablePath = "/Auth/Keys"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "App": (wrappedValue: app.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issues a system command to a client
     
     - parameter id: (path) Session Id 
     - parameter generalCommand: (body) GeneralCommand:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdCommand(id: String, generalCommand: GeneralCommand, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdCommandWithRequestBuilder(id: id, generalCommand: generalCommand).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issues a system command to a client
     - POST /Sessions/{Id}/Command
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter generalCommand: (body) GeneralCommand:  
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdCommandWithRequestBuilder(id: String, generalCommand: GeneralCommand) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Command"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generalCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issues a system command to a client
     
     - parameter id: (path) Session Id 
     - parameter command: (path) The command to send. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdCommandByCommand(id: String, command: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdCommandByCommandWithRequestBuilder(id: id, command: command).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issues a system command to a client
     - POST /Sessions/{Id}/Command/{Command}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter command: (path) The command to send. 
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdCommandByCommandWithRequestBuilder(id: String, command: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Command/{Command}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let commandPreEscape = "\(APIHelper.mapValueToPathItem(command))"
        let commandPostEscape = commandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Command}", with: commandPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issues a command to a client to display a message to the user
     
     - parameter id: (path) Session Id 
     - parameter text: (query) The message text. 
     - parameter header: (query) The message header. 
     - parameter timeoutMs: (query) The message timeout. If omitted the user will have to confirm viewing the message. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdMessage(id: String, text: String, header: String, timeoutMs: Int64? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdMessageWithRequestBuilder(id: id, text: text, header: header, timeoutMs: timeoutMs).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issues a command to a client to display a message to the user
     - POST /Sessions/{Id}/Message
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter text: (query) The message text. 
     - parameter header: (query) The message header. 
     - parameter timeoutMs: (query) The message timeout. If omitted the user will have to confirm viewing the message. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdMessageWithRequestBuilder(id: String, text: String, header: String, timeoutMs: Int64? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Message"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Text": (wrappedValue: text.encodeToJSON(), isExplode: true),
            "Header": (wrappedValue: header.encodeToJSON(), isExplode: true),
            "TimeoutMs": (wrappedValue: timeoutMs?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter playCommand
     */
    public enum PlayCommand_postSessionsByIdPlaying: String, CaseIterable {
        case playNow = "PlayNow"
        case playNext = "PlayNext"
        case playLast = "PlayLast"
        case playInstantMix = "PlayInstantMix"
        case playShuffle = "PlayShuffle"
    }

    /**
     Instructs a session to play an item
     
     - parameter id: (path) Session Id 
     - parameter itemIds: (query) The ids of the items to play, comma delimited 
     - parameter playCommand: (query) The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. 
     - parameter playRequest: (body) PlayRequest:  
     - parameter startPositionTicks: (query) The starting position of the first item. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdPlaying(id: String, itemIds: [Int64], playCommand: PlayCommand_postSessionsByIdPlaying, playRequest: PlayRequest, startPositionTicks: Int64? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdPlayingWithRequestBuilder(id: id, itemIds: itemIds, playCommand: playCommand, playRequest: playRequest, startPositionTicks: startPositionTicks).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Instructs a session to play an item
     - POST /Sessions/{Id}/Playing
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter itemIds: (query) The ids of the items to play, comma delimited 
     - parameter playCommand: (query) The type of play command to issue (PlayNow, PlayNext, PlayLast). Clients who have not yet implemented play next and play last may play now. 
     - parameter playRequest: (body) PlayRequest:  
     - parameter startPositionTicks: (query) The starting position of the first item. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdPlayingWithRequestBuilder(id: String, itemIds: [Int64], playCommand: PlayCommand_postSessionsByIdPlaying, playRequest: PlayRequest, startPositionTicks: Int64? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Playing"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: playRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ItemIds": (wrappedValue: itemIds.encodeToJSON(), isExplode: true),
            "StartPositionTicks": (wrappedValue: startPositionTicks?.encodeToJSON(), isExplode: true),
            "PlayCommand": (wrappedValue: playCommand.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter command
     */
    public enum Command_postSessionsByIdPlayingByCommand: String, CaseIterable {
        case stop = "Stop"
        case pause = "Pause"
        case unpause = "Unpause"
        case nextTrack = "NextTrack"
        case previousTrack = "PreviousTrack"
        case seek = "Seek"
        case rewind = "Rewind"
        case fastForward = "FastForward"
        case playPause = "PlayPause"
    }

    /**
     Issues a playstate command to a client
     
     - parameter id: (path) Session Id 
     - parameter command: (path)  
     - parameter playstateRequest: (body) PlaystateRequest:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdPlayingByCommand(id: String, command: Command_postSessionsByIdPlayingByCommand, playstateRequest: PlaystateRequest, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdPlayingByCommandWithRequestBuilder(id: id, command: command, playstateRequest: playstateRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issues a playstate command to a client
     - POST /Sessions/{Id}/Playing/{Command}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter command: (path)  
     - parameter playstateRequest: (body) PlaystateRequest:  
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdPlayingByCommandWithRequestBuilder(id: String, command: Command_postSessionsByIdPlayingByCommand, playstateRequest: PlaystateRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Playing/{Command}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let commandPreEscape = "\(command.rawValue)"
        let commandPostEscape = commandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Command}", with: commandPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: playstateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Issues a system command to a client
     
     - parameter id: (path) Session Id 
     - parameter command: (path) The command to send. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdSystemByCommand(id: String, command: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdSystemByCommandWithRequestBuilder(id: id, command: command).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Issues a system command to a client
     - POST /Sessions/{Id}/System/{Command}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter command: (path) The command to send. 
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdSystemByCommandWithRequestBuilder(id: String, command: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/System/{Command}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let commandPreEscape = "\(APIHelper.mapValueToPathItem(command))"
        let commandPostEscape = commandPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Command}", with: commandPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Adds an additional user to a session
     
     - parameter id: (path) Session Id 
     - parameter userId: (path) UserId Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdUsersByUserid(id: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdUsersByUseridWithRequestBuilder(id: id, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds an additional user to a session
     - POST /Sessions/{Id}/Users/{UserId}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter userId: (path) UserId Id 
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdUsersByUseridWithRequestBuilder(id: String, userId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Users/{UserId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Instructs a session to browse to an item or view
     
     - parameter id: (path) Session Id 
     - parameter itemType: (query) The type of item to browse to. 
     - parameter itemId: (query) The Id of the item. 
     - parameter itemName: (query) The name of the item. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsByIdViewing(id: String, itemType: String, itemId: String, itemName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsByIdViewingWithRequestBuilder(id: id, itemType: itemType, itemId: itemId, itemName: itemName).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Instructs a session to browse to an item or view
     - POST /Sessions/{Id}/Viewing
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Session Id 
     - parameter itemType: (query) The type of item to browse to. 
     - parameter itemId: (query) The Id of the item. 
     - parameter itemName: (query) The name of the item. 
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsByIdViewingWithRequestBuilder(id: String, itemType: String, itemId: String, itemName: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Sessions/{Id}/Viewing"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ItemType": (wrappedValue: itemType.encodeToJSON(), isExplode: true),
            "ItemId": (wrappedValue: itemId.encodeToJSON(), isExplode: true),
            "ItemName": (wrappedValue: itemName.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates capabilities for a device
     
     - parameter id: (query) Session Id 
     - parameter playableMediaTypes: (query) A list of playable media types, comma delimited. Audio, Video, Book, Game, Photo. (optional)
     - parameter supportedCommands: (query) A list of supported remote control commands, comma delimited (optional)
     - parameter supportsMediaControl: (query) Determines whether media can be played remotely. (optional)
     - parameter supportsSync: (query) Determines whether sync is supported. (optional)
     - parameter supportsPersistentIdentifier: (query) Determines whether the device supports a unique identifier. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsCapabilities(id: String, playableMediaTypes: String? = nil, supportedCommands: String? = nil, supportsMediaControl: Bool? = nil, supportsSync: Bool? = nil, supportsPersistentIdentifier: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsCapabilitiesWithRequestBuilder(id: id, playableMediaTypes: playableMediaTypes, supportedCommands: supportedCommands, supportsMediaControl: supportsMediaControl, supportsSync: supportsSync, supportsPersistentIdentifier: supportsPersistentIdentifier).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates capabilities for a device
     - POST /Sessions/Capabilities
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (query) Session Id 
     - parameter playableMediaTypes: (query) A list of playable media types, comma delimited. Audio, Video, Book, Game, Photo. (optional)
     - parameter supportedCommands: (query) A list of supported remote control commands, comma delimited (optional)
     - parameter supportsMediaControl: (query) Determines whether media can be played remotely. (optional)
     - parameter supportsSync: (query) Determines whether sync is supported. (optional)
     - parameter supportsPersistentIdentifier: (query) Determines whether the device supports a unique identifier. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsCapabilitiesWithRequestBuilder(id: String, playableMediaTypes: String? = nil, supportedCommands: String? = nil, supportsMediaControl: Bool? = nil, supportsSync: Bool? = nil, supportsPersistentIdentifier: Bool? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Sessions/Capabilities"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "PlayableMediaTypes": (wrappedValue: playableMediaTypes?.encodeToJSON(), isExplode: true),
            "SupportedCommands": (wrappedValue: supportedCommands?.encodeToJSON(), isExplode: true),
            "SupportsMediaControl": (wrappedValue: supportsMediaControl?.encodeToJSON(), isExplode: true),
            "SupportsSync": (wrappedValue: supportsSync?.encodeToJSON(), isExplode: true),
            "SupportsPersistentIdentifier": (wrappedValue: supportsPersistentIdentifier?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates capabilities for a device
     
     - parameter id: (query) Session Id 
     - parameter clientCapabilities: (body) ClientCapabilities:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsCapabilitiesFull(id: String, clientCapabilities: ClientCapabilities, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsCapabilitiesFullWithRequestBuilder(id: id, clientCapabilities: clientCapabilities).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates capabilities for a device
     - POST /Sessions/Capabilities/Full
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (query) Session Id 
     - parameter clientCapabilities: (body) ClientCapabilities:  
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsCapabilitiesFullWithRequestBuilder(id: String, clientCapabilities: ClientCapabilities) -> RequestBuilder<Void> {
        let localVariablePath = "/Sessions/Capabilities/Full"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clientCapabilities)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": (wrappedValue: id.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reports that a session has ended
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSessionsLogout(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postSessionsLogoutWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Reports that a session has ended
     - POST /Sessions/Logout
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Authentication
    url: https://github.com/MediaBrowser/Emby/wiki/User-Authentication
}
     - returns: RequestBuilder<Void> 
     */
    open class func postSessionsLogoutWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/Sessions/Logout"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
