//
// PlaylistServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PlaylistServiceAPI {

    /**
     Removes items from a playlist
     
     - parameter id: (path)  
     - parameter entryIds: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deletePlaylistsByIdItems(id: String, entryIds: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deletePlaylistsByIdItemsWithRequestBuilder(id: id, entryIds: entryIds).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Removes items from a playlist
     - DELETE /Playlists/{Id}/Items
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path)  
     - parameter entryIds: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func deletePlaylistsByIdItemsWithRequestBuilder(id: String, entryIds: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Playlists/{Id}/Items"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "EntryIds": (wrappedValue: entryIds.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets the original items of a playlist
     
     - parameter id: (path)  
     - parameter userId: (query) User Id (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlaylistsByIdItems(id: String, userId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, fields: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getPlaylistsByIdItemsWithRequestBuilder(id: id, userId: userId, startIndex: startIndex, limit: limit, fields: fields, enableImages: enableImages, enableUserData: enableUserData, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets the original items of a playlist
     - GET /Playlists/{Id}/Items
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter id: (path)  
     - parameter userId: (query) User Id (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getPlaylistsByIdItemsWithRequestBuilder(id: String, userId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, fields: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        var localVariablePath = "/Playlists/{Id}/Items"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a new playlist
     
     - parameter name: (query) The name of the new playlist. (optional)
     - parameter ids: (query) Item Ids to add to the playlist (optional)
     - parameter mediaType: (query) The playlist media type (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postPlaylists(name: String? = nil, ids: String? = nil, mediaType: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: PlaylistsPlaylistCreationResult?, _ error: Error?) -> Void)) -> RequestTask {
        return postPlaylistsWithRequestBuilder(name: name, ids: ids, mediaType: mediaType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a new playlist
     - POST /Playlists
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter name: (query) The name of the new playlist. (optional)
     - parameter ids: (query) Item Ids to add to the playlist (optional)
     - parameter mediaType: (query) The playlist media type (optional)
     - returns: RequestBuilder<PlaylistsPlaylistCreationResult> 
     */
    open class func postPlaylistsWithRequestBuilder(name: String? = nil, ids: String? = nil, mediaType: String? = nil) -> RequestBuilder<PlaylistsPlaylistCreationResult> {
        let localVariablePath = "/Playlists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "Ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "MediaType": (wrappedValue: mediaType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlaylistsPlaylistCreationResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Adds items to a playlist
     
     - parameter ids: (query) Item id, comma delimited 
     - parameter id: (path)  
     - parameter userId: (query) User Id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postPlaylistsByIdItems(ids: String, id: String, userId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postPlaylistsByIdItemsWithRequestBuilder(ids: ids, id: id, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds items to a playlist
     - POST /Playlists/{Id}/Items
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter ids: (query) Item id, comma delimited 
     - parameter id: (path)  
     - parameter userId: (query) User Id (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postPlaylistsByIdItemsWithRequestBuilder(ids: String, id: String, userId: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Playlists/{Id}/Items"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Ids": (wrappedValue: ids.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Moves a playlist item
     
     - parameter itemId: (path) ItemId 
     - parameter id: (path)  
     - parameter newIndex: (path) NewIndex 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postPlaylistsByIdItemsByItemidMoveByNewindex(itemId: Int64, id: String, newIndex: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postPlaylistsByIdItemsByItemidMoveByNewindexWithRequestBuilder(itemId: itemId, id: id, newIndex: newIndex).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Moves a playlist item
     - POST /Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter itemId: (path) ItemId 
     - parameter id: (path)  
     - parameter newIndex: (path) NewIndex 
     - returns: RequestBuilder<Void> 
     */
    open class func postPlaylistsByIdItemsByItemidMoveByNewindexWithRequestBuilder(itemId: Int64, id: String, newIndex: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}"
        let itemIdPreEscape = "\(APIHelper.mapValueToPathItem(itemId))"
        let itemIdPostEscape = itemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ItemId}", with: itemIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let newIndexPreEscape = "\(APIHelper.mapValueToPathItem(newIndex))"
        let newIndexPostEscape = newIndexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{NewIndex}", with: newIndexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
