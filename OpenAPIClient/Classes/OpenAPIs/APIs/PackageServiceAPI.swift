//
// PackageServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PackageServiceAPI {

    /**
     Cancels a package installation
     
     - parameter id: (path) Installation Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deletePackagesInstallingById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deletePackagesInstallingByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancels a package installation
     - DELETE /Packages/Installing/{Id}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Installation Id 
     - returns: RequestBuilder<Void> 
     */
    open class func deletePackagesInstallingByIdWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Packages/Installing/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets available packages
     
     - parameter packageType: (query) Optional package type filter (System/UserInstalled) (optional)
     - parameter targetSystems: (query) Optional. Filter by target system type. Allows multiple, comma delimited. (optional)
     - parameter isPremium: (query) Optional. Filter by premium status (optional)
     - parameter isAdult: (query) Optional. Filter by package that contain adult content. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPackages(packageType: String? = nil, targetSystems: String? = nil, isPremium: Bool? = nil, isAdult: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UpdatesPackageInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getPackagesWithRequestBuilder(packageType: packageType, targetSystems: targetSystems, isPremium: isPremium, isAdult: isAdult).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available packages
     - GET /Packages
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter packageType: (query) Optional package type filter (System/UserInstalled) (optional)
     - parameter targetSystems: (query) Optional. Filter by target system type. Allows multiple, comma delimited. (optional)
     - parameter isPremium: (query) Optional. Filter by premium status (optional)
     - parameter isAdult: (query) Optional. Filter by package that contain adult content. (optional)
     - returns: RequestBuilder<[UpdatesPackageInfo]> 
     */
    open class func getPackagesWithRequestBuilder(packageType: String? = nil, targetSystems: String? = nil, isPremium: Bool? = nil, isAdult: Bool? = nil) -> RequestBuilder<[UpdatesPackageInfo]> {
        let localVariablePath = "/Packages"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "PackageType": (wrappedValue: packageType?.encodeToJSON(), isExplode: true),
            "TargetSystems": (wrappedValue: targetSystems?.encodeToJSON(), isExplode: true),
            "IsPremium": (wrappedValue: isPremium?.encodeToJSON(), isExplode: true),
            "IsAdult": (wrappedValue: isAdult?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UpdatesPackageInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a package, by name or assembly guid
     
     - parameter name: (path) The name of the package 
     - parameter assemblyGuid: (query) The guid of the associated assembly (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPackagesByName(name: String, assemblyGuid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: UpdatesPackageInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return getPackagesByNameWithRequestBuilder(name: name, assemblyGuid: assemblyGuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a package, by name or assembly guid
     - GET /Packages/{Name}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter name: (path) The name of the package 
     - parameter assemblyGuid: (query) The guid of the associated assembly (optional)
     - returns: RequestBuilder<UpdatesPackageInfo> 
     */
    open class func getPackagesByNameWithRequestBuilder(name: String, assemblyGuid: String? = nil) -> RequestBuilder<UpdatesPackageInfo> {
        var localVariablePath = "/Packages/{Name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "AssemblyGuid": (wrappedValue: assemblyGuid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdatesPackageInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets available package updates for currently installed packages
     
     - parameter packageType: (query) Package type filter (System/UserInstalled) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPackagesUpdates(packageType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [UpdatesPackageVersionInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getPackagesUpdatesWithRequestBuilder(packageType: packageType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available package updates for currently installed packages
     - GET /Packages/Updates
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter packageType: (query) Package type filter (System/UserInstalled) 
     - returns: RequestBuilder<[UpdatesPackageVersionInfo]> 
     */
    open class func getPackagesUpdatesWithRequestBuilder(packageType: String) -> RequestBuilder<[UpdatesPackageVersionInfo]> {
        let localVariablePath = "/Packages/Updates"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "PackageType": (wrappedValue: packageType.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UpdatesPackageVersionInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter updateClass
     */
    public enum UpdateClass_postPackagesInstalledByName: String, CaseIterable {
        case release = "Release"
        case beta = "Beta"
        case dev = "Dev"
    }

    /**
     Installs a package
     
     - parameter name: (path) Package name 
     - parameter assemblyGuid: (query) Guid of the associated assembly (optional)
     - parameter version: (query) Optional version. Defaults to latest version. (optional)
     - parameter updateClass: (query) Optional update class (Dev, Beta, Release). Defaults to Release. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postPackagesInstalledByName(name: String, assemblyGuid: String? = nil, version: String? = nil, updateClass: UpdateClass_postPackagesInstalledByName? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postPackagesInstalledByNameWithRequestBuilder(name: name, assemblyGuid: assemblyGuid, version: version, updateClass: updateClass).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Installs a package
     - POST /Packages/Installed/{Name}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter name: (path) Package name 
     - parameter assemblyGuid: (query) Guid of the associated assembly (optional)
     - parameter version: (query) Optional version. Defaults to latest version. (optional)
     - parameter updateClass: (query) Optional update class (Dev, Beta, Release). Defaults to Release. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postPackagesInstalledByNameWithRequestBuilder(name: String, assemblyGuid: String? = nil, version: String? = nil, updateClass: UpdateClass_postPackagesInstalledByName? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Packages/Installed/{Name}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "AssemblyGuid": (wrappedValue: assemblyGuid?.encodeToJSON(), isExplode: true),
            "Version": (wrappedValue: version?.encodeToJSON(), isExplode: true),
            "UpdateClass": (wrappedValue: updateClass?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
