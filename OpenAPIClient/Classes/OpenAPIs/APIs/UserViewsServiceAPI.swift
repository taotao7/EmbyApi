//
// UserViewsServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserViewsServiceAPI {

    /**

     - parameter userId: (path) User Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsersByUseridGroupingoptions(userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [BaseItemDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersByUseridGroupingoptionsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Users/{UserId}/GroupingOptions
     - No authentication required
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (path) User Id 
     - returns: RequestBuilder<[BaseItemDto]> 
     */
    open class func getUsersByUseridGroupingoptionsWithRequestBuilder(userId: String) -> RequestBuilder<[BaseItemDto]> {
        var localVariablePath = "/Users/{UserId}/GroupingOptions"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[BaseItemDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter userId: (path) User Id 
     - parameter includeExternalContent: (query) Whether or not to include external views such as channels or live tv 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsersByUseridViews(userId: String, includeExternalContent: Bool, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersByUseridViewsWithRequestBuilder(userId: userId, includeExternalContent: includeExternalContent).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Users/{UserId}/Views
     - No authentication required
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Browsing the Library
    url: https://github.com/MediaBrowser/Emby/wiki/Browsing-the-Library
}
     - parameter userId: (path) User Id 
     - parameter includeExternalContent: (query) Whether or not to include external views such as channels or live tv 
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getUsersByUseridViewsWithRequestBuilder(userId: String, includeExternalContent: Bool) -> RequestBuilder<QueryResultBaseItemDto> {
        var localVariablePath = "/Users/{UserId}/Views"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UserId}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "IncludeExternalContent": (wrappedValue: includeExternalContent.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
