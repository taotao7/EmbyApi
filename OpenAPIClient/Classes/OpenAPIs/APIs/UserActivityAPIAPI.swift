//
// UserActivityAPIAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserActivityAPIAPI {

    /**
     Gets a breakdown of a usage metric
     
     - parameter breakdownType: (path) Breakdown type 
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsByBreakdowntypeBreakdownreport(breakdownType: String, days: Int? = nil, endDate: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsByBreakdowntypeBreakdownreportWithRequestBuilder(breakdownType: breakdownType, days: days, endDate: endDate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a breakdown of a usage metric
     - GET /user_usage_stats/{BreakdownType}/BreakdownReport
     - No authentication required
     - parameter breakdownType: (path) Breakdown type 
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsByBreakdowntypeBreakdownreportWithRequestBuilder(breakdownType: String, days: Int? = nil, endDate: String? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/user_usage_stats/{BreakdownType}/BreakdownReport"
        let breakdownTypePreEscape = "\(APIHelper.mapValueToPathItem(breakdownType))"
        let breakdownTypePostEscape = breakdownTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{BreakdownType}", with: breakdownTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
     
     - parameter userID: (path) User Id 
     - parameter date: (path) UTC DateTime, Format yyyy-MM-dd 
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsByUseridByDateGetitems(userID: String, date: String, filter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsByUseridByDateGetitemsWithRequestBuilder(userID: userID, date: date, filter: filter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets activity for {USER} for {Date} formatted as yyyy-MM-dd
     - GET /user_usage_stats/{UserID}/{Date}/GetItems
     - No authentication required
     - parameter userID: (path) User Id 
     - parameter date: (path) UTC DateTime, Format yyyy-MM-dd 
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsByUseridByDateGetitemsWithRequestBuilder(userID: String, date: String, filter: String? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/user_usage_stats/{UserID}/{Date}/GetItems"
        let userIDPreEscape = "\(APIHelper.mapValueToPathItem(userID))"
        let userIDPostEscape = userIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UserID}", with: userIDPostEscape, options: .literal, range: nil)
        let datePreEscape = "\(APIHelper.mapValueToPathItem(date))"
        let datePostEscape = datePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Date}", with: datePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets duration histogram
     
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsDurationhistogramreport(days: Int? = nil, endDate: String? = nil, filter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsDurationhistogramreportWithRequestBuilder(days: days, endDate: endDate, filter: filter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets duration histogram
     - GET /user_usage_stats/DurationHistogramReport
     - No authentication required
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsDurationhistogramreportWithRequestBuilder(days: Int? = nil, endDate: String? = nil, filter: String? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/DurationHistogramReport"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a report of the available activity per hour
     
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsHourlyreport(days: Int? = nil, endDate: String? = nil, filter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsHourlyreportWithRequestBuilder(days: days, endDate: endDate, filter: filter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a report of the available activity per hour
     - GET /user_usage_stats/HourlyReport
     - No authentication required
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsHourlyreportWithRequestBuilder(days: Int? = nil, endDate: String? = nil, filter: String? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/HourlyReport"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Loads a backup from a file
     
     - parameter backupfile: (query) File name of file to load 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsLoadBackup(backupfile: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsLoadBackupWithRequestBuilder(backupfile: backupfile).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Loads a backup from a file
     - GET /user_usage_stats/load_backup
     - No authentication required
     - parameter backupfile: (query) File name of file to load 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsLoadBackupWithRequestBuilder(backupfile: String) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/load_backup"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "backupfile": (wrappedValue: backupfile.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets Movies counts
     
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsMoviesreport(days: Int? = nil, endDate: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsMoviesreportWithRequestBuilder(days: days, endDate: endDate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Movies counts
     - GET /user_usage_stats/MoviesReport
     - No authentication required
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsMoviesreportWithRequestBuilder(days: Int? = nil, endDate: String? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/MoviesReport"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets play activity for number of days
     
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - parameter dataType: (query) Data type to return (count,time) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsPlayactivity(days: Int? = nil, endDate: String? = nil, filter: String? = nil, dataType: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsPlayactivityWithRequestBuilder(days: days, endDate: endDate, filter: filter, dataType: dataType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets play activity for number of days
     - GET /user_usage_stats/PlayActivity
     - No authentication required
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - parameter dataType: (query) Data type to return (count,time) (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsPlayactivityWithRequestBuilder(days: Int? = nil, endDate: String? = nil, filter: String? = nil, dataType: String? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/PlayActivity"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "data_type": (wrappedValue: dataType?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a list of process Info
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsProcessList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsProcessListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of process Info
     - GET /user_usage_stats/process_list
     - No authentication required
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsProcessListWithRequestBuilder() -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/process_list"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets Resource Usage Info
     
     - parameter hours: (query) Number of Hours (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsResourceUsage(hours: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsResourceUsageWithRequestBuilder(hours: hours).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Resource Usage Info
     - GET /user_usage_stats/resource_usage
     - No authentication required
     - parameter hours: (query) Number of Hours (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsResourceUsageWithRequestBuilder(hours: Int? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/resource_usage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hours": (wrappedValue: hours?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Saves a backup of the playback report data to the backup path
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsSaveBackup(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsSaveBackupWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Saves a backup of the playback report data to the backup path
     - GET /user_usage_stats/save_backup
     - No authentication required
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsSaveBackupWithRequestBuilder() -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/save_backup"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets Session Info
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsSessionList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsSessionListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets Session Info
     - GET /user_usage_stats/session_list
     - No authentication required
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsSessionListWithRequestBuilder() -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/session_list"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets TV Shows counts
     
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsTvshowsreport(days: Int? = nil, endDate: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsTvshowsreportWithRequestBuilder(days: days, endDate: endDate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets TV Shows counts
     - GET /user_usage_stats/TvShowsReport
     - No authentication required
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsTvshowsreportWithRequestBuilder(days: Int? = nil, endDate: String? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/TvShowsReport"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets types filter list items
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsTypeFilterList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsTypeFilterListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets types filter list items
     - GET /user_usage_stats/type_filter_list
     - No authentication required
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsTypeFilterListWithRequestBuilder() -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/type_filter_list"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a report of the available activity per hour
     
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsUserActivity(days: Int? = nil, endDate: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsUserActivityWithRequestBuilder(days: days, endDate: endDate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a report of the available activity per hour
     - GET /user_usage_stats/user_activity
     - No authentication required
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsUserActivityWithRequestBuilder(days: Int? = nil, endDate: String? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/user_activity"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get users
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsUserList(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsUserListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get users
     - GET /user_usage_stats/user_list
     - No authentication required
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsUserListWithRequestBuilder() -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/user_list"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get users
     
     - parameter action: (path) action to perform 
     - parameter id: (path) user Id to perform the action on 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsUserManageByActionById(action: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsUserManageByActionByIdWithRequestBuilder(action: action, id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get users
     - GET /user_usage_stats/user_manage/{Action}/{Id}
     - No authentication required
     - parameter action: (path) action to perform 
     - parameter id: (path) user Id to perform the action on 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsUserManageByActionByIdWithRequestBuilder(action: String, id: String) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/user_usage_stats/user_manage/{Action}/{Id}"
        let actionPreEscape = "\(APIHelper.mapValueToPathItem(action))"
        let actionPostEscape = actionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Action}", with: actionPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a report of all played items for a user in a date period
     
     - parameter userId: (query) User Id 
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserUsageStatsUserplaylist(userId: String, days: Int? = nil, endDate: String? = nil, filter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserUsageStatsUserplaylistWithRequestBuilder(userId: userId, days: days, endDate: endDate, filter: filter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a report of all played items for a user in a date period
     - GET /user_usage_stats/UserPlaylist
     - No authentication required
     - parameter userId: (query) User Id 
     - parameter days: (query) Number of Days (optional)
     - parameter endDate: (query) End date of the report in yyyy-MM-dd format (optional)
     - parameter filter: (query) Comma separated list of media types to filter (movies,series) (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getUserUsageStatsUserplaylistWithRequestBuilder(userId: String, days: Int? = nil, endDate: String? = nil, filter: String? = nil) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/UserPlaylist"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user_id": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "days": (wrappedValue: days?.encodeToJSON(), isExplode: true),
            "end_date": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Post a backup for importing
     
     - parameter body: (body) Binary stream 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postUserUsageStatsImportBackup(body: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postUserUsageStatsImportBackupWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Post a backup for importing
     - POST /user_usage_stats/import_backup
     - No authentication required
     - parameter body: (body) Binary stream 
     - returns: RequestBuilder<Void> 
     */
    open class func postUserUsageStatsImportBackupWithRequestBuilder(body: URL) -> RequestBuilder<Void> {
        let localVariablePath = "/user_usage_stats/import_backup"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Submit an SQL query
     
     - parameter playbackReportingApiCustomQuery: (body) CustomQuery 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postUserUsageStatsSubmitCustomQuery(playbackReportingApiCustomQuery: PlaybackReportingApiCustomQuery, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return postUserUsageStatsSubmitCustomQueryWithRequestBuilder(playbackReportingApiCustomQuery: playbackReportingApiCustomQuery).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Submit an SQL query
     - POST /user_usage_stats/submit_custom_query
     - No authentication required
     - parameter playbackReportingApiCustomQuery: (body) CustomQuery 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func postUserUsageStatsSubmitCustomQueryWithRequestBuilder(playbackReportingApiCustomQuery: PlaybackReportingApiCustomQuery) -> RequestBuilder<AnyCodable> {
        let localVariablePath = "/user_usage_stats/submit_custom_query"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: playbackReportingApiCustomQuery)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
