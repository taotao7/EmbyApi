//
// DlnaServerServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DlnaServerServiceAPI {

    /**
     Gets dlna connection manager xml
     
     - parameter uuId: (path) Server UuId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaByUuidConnectionmanagerConnectionmanager(uuId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaByUuidConnectionmanagerConnectionmanagerWithRequestBuilder(uuId: uuId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets dlna connection manager xml
     - GET /Dlna/{UuId}/connectionmanager/connectionmanager
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidConnectionmanagerConnectionmanagerWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/connectionmanager/connectionmanager"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets dlna connection manager xml
     
     - parameter uuId: (path) Server UuId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaByUuidConnectionmanagerConnectionmanagerXml(uuId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaByUuidConnectionmanagerConnectionmanagerXmlWithRequestBuilder(uuId: uuId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets dlna connection manager xml
     - GET /Dlna/{UuId}/connectionmanager/connectionmanager.xml
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidConnectionmanagerConnectionmanagerXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/connectionmanager/connectionmanager.xml"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets dlna content directory xml
     
     - parameter uuId: (path) Server UuId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaByUuidContentdirectoryContentdirectory(uuId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaByUuidContentdirectoryContentdirectoryWithRequestBuilder(uuId: uuId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets dlna content directory xml
     - GET /Dlna/{UuId}/contentdirectory/contentdirectory
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidContentdirectoryContentdirectoryWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/contentdirectory/contentdirectory"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets dlna content directory xml
     
     - parameter uuId: (path) Server UuId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaByUuidContentdirectoryContentdirectoryXml(uuId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaByUuidContentdirectoryContentdirectoryXmlWithRequestBuilder(uuId: uuId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets dlna content directory xml
     - GET /Dlna/{UuId}/contentdirectory/contentdirectory.xml
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidContentdirectoryContentdirectoryXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/contentdirectory/contentdirectory.xml"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets dlna server info
     
     - parameter uuId: (path) Server UuId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaByUuidDescription(uuId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaByUuidDescriptionWithRequestBuilder(uuId: uuId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets dlna server info
     - GET /Dlna/{UuId}/description
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidDescriptionWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/description"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets dlna server info
     
     - parameter uuId: (path) Server UuId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaByUuidDescriptionXml(uuId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaByUuidDescriptionXmlWithRequestBuilder(uuId: uuId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets dlna server info
     - GET /Dlna/{UuId}/description.xml
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidDescriptionXmlWithRequestBuilder(uuId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/description.xml"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a server icon
     
     - parameter uuId: (path) Server UuId 
     - parameter filename: (path) The icon filename 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaByUuidIconsByFilename(uuId: String, filename: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaByUuidIconsByFilenameWithRequestBuilder(uuId: uuId, filename: filename).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a server icon
     - GET /Dlna/{UuId}/icons/{Filename}
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - parameter filename: (path) The icon filename 
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaByUuidIconsByFilenameWithRequestBuilder(uuId: String, filename: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/icons/{Filename}"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let filenamePreEscape = "\(APIHelper.mapValueToPathItem(filename))"
        let filenamePostEscape = filenamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Filename}", with: filenamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a server icon
     
     - parameter filename: (path) The icon filename 
     - parameter uuId: (query) Server UuId (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDlnaIconsByFilename(filename: String, uuId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getDlnaIconsByFilenameWithRequestBuilder(filename: filename, uuId: uuId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a server icon
     - GET /Dlna/icons/{Filename}
     - No authentication required
     - parameter filename: (path) The icon filename 
     - parameter uuId: (query) Server UuId (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getDlnaIconsByFilenameWithRequestBuilder(filename: String, uuId: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/icons/{Filename}"
        let filenamePreEscape = "\(APIHelper.mapValueToPathItem(filename))"
        let filenamePostEscape = filenamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Filename}", with: filenamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UuId": (wrappedValue: uuId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Processes a control request
     
     - parameter uuId: (path) Server UuId 
     - parameter body: (body) Binary stream 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postDlnaByUuidConnectionmanagerControl(uuId: String, body: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postDlnaByUuidConnectionmanagerControlWithRequestBuilder(uuId: uuId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Processes a control request
     - POST /Dlna/{UuId}/connectionmanager/control
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - parameter body: (body) Binary stream 
     - returns: RequestBuilder<Void> 
     */
    open class func postDlnaByUuidConnectionmanagerControlWithRequestBuilder(uuId: String, body: URL) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/connectionmanager/control"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Processes a control request
     
     - parameter uuId: (path) Server UuId 
     - parameter body: (body) Binary stream 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postDlnaByUuidContentdirectoryControl(uuId: String, body: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postDlnaByUuidContentdirectoryControlWithRequestBuilder(uuId: uuId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Processes a control request
     - POST /Dlna/{UuId}/contentdirectory/control
     - No authentication required
     - parameter uuId: (path) Server UuId 
     - parameter body: (body) Binary stream 
     - returns: RequestBuilder<Void> 
     */
    open class func postDlnaByUuidContentdirectoryControlWithRequestBuilder(uuId: String, body: URL) -> RequestBuilder<Void> {
        var localVariablePath = "/Dlna/{UuId}/contentdirectory/control"
        let uuIdPreEscape = "\(APIHelper.mapValueToPathItem(uuId))"
        let uuIdPostEscape = uuIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UuId}", with: uuIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
