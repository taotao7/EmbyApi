//
// SearchServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SearchServiceAPI {

    /**
     Gets search hints based on a search term
     
     - parameter searchTerm: (query) The search term to filter on 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter userId: (query) Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     - parameter includePeople: (query)  (optional)
     - parameter includeMedia: (query)  (optional)
     - parameter includeGenres: (query)  (optional)
     - parameter includeStudios: (query)  (optional)
     - parameter includeArtists: (query)  (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSearchHints(searchTerm: String, startIndex: Int? = nil, limit: Int? = nil, userId: String? = nil, includePeople: Bool? = nil, includeMedia: Bool? = nil, includeGenres: Bool? = nil, includeStudios: Bool? = nil, includeArtists: Bool? = nil, includeItemTypes: String? = nil, excludeItemTypes: String? = nil, mediaTypes: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchSearchHintResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getSearchHintsWithRequestBuilder(searchTerm: searchTerm, startIndex: startIndex, limit: limit, userId: userId, includePeople: includePeople, includeMedia: includeMedia, includeGenres: includeGenres, includeStudios: includeStudios, includeArtists: includeArtists, includeItemTypes: includeItemTypes, excludeItemTypes: excludeItemTypes, mediaTypes: mediaTypes, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets search hints based on a search term
     - GET /Search/Hints
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter searchTerm: (query) The search term to filter on 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter userId: (query) Optional. Supply a user id to search within a user&#39;s library or omit to search all. (optional)
     - parameter includePeople: (query)  (optional)
     - parameter includeMedia: (query)  (optional)
     - parameter includeGenres: (query)  (optional)
     - parameter includeStudios: (query)  (optional)
     - parameter includeArtists: (query)  (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - returns: RequestBuilder<SearchSearchHintResult> 
     */
    open class func getSearchHintsWithRequestBuilder(searchTerm: String, startIndex: Int? = nil, limit: Int? = nil, userId: String? = nil, includePeople: Bool? = nil, includeMedia: Bool? = nil, includeGenres: Bool? = nil, includeStudios: Bool? = nil, includeArtists: Bool? = nil, includeItemTypes: String? = nil, excludeItemTypes: String? = nil, mediaTypes: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil) -> RequestBuilder<SearchSearchHintResult> {
        let localVariablePath = "/Search/Hints"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "SearchTerm": (wrappedValue: searchTerm.encodeToJSON(), isExplode: true),
            "IncludePeople": (wrappedValue: includePeople?.encodeToJSON(), isExplode: true),
            "IncludeMedia": (wrappedValue: includeMedia?.encodeToJSON(), isExplode: true),
            "IncludeGenres": (wrappedValue: includeGenres?.encodeToJSON(), isExplode: true),
            "IncludeStudios": (wrappedValue: includeStudios?.encodeToJSON(), isExplode: true),
            "IncludeArtists": (wrappedValue: includeArtists?.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
            "ExcludeItemTypes": (wrappedValue: excludeItemTypes?.encodeToJSON(), isExplode: true),
            "MediaTypes": (wrappedValue: mediaTypes?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSearchHintResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
