//
// FilterServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FilterServiceAPI {

    /**
     Gets branding configuration
     
     - parameter userId: (query) User Id (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsFilters(userId: String? = nil, parentId: String? = nil, includeItemTypes: String? = nil, mediaTypes: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryFiltersLegacy?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsFiltersWithRequestBuilder(userId: userId, parentId: parentId, includeItemTypes: includeItemTypes, mediaTypes: mediaTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets branding configuration
     - GET /Items/Filters
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Filtering
    url: https://github.com/MediaBrowser/Emby/wiki/Filtering
}
     - parameter userId: (query) User Id (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - returns: RequestBuilder<QueryFiltersLegacy> 
     */
    open class func getItemsFiltersWithRequestBuilder(userId: String? = nil, parentId: String? = nil, includeItemTypes: String? = nil, mediaTypes: String? = nil) -> RequestBuilder<QueryFiltersLegacy> {
        let localVariablePath = "/Items/Filters"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
            "MediaTypes": (wrappedValue: mediaTypes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryFiltersLegacy>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets branding configuration
     
     - parameter userId: (query) User Id (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsFilters2(userId: String? = nil, parentId: String? = nil, includeItemTypes: String? = nil, mediaTypes: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryFilters?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsFilters2WithRequestBuilder(userId: userId, parentId: parentId, includeItemTypes: includeItemTypes, mediaTypes: mediaTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets branding configuration
     - GET /Items/Filters2
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter userId: (query) User Id (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - returns: RequestBuilder<QueryFilters> 
     */
    open class func getItemsFilters2WithRequestBuilder(userId: String? = nil, parentId: String? = nil, includeItemTypes: String? = nil, mediaTypes: String? = nil) -> RequestBuilder<QueryFilters> {
        let localVariablePath = "/Items/Filters2"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
            "MediaTypes": (wrappedValue: mediaTypes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryFilters>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
