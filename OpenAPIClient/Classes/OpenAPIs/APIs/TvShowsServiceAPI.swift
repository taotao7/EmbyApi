//
// TvShowsServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TvShowsServiceAPI {

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_getShowsByIdEpisodes: String, CaseIterable {
        case ascending = "Ascending"
        case descending = "Descending"
    }

    /**
     Gets episodes for a tv season
     
     - parameter userId: (query) User Id 
     - parameter id: (path) The series id 
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter season: (query) Optional filter by season number. (optional)
     - parameter seasonId: (query) Optional. Filter by season id (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter startItemId: (query) Optional. Skip through the list until a given item is found. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShowsByIdEpisodes(userId: String, id: String, fields: String? = nil, season: Int? = nil, seasonId: String? = nil, isMissing: Bool? = nil, adjacentTo: String? = nil, startItemId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil, sortBy: String? = nil, sortOrder: SortOrder_getShowsByIdEpisodes? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getShowsByIdEpisodesWithRequestBuilder(userId: userId, id: id, fields: fields, season: season, seasonId: seasonId, isMissing: isMissing, adjacentTo: adjacentTo, startItemId: startItemId, startIndex: startIndex, limit: limit, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, enableUserData: enableUserData, sortBy: sortBy, sortOrder: sortOrder).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets episodes for a tv season
     - GET /Shows/{Id}/Episodes
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (query) User Id 
     - parameter id: (path) The series id 
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter season: (query) Optional filter by season number. (optional)
     - parameter seasonId: (query) Optional. Filter by season id (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter startItemId: (query) Optional. Skip through the list until a given item is found. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getShowsByIdEpisodesWithRequestBuilder(userId: String, id: String, fields: String? = nil, season: Int? = nil, seasonId: String? = nil, isMissing: Bool? = nil, adjacentTo: String? = nil, startItemId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil, sortBy: String? = nil, sortOrder: SortOrder_getShowsByIdEpisodes? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        var localVariablePath = "/Shows/{Id}/Episodes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "Season": (wrappedValue: season?.encodeToJSON(), isExplode: true),
            "SeasonId": (wrappedValue: seasonId?.encodeToJSON(), isExplode: true),
            "IsMissing": (wrappedValue: isMissing?.encodeToJSON(), isExplode: true),
            "AdjacentTo": (wrappedValue: adjacentTo?.encodeToJSON(), isExplode: true),
            "StartItemId": (wrappedValue: startItemId?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
            "SortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "SortOrder": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets seasons for a tv series
     
     - parameter userId: (query) User Id 
     - parameter id: (path) The series id 
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter isSpecialSeason: (query) Optional. Filter by special season. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShowsByIdSeasons(userId: String, id: String, fields: String? = nil, isSpecialSeason: Bool? = nil, isMissing: Bool? = nil, adjacentTo: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getShowsByIdSeasonsWithRequestBuilder(userId: userId, id: id, fields: fields, isSpecialSeason: isSpecialSeason, isMissing: isMissing, adjacentTo: adjacentTo, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, enableUserData: enableUserData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets seasons for a tv series
     - GET /Shows/{Id}/Seasons
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (query) User Id 
     - parameter id: (path) The series id 
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter isSpecialSeason: (query) Optional. Filter by special season. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getShowsByIdSeasonsWithRequestBuilder(userId: String, id: String, fields: String? = nil, isSpecialSeason: Bool? = nil, isMissing: Bool? = nil, adjacentTo: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        var localVariablePath = "/Shows/{Id}/Seasons"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "IsSpecialSeason": (wrappedValue: isSpecialSeason?.encodeToJSON(), isExplode: true),
            "IsMissing": (wrappedValue: isMissing?.encodeToJSON(), isExplode: true),
            "AdjacentTo": (wrappedValue: adjacentTo?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a list of next up episodes
     
     - parameter userId: (query) User Id 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter seriesId: (query) Optional. Filter by series id (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShowsNextup(userId: String, startIndex: Int? = nil, limit: Int? = nil, fields: String? = nil, seriesId: String? = nil, parentId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getShowsNextupWithRequestBuilder(userId: userId, startIndex: startIndex, limit: limit, fields: fields, seriesId: seriesId, parentId: parentId, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, enableUserData: enableUserData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of next up episodes
     - GET /Shows/NextUp
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (query) User Id 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter seriesId: (query) Optional. Filter by series id (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getShowsNextupWithRequestBuilder(userId: String, startIndex: Int? = nil, limit: Int? = nil, fields: String? = nil, seriesId: String? = nil, parentId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/Shows/NextUp"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "SeriesId": (wrappedValue: seriesId?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a list of upcoming episodes
     
     - parameter userId: (query) User Id 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShowsUpcoming(userId: String, startIndex: Int? = nil, limit: Int? = nil, fields: String? = nil, parentId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getShowsUpcomingWithRequestBuilder(userId: userId, startIndex: startIndex, limit: limit, fields: fields, parentId: parentId, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, enableUserData: enableUserData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a list of upcoming episodes
     - GET /Shows/Upcoming
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (query) User Id 
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getShowsUpcomingWithRequestBuilder(userId: String, startIndex: Int? = nil, limit: Int? = nil, fields: String? = nil, parentId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/Shows/Upcoming"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
