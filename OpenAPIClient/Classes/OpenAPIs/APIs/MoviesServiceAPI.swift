//
// MoviesServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MoviesServiceAPI {

    /**
     Gets movie recommendations
     
     - parameter categoryLimit: (query) The max number of categories to return (optional)
     - parameter itemLimit: (query) The max number of items to return per category (optional)
     - parameter userId: (query) Optional. Filter by user id, and attach user data (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMoviesRecommendations(categoryLimit: Int? = nil, itemLimit: Int? = nil, userId: String? = nil, parentId: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RecommendationDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getMoviesRecommendationsWithRequestBuilder(categoryLimit: categoryLimit, itemLimit: itemLimit, userId: userId, parentId: parentId, enableImages: enableImages, enableUserData: enableUserData, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets movie recommendations
     - GET /Movies/Recommendations
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter categoryLimit: (query) The max number of categories to return (optional)
     - parameter itemLimit: (query) The max number of items to return per category (optional)
     - parameter userId: (query) Optional. Filter by user id, and attach user data (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - returns: RequestBuilder<[RecommendationDto]> 
     */
    open class func getMoviesRecommendationsWithRequestBuilder(categoryLimit: Int? = nil, itemLimit: Int? = nil, userId: String? = nil, parentId: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil) -> RequestBuilder<[RecommendationDto]> {
        let localVariablePath = "/Movies/Recommendations"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "CategoryLimit": (wrappedValue: categoryLimit?.encodeToJSON(), isExplode: true),
            "ItemLimit": (wrappedValue: itemLimit?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RecommendationDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
