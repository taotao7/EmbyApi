//
// ReportsServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ReportsServiceAPI {

    /**
     Gets activities entries
     
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter hasQueryLimit: (query) Optional. If specified, results will include all records. (optional)
     - parameter groupBy: (query) Optional. If specified, results will include grouped records. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getReportsActivities(reportView: String, displayType: String, hasQueryLimit: Bool? = nil, groupBy: String? = nil, reportColumns: String? = nil, startIndex: Int? = nil, limit: Int? = nil, includeItemTypes: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmbyReportsApiModelReportResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getReportsActivitiesWithRequestBuilder(reportView: reportView, displayType: displayType, hasQueryLimit: hasQueryLimit, groupBy: groupBy, reportColumns: reportColumns, startIndex: startIndex, limit: limit, includeItemTypes: includeItemTypes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets activities entries
     - GET /Reports/Activities
     - No authentication required
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter hasQueryLimit: (query) Optional. If specified, results will include all records. (optional)
     - parameter groupBy: (query) Optional. If specified, results will include grouped records. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - returns: RequestBuilder<EmbyReportsApiModelReportResult> 
     */
    open class func getReportsActivitiesWithRequestBuilder(reportView: String, displayType: String, hasQueryLimit: Bool? = nil, groupBy: String? = nil, reportColumns: String? = nil, startIndex: Int? = nil, limit: Int? = nil, includeItemTypes: String? = nil) -> RequestBuilder<EmbyReportsApiModelReportResult> {
        let localVariablePath = "/Reports/Activities"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ReportView": (wrappedValue: reportView.encodeToJSON(), isExplode: true),
            "DisplayType": (wrappedValue: displayType.encodeToJSON(), isExplode: true),
            "HasQueryLimit": (wrappedValue: hasQueryLimit?.encodeToJSON(), isExplode: true),
            "GroupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: true),
            "ReportColumns": (wrappedValue: reportColumns?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmbyReportsApiModelReportResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets reports headers based on library items
     
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getReportsHeaders(reportView: String, displayType: String, includeItemTypes: String? = nil, reportColumns: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [EmbyReportsApiModelReportHeader]?, _ error: Error?) -> Void)) -> RequestTask {
        return getReportsHeadersWithRequestBuilder(reportView: reportView, displayType: displayType, includeItemTypes: includeItemTypes, reportColumns: reportColumns).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets reports headers based on library items
     - GET /Reports/Headers
     - No authentication required
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - returns: RequestBuilder<[EmbyReportsApiModelReportHeader]> 
     */
    open class func getReportsHeadersWithRequestBuilder(reportView: String, displayType: String, includeItemTypes: String? = nil, reportColumns: String? = nil) -> RequestBuilder<[EmbyReportsApiModelReportHeader]> {
        let localVariablePath = "/Reports/Headers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ReportView": (wrappedValue: reportView.encodeToJSON(), isExplode: true),
            "DisplayType": (wrappedValue: displayType.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
            "ReportColumns": (wrappedValue: reportColumns?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[EmbyReportsApiModelReportHeader]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets reports based on library items
     
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter minIndexNumber: (query) Optional filter by minimum index number. (optional)
     - parameter minPlayers: (query) Optional filter by minimum number of game players. (optional)
     - parameter maxPlayers: (query) Optional filter by maximum number of game players. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating (optional)
     - parameter isHD: (query) Optional filter by items that are HD or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter airedDuringSeason: (query) Gets all episodes that aired during a season, including specials. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)
     - parameter containers: (query) Optional filter by Container. Allows multiple, comma delimeted. (optional)
     - parameter userId: (query) User Id (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings (optional)
     - parameter collapseBoxSetItems: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimeted. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - parameter hasQueryLimit: (query) Optional. If specified, results will include all records. (optional)
     - parameter groupBy: (query) Optional. If specified, results will include grouped records. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getReportsItems(reportView: String, displayType: String, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, minIndexNumber: Int? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHD: Bool? = nil, locationTypes: String? = nil, excludeLocationTypes: String? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, airedDuringSeason: Int? = nil, minPremiereDate: String? = nil, minDateLastSaved: String? = nil, minDateLastSavedForUser: String? = nil, maxPremiereDate: String? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: String? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, sortOrder: String? = nil, parentId: String? = nil, fields: String? = nil, excludeItemTypes: String? = nil, includeItemTypes: String? = nil, filters: String? = nil, isFavorite: Bool? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, mediaTypes: String? = nil, imageTypes: String? = nil, sortBy: String? = nil, isPlayed: Bool? = nil, genres: String? = nil, officialRatings: String? = nil, tags: String? = nil, years: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, person: String? = nil, personIds: String? = nil, personTypes: String? = nil, studios: String? = nil, studioIds: String? = nil, artists: String? = nil, artistIds: String? = nil, albums: String? = nil, ids: String? = nil, videoTypes: String? = nil, containers: String? = nil, userId: String? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, collapseBoxSetItems: Bool? = nil, is3D: Bool? = nil, seriesStatus: String? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, hasQueryLimit: Bool? = nil, groupBy: String? = nil, reportColumns: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: EmbyReportsApiModelReportResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getReportsItemsWithRequestBuilder(reportView: reportView, displayType: displayType, maxOfficialRating: maxOfficialRating, hasThemeSong: hasThemeSong, hasThemeVideo: hasThemeVideo, hasSubtitles: hasSubtitles, hasSpecialFeature: hasSpecialFeature, hasTrailer: hasTrailer, adjacentTo: adjacentTo, minIndexNumber: minIndexNumber, minPlayers: minPlayers, maxPlayers: maxPlayers, parentIndexNumber: parentIndexNumber, hasParentalRating: hasParentalRating, isHD: isHD, locationTypes: locationTypes, excludeLocationTypes: excludeLocationTypes, isMissing: isMissing, isUnaired: isUnaired, minCommunityRating: minCommunityRating, minCriticRating: minCriticRating, airedDuringSeason: airedDuringSeason, minPremiereDate: minPremiereDate, minDateLastSaved: minDateLastSaved, minDateLastSavedForUser: minDateLastSavedForUser, maxPremiereDate: maxPremiereDate, hasOverview: hasOverview, hasImdbId: hasImdbId, hasTmdbId: hasTmdbId, hasTvdbId: hasTvdbId, excludeItemIds: excludeItemIds, startIndex: startIndex, limit: limit, recursive: recursive, sortOrder: sortOrder, parentId: parentId, fields: fields, excludeItemTypes: excludeItemTypes, includeItemTypes: includeItemTypes, filters: filters, isFavorite: isFavorite, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, mediaTypes: mediaTypes, imageTypes: imageTypes, sortBy: sortBy, isPlayed: isPlayed, genres: genres, officialRatings: officialRatings, tags: tags, years: years, enableImages: enableImages, enableUserData: enableUserData, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, person: person, personIds: personIds, personTypes: personTypes, studios: studios, studioIds: studioIds, artists: artists, artistIds: artistIds, albums: albums, ids: ids, videoTypes: videoTypes, containers: containers, userId: userId, minOfficialRating: minOfficialRating, isLocked: isLocked, isPlaceHolder: isPlaceHolder, hasOfficialRating: hasOfficialRating, collapseBoxSetItems: collapseBoxSetItems, is3D: is3D, seriesStatus: seriesStatus, nameStartsWithOrGreater: nameStartsWithOrGreater, nameStartsWith: nameStartsWith, nameLessThan: nameLessThan, hasQueryLimit: hasQueryLimit, groupBy: groupBy, reportColumns: reportColumns).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets reports based on library items
     - GET /Reports/Items
     - No authentication required
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter minIndexNumber: (query) Optional filter by minimum index number. (optional)
     - parameter minPlayers: (query) Optional filter by minimum number of game players. (optional)
     - parameter maxPlayers: (query) Optional filter by maximum number of game players. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating (optional)
     - parameter isHD: (query) Optional filter by items that are HD or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter airedDuringSeason: (query) Gets all episodes that aired during a season, including specials. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)
     - parameter containers: (query) Optional filter by Container. Allows multiple, comma delimeted. (optional)
     - parameter userId: (query) User Id (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings (optional)
     - parameter collapseBoxSetItems: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimeted. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - parameter hasQueryLimit: (query) Optional. If specified, results will include all records. (optional)
     - parameter groupBy: (query) Optional. If specified, results will include grouped records. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - returns: RequestBuilder<EmbyReportsApiModelReportResult> 
     */
    open class func getReportsItemsWithRequestBuilder(reportView: String, displayType: String, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, minIndexNumber: Int? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHD: Bool? = nil, locationTypes: String? = nil, excludeLocationTypes: String? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, airedDuringSeason: Int? = nil, minPremiereDate: String? = nil, minDateLastSaved: String? = nil, minDateLastSavedForUser: String? = nil, maxPremiereDate: String? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: String? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, sortOrder: String? = nil, parentId: String? = nil, fields: String? = nil, excludeItemTypes: String? = nil, includeItemTypes: String? = nil, filters: String? = nil, isFavorite: Bool? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, mediaTypes: String? = nil, imageTypes: String? = nil, sortBy: String? = nil, isPlayed: Bool? = nil, genres: String? = nil, officialRatings: String? = nil, tags: String? = nil, years: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, person: String? = nil, personIds: String? = nil, personTypes: String? = nil, studios: String? = nil, studioIds: String? = nil, artists: String? = nil, artistIds: String? = nil, albums: String? = nil, ids: String? = nil, videoTypes: String? = nil, containers: String? = nil, userId: String? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, collapseBoxSetItems: Bool? = nil, is3D: Bool? = nil, seriesStatus: String? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, hasQueryLimit: Bool? = nil, groupBy: String? = nil, reportColumns: String? = nil) -> RequestBuilder<EmbyReportsApiModelReportResult> {
        let localVariablePath = "/Reports/Items"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxOfficialRating": (wrappedValue: maxOfficialRating?.encodeToJSON(), isExplode: true),
            "HasThemeSong": (wrappedValue: hasThemeSong?.encodeToJSON(), isExplode: true),
            "HasThemeVideo": (wrappedValue: hasThemeVideo?.encodeToJSON(), isExplode: true),
            "HasSubtitles": (wrappedValue: hasSubtitles?.encodeToJSON(), isExplode: true),
            "HasSpecialFeature": (wrappedValue: hasSpecialFeature?.encodeToJSON(), isExplode: true),
            "HasTrailer": (wrappedValue: hasTrailer?.encodeToJSON(), isExplode: true),
            "AdjacentTo": (wrappedValue: adjacentTo?.encodeToJSON(), isExplode: true),
            "MinIndexNumber": (wrappedValue: minIndexNumber?.encodeToJSON(), isExplode: true),
            "MinPlayers": (wrappedValue: minPlayers?.encodeToJSON(), isExplode: true),
            "MaxPlayers": (wrappedValue: maxPlayers?.encodeToJSON(), isExplode: true),
            "ParentIndexNumber": (wrappedValue: parentIndexNumber?.encodeToJSON(), isExplode: true),
            "HasParentalRating": (wrappedValue: hasParentalRating?.encodeToJSON(), isExplode: true),
            "IsHD": (wrappedValue: isHD?.encodeToJSON(), isExplode: true),
            "LocationTypes": (wrappedValue: locationTypes?.encodeToJSON(), isExplode: true),
            "ExcludeLocationTypes": (wrappedValue: excludeLocationTypes?.encodeToJSON(), isExplode: true),
            "IsMissing": (wrappedValue: isMissing?.encodeToJSON(), isExplode: true),
            "IsUnaired": (wrappedValue: isUnaired?.encodeToJSON(), isExplode: true),
            "MinCommunityRating": (wrappedValue: minCommunityRating?.encodeToJSON(), isExplode: true),
            "MinCriticRating": (wrappedValue: minCriticRating?.encodeToJSON(), isExplode: true),
            "AiredDuringSeason": (wrappedValue: airedDuringSeason?.encodeToJSON(), isExplode: true),
            "MinPremiereDate": (wrappedValue: minPremiereDate?.encodeToJSON(), isExplode: true),
            "MinDateLastSaved": (wrappedValue: minDateLastSaved?.encodeToJSON(), isExplode: true),
            "MinDateLastSavedForUser": (wrappedValue: minDateLastSavedForUser?.encodeToJSON(), isExplode: true),
            "MaxPremiereDate": (wrappedValue: maxPremiereDate?.encodeToJSON(), isExplode: true),
            "HasOverview": (wrappedValue: hasOverview?.encodeToJSON(), isExplode: true),
            "HasImdbId": (wrappedValue: hasImdbId?.encodeToJSON(), isExplode: true),
            "HasTmdbId": (wrappedValue: hasTmdbId?.encodeToJSON(), isExplode: true),
            "HasTvdbId": (wrappedValue: hasTvdbId?.encodeToJSON(), isExplode: true),
            "ExcludeItemIds": (wrappedValue: excludeItemIds?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "Recursive": (wrappedValue: recursive?.encodeToJSON(), isExplode: true),
            "SortOrder": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "ExcludeItemTypes": (wrappedValue: excludeItemTypes?.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
            "Filters": (wrappedValue: filters?.encodeToJSON(), isExplode: true),
            "IsFavorite": (wrappedValue: isFavorite?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
            "MediaTypes": (wrappedValue: mediaTypes?.encodeToJSON(), isExplode: true),
            "ImageTypes": (wrappedValue: imageTypes?.encodeToJSON(), isExplode: true),
            "SortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "IsPlayed": (wrappedValue: isPlayed?.encodeToJSON(), isExplode: true),
            "Genres": (wrappedValue: genres?.encodeToJSON(), isExplode: true),
            "OfficialRatings": (wrappedValue: officialRatings?.encodeToJSON(), isExplode: true),
            "Tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
            "Years": (wrappedValue: years?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "Person": (wrappedValue: person?.encodeToJSON(), isExplode: true),
            "PersonIds": (wrappedValue: personIds?.encodeToJSON(), isExplode: true),
            "PersonTypes": (wrappedValue: personTypes?.encodeToJSON(), isExplode: true),
            "Studios": (wrappedValue: studios?.encodeToJSON(), isExplode: true),
            "StudioIds": (wrappedValue: studioIds?.encodeToJSON(), isExplode: true),
            "Artists": (wrappedValue: artists?.encodeToJSON(), isExplode: true),
            "ArtistIds": (wrappedValue: artistIds?.encodeToJSON(), isExplode: true),
            "Albums": (wrappedValue: albums?.encodeToJSON(), isExplode: true),
            "Ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "VideoTypes": (wrappedValue: videoTypes?.encodeToJSON(), isExplode: true),
            "Containers": (wrappedValue: containers?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "MinOfficialRating": (wrappedValue: minOfficialRating?.encodeToJSON(), isExplode: true),
            "IsLocked": (wrappedValue: isLocked?.encodeToJSON(), isExplode: true),
            "IsPlaceHolder": (wrappedValue: isPlaceHolder?.encodeToJSON(), isExplode: true),
            "HasOfficialRating": (wrappedValue: hasOfficialRating?.encodeToJSON(), isExplode: true),
            "CollapseBoxSetItems": (wrappedValue: collapseBoxSetItems?.encodeToJSON(), isExplode: true),
            "Is3D": (wrappedValue: is3D?.encodeToJSON(), isExplode: true),
            "SeriesStatus": (wrappedValue: seriesStatus?.encodeToJSON(), isExplode: true),
            "NameStartsWithOrGreater": (wrappedValue: nameStartsWithOrGreater?.encodeToJSON(), isExplode: true),
            "NameStartsWith": (wrappedValue: nameStartsWith?.encodeToJSON(), isExplode: true),
            "NameLessThan": (wrappedValue: nameLessThan?.encodeToJSON(), isExplode: true),
            "ReportView": (wrappedValue: reportView.encodeToJSON(), isExplode: true),
            "DisplayType": (wrappedValue: displayType.encodeToJSON(), isExplode: true),
            "HasQueryLimit": (wrappedValue: hasQueryLimit?.encodeToJSON(), isExplode: true),
            "GroupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: true),
            "ReportColumns": (wrappedValue: reportColumns?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EmbyReportsApiModelReportResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Downloads report
     
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter minIndexNumber: (query) Optional filter by minimum index number. (optional)
     - parameter minPlayers: (query) Optional filter by minimum number of game players. (optional)
     - parameter maxPlayers: (query) Optional filter by maximum number of game players. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating (optional)
     - parameter isHD: (query) Optional filter by items that are HD or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter airedDuringSeason: (query) Gets all episodes that aired during a season, including specials. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)
     - parameter containers: (query) Optional filter by Container. Allows multiple, comma delimeted. (optional)
     - parameter userId: (query) User Id (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings (optional)
     - parameter collapseBoxSetItems: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimeted. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - parameter hasQueryLimit: (query) Optional. If specified, results will include all records. (optional)
     - parameter groupBy: (query) Optional. If specified, results will include grouped records. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getReportsItemsDownload(reportView: String, displayType: String, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, minIndexNumber: Int? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHD: Bool? = nil, locationTypes: String? = nil, excludeLocationTypes: String? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, airedDuringSeason: Int? = nil, minPremiereDate: String? = nil, minDateLastSaved: String? = nil, minDateLastSavedForUser: String? = nil, maxPremiereDate: String? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: String? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, sortOrder: String? = nil, parentId: String? = nil, fields: String? = nil, excludeItemTypes: String? = nil, includeItemTypes: String? = nil, filters: String? = nil, isFavorite: Bool? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, mediaTypes: String? = nil, imageTypes: String? = nil, sortBy: String? = nil, isPlayed: Bool? = nil, genres: String? = nil, officialRatings: String? = nil, tags: String? = nil, years: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, person: String? = nil, personIds: String? = nil, personTypes: String? = nil, studios: String? = nil, studioIds: String? = nil, artists: String? = nil, artistIds: String? = nil, albums: String? = nil, ids: String? = nil, videoTypes: String? = nil, containers: String? = nil, userId: String? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, collapseBoxSetItems: Bool? = nil, is3D: Bool? = nil, seriesStatus: String? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, hasQueryLimit: Bool? = nil, groupBy: String? = nil, reportColumns: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getReportsItemsDownloadWithRequestBuilder(reportView: reportView, displayType: displayType, maxOfficialRating: maxOfficialRating, hasThemeSong: hasThemeSong, hasThemeVideo: hasThemeVideo, hasSubtitles: hasSubtitles, hasSpecialFeature: hasSpecialFeature, hasTrailer: hasTrailer, adjacentTo: adjacentTo, minIndexNumber: minIndexNumber, minPlayers: minPlayers, maxPlayers: maxPlayers, parentIndexNumber: parentIndexNumber, hasParentalRating: hasParentalRating, isHD: isHD, locationTypes: locationTypes, excludeLocationTypes: excludeLocationTypes, isMissing: isMissing, isUnaired: isUnaired, minCommunityRating: minCommunityRating, minCriticRating: minCriticRating, airedDuringSeason: airedDuringSeason, minPremiereDate: minPremiereDate, minDateLastSaved: minDateLastSaved, minDateLastSavedForUser: minDateLastSavedForUser, maxPremiereDate: maxPremiereDate, hasOverview: hasOverview, hasImdbId: hasImdbId, hasTmdbId: hasTmdbId, hasTvdbId: hasTvdbId, excludeItemIds: excludeItemIds, startIndex: startIndex, limit: limit, recursive: recursive, sortOrder: sortOrder, parentId: parentId, fields: fields, excludeItemTypes: excludeItemTypes, includeItemTypes: includeItemTypes, filters: filters, isFavorite: isFavorite, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, mediaTypes: mediaTypes, imageTypes: imageTypes, sortBy: sortBy, isPlayed: isPlayed, genres: genres, officialRatings: officialRatings, tags: tags, years: years, enableImages: enableImages, enableUserData: enableUserData, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, person: person, personIds: personIds, personTypes: personTypes, studios: studios, studioIds: studioIds, artists: artists, artistIds: artistIds, albums: albums, ids: ids, videoTypes: videoTypes, containers: containers, userId: userId, minOfficialRating: minOfficialRating, isLocked: isLocked, isPlaceHolder: isPlaceHolder, hasOfficialRating: hasOfficialRating, collapseBoxSetItems: collapseBoxSetItems, is3D: is3D, seriesStatus: seriesStatus, nameStartsWithOrGreater: nameStartsWithOrGreater, nameStartsWith: nameStartsWith, nameLessThan: nameLessThan, hasQueryLimit: hasQueryLimit, groupBy: groupBy, reportColumns: reportColumns).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Downloads report
     - GET /Reports/Items/Download
     - No authentication required
     - parameter reportView: (query) The report view. Values (ReportData, ReportActivities) 
     - parameter displayType: (query) The report display type. Values (None, Screen, Export, ScreenExport) 
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter minIndexNumber: (query) Optional filter by minimum index number. (optional)
     - parameter minPlayers: (query) Optional filter by minimum number of game players. (optional)
     - parameter maxPlayers: (query) Optional filter by maximum number of game players. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating (optional)
     - parameter isHD: (query) Optional filter by items that are HD or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter airedDuringSeason: (query) Gets all episodes that aired during a season, including specials. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)
     - parameter containers: (query) Optional filter by Container. Allows multiple, comma delimeted. (optional)
     - parameter userId: (query) User Id (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings (optional)
     - parameter collapseBoxSetItems: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimeted. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - parameter hasQueryLimit: (query) Optional. If specified, results will include all records. (optional)
     - parameter groupBy: (query) Optional. If specified, results will include grouped records. (optional)
     - parameter reportColumns: (query) Optional. The columns to show. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getReportsItemsDownloadWithRequestBuilder(reportView: String, displayType: String, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, minIndexNumber: Int? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHD: Bool? = nil, locationTypes: String? = nil, excludeLocationTypes: String? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, airedDuringSeason: Int? = nil, minPremiereDate: String? = nil, minDateLastSaved: String? = nil, minDateLastSavedForUser: String? = nil, maxPremiereDate: String? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: String? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, sortOrder: String? = nil, parentId: String? = nil, fields: String? = nil, excludeItemTypes: String? = nil, includeItemTypes: String? = nil, filters: String? = nil, isFavorite: Bool? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, mediaTypes: String? = nil, imageTypes: String? = nil, sortBy: String? = nil, isPlayed: Bool? = nil, genres: String? = nil, officialRatings: String? = nil, tags: String? = nil, years: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, person: String? = nil, personIds: String? = nil, personTypes: String? = nil, studios: String? = nil, studioIds: String? = nil, artists: String? = nil, artistIds: String? = nil, albums: String? = nil, ids: String? = nil, videoTypes: String? = nil, containers: String? = nil, userId: String? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, collapseBoxSetItems: Bool? = nil, is3D: Bool? = nil, seriesStatus: String? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, hasQueryLimit: Bool? = nil, groupBy: String? = nil, reportColumns: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/Reports/Items/Download"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxOfficialRating": (wrappedValue: maxOfficialRating?.encodeToJSON(), isExplode: true),
            "HasThemeSong": (wrappedValue: hasThemeSong?.encodeToJSON(), isExplode: true),
            "HasThemeVideo": (wrappedValue: hasThemeVideo?.encodeToJSON(), isExplode: true),
            "HasSubtitles": (wrappedValue: hasSubtitles?.encodeToJSON(), isExplode: true),
            "HasSpecialFeature": (wrappedValue: hasSpecialFeature?.encodeToJSON(), isExplode: true),
            "HasTrailer": (wrappedValue: hasTrailer?.encodeToJSON(), isExplode: true),
            "AdjacentTo": (wrappedValue: adjacentTo?.encodeToJSON(), isExplode: true),
            "MinIndexNumber": (wrappedValue: minIndexNumber?.encodeToJSON(), isExplode: true),
            "MinPlayers": (wrappedValue: minPlayers?.encodeToJSON(), isExplode: true),
            "MaxPlayers": (wrappedValue: maxPlayers?.encodeToJSON(), isExplode: true),
            "ParentIndexNumber": (wrappedValue: parentIndexNumber?.encodeToJSON(), isExplode: true),
            "HasParentalRating": (wrappedValue: hasParentalRating?.encodeToJSON(), isExplode: true),
            "IsHD": (wrappedValue: isHD?.encodeToJSON(), isExplode: true),
            "LocationTypes": (wrappedValue: locationTypes?.encodeToJSON(), isExplode: true),
            "ExcludeLocationTypes": (wrappedValue: excludeLocationTypes?.encodeToJSON(), isExplode: true),
            "IsMissing": (wrappedValue: isMissing?.encodeToJSON(), isExplode: true),
            "IsUnaired": (wrappedValue: isUnaired?.encodeToJSON(), isExplode: true),
            "MinCommunityRating": (wrappedValue: minCommunityRating?.encodeToJSON(), isExplode: true),
            "MinCriticRating": (wrappedValue: minCriticRating?.encodeToJSON(), isExplode: true),
            "AiredDuringSeason": (wrappedValue: airedDuringSeason?.encodeToJSON(), isExplode: true),
            "MinPremiereDate": (wrappedValue: minPremiereDate?.encodeToJSON(), isExplode: true),
            "MinDateLastSaved": (wrappedValue: minDateLastSaved?.encodeToJSON(), isExplode: true),
            "MinDateLastSavedForUser": (wrappedValue: minDateLastSavedForUser?.encodeToJSON(), isExplode: true),
            "MaxPremiereDate": (wrappedValue: maxPremiereDate?.encodeToJSON(), isExplode: true),
            "HasOverview": (wrappedValue: hasOverview?.encodeToJSON(), isExplode: true),
            "HasImdbId": (wrappedValue: hasImdbId?.encodeToJSON(), isExplode: true),
            "HasTmdbId": (wrappedValue: hasTmdbId?.encodeToJSON(), isExplode: true),
            "HasTvdbId": (wrappedValue: hasTvdbId?.encodeToJSON(), isExplode: true),
            "ExcludeItemIds": (wrappedValue: excludeItemIds?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "Recursive": (wrappedValue: recursive?.encodeToJSON(), isExplode: true),
            "SortOrder": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "ExcludeItemTypes": (wrappedValue: excludeItemTypes?.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
            "Filters": (wrappedValue: filters?.encodeToJSON(), isExplode: true),
            "IsFavorite": (wrappedValue: isFavorite?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
            "MediaTypes": (wrappedValue: mediaTypes?.encodeToJSON(), isExplode: true),
            "ImageTypes": (wrappedValue: imageTypes?.encodeToJSON(), isExplode: true),
            "SortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "IsPlayed": (wrappedValue: isPlayed?.encodeToJSON(), isExplode: true),
            "Genres": (wrappedValue: genres?.encodeToJSON(), isExplode: true),
            "OfficialRatings": (wrappedValue: officialRatings?.encodeToJSON(), isExplode: true),
            "Tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
            "Years": (wrappedValue: years?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "Person": (wrappedValue: person?.encodeToJSON(), isExplode: true),
            "PersonIds": (wrappedValue: personIds?.encodeToJSON(), isExplode: true),
            "PersonTypes": (wrappedValue: personTypes?.encodeToJSON(), isExplode: true),
            "Studios": (wrappedValue: studios?.encodeToJSON(), isExplode: true),
            "StudioIds": (wrappedValue: studioIds?.encodeToJSON(), isExplode: true),
            "Artists": (wrappedValue: artists?.encodeToJSON(), isExplode: true),
            "ArtistIds": (wrappedValue: artistIds?.encodeToJSON(), isExplode: true),
            "Albums": (wrappedValue: albums?.encodeToJSON(), isExplode: true),
            "Ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "VideoTypes": (wrappedValue: videoTypes?.encodeToJSON(), isExplode: true),
            "Containers": (wrappedValue: containers?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "MinOfficialRating": (wrappedValue: minOfficialRating?.encodeToJSON(), isExplode: true),
            "IsLocked": (wrappedValue: isLocked?.encodeToJSON(), isExplode: true),
            "IsPlaceHolder": (wrappedValue: isPlaceHolder?.encodeToJSON(), isExplode: true),
            "HasOfficialRating": (wrappedValue: hasOfficialRating?.encodeToJSON(), isExplode: true),
            "CollapseBoxSetItems": (wrappedValue: collapseBoxSetItems?.encodeToJSON(), isExplode: true),
            "Is3D": (wrappedValue: is3D?.encodeToJSON(), isExplode: true),
            "SeriesStatus": (wrappedValue: seriesStatus?.encodeToJSON(), isExplode: true),
            "NameStartsWithOrGreater": (wrappedValue: nameStartsWithOrGreater?.encodeToJSON(), isExplode: true),
            "NameStartsWith": (wrappedValue: nameStartsWith?.encodeToJSON(), isExplode: true),
            "NameLessThan": (wrappedValue: nameLessThan?.encodeToJSON(), isExplode: true),
            "ReportView": (wrappedValue: reportView.encodeToJSON(), isExplode: true),
            "DisplayType": (wrappedValue: displayType.encodeToJSON(), isExplode: true),
            "HasQueryLimit": (wrappedValue: hasQueryLimit?.encodeToJSON(), isExplode: true),
            "GroupBy": (wrappedValue: groupBy?.encodeToJSON(), isExplode: true),
            "ReportColumns": (wrappedValue: reportColumns?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
