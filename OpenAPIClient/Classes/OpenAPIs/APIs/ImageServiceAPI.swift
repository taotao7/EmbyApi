//
// ImageServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ImageServiceAPI {

    /**
     * enum for parameter type
     */
    public enum ModelType_deleteItemsByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteItemsByIdImagesByType(id: String, type: ModelType_deleteItemsByIdImagesByType, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteItemsByIdImagesByTypeWithRequestBuilder(id: id, type: type, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /Items/{Id}/Images/{Type}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemsByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_deleteItemsByIdImagesByType, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_deleteItemsByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteItemsByIdImagesByTypeByIndex(id: String, type: ModelType_deleteItemsByIdImagesByTypeByIndex, index: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteItemsByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /Items/{Id}/Images/{Type}/{Index}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteItemsByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_deleteItemsByIdImagesByTypeByIndex, index: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_deleteUsersByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUsersByIdImagesByType(id: String, type: ModelType_deleteUsersByIdImagesByType, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUsersByIdImagesByTypeWithRequestBuilder(id: id, type: type, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /Users/{Id}/Images/{Type}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_deleteUsersByIdImagesByType, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_deleteUsersByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteUsersByIdImagesByTypeByIndex(id: String, type: ModelType_deleteUsersByIdImagesByTypeByIndex, index: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteUsersByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /Users/{Id}/Images/{Type}/{Index}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUsersByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_deleteUsersByIdImagesByTypeByIndex, index: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getArtistsByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getArtistsByNameImagesByType(name: String, type: ModelType_getArtistsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getArtistsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Artists/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getArtistsByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_getArtistsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Artists/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getArtistsByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getArtistsByNameImagesByTypeByIndex(name: String, type: ModelType_getArtistsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Artists/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_getArtistsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Artists/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getGamegenresByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGamegenresByNameImagesByType(name: String, type: ModelType_getGamegenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getGamegenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /GameGenres/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getGamegenresByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_getGamegenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/GameGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getGamegenresByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGamegenresByNameImagesByTypeByIndex(name: String, type: ModelType_getGamegenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /GameGenres/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_getGamegenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/GameGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getGenresByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGenresByNameImagesByType(name: String, type: ModelType_getGenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getGenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Genres/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getGenresByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_getGenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Genres/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getGenresByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGenresByNameImagesByTypeByIndex(name: String, type: ModelType_getGenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getGenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Genres/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getGenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_getGenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Genres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets information about an item's images
     
     - parameter id: (path) Item Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsByIdImages(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ImageInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsByIdImagesWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets information about an item's images
     - GET /Items/{Id}/Images
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - returns: RequestBuilder<[ImageInfo]> 
     */
    open class func getItemsByIdImagesWithRequestBuilder(id: String) -> RequestBuilder<[ImageInfo]> {
        var localVariablePath = "/Items/{Id}/Images"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ImageInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getItemsByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsByIdImagesByType(id: String, type: ModelType_getItemsByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsByIdImagesByTypeWithRequestBuilder(id: id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Items/{Id}/Images/{Type}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_getItemsByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getItemsByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsByIdImagesByTypeByIndex(id: String, type: ModelType_getItemsByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Items/{Id}/Images/{Type}/{Index}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_getItemsByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter percentPlayed: (path) Optional percent to render for the percent played overlay 
     - parameter unplayedCount: (path) Optional unplayed count overlay to render 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, percentPlayed: Double, unplayedCount: Int, type: ModelType_getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, addPlayedIndicator: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(id: id, maxWidth: maxWidth, maxHeight: maxHeight, tag: tag, format: format, percentPlayed: percentPlayed, unplayedCount: unplayedCount, type: type, index: index, width: width, height: height, quality: quality, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, addPlayedIndicator: addPlayedIndicator, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter percentPlayed: (path) Optional percent to render for the percent played overlay 
     - parameter unplayedCount: (path) Optional unplayed count overlay to render 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, percentPlayed: Double, unplayedCount: Int, type: ModelType_getItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, addPlayedIndicator: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let maxWidthPreEscape = "\(APIHelper.mapValueToPathItem(maxWidth))"
        let maxWidthPostEscape = maxWidthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{MaxWidth}", with: maxWidthPostEscape, options: .literal, range: nil)
        let maxHeightPreEscape = "\(APIHelper.mapValueToPathItem(maxHeight))"
        let maxHeightPostEscape = maxHeightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{MaxHeight}", with: maxHeightPostEscape, options: .literal, range: nil)
        let tagPreEscape = "\(APIHelper.mapValueToPathItem(tag))"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Tag}", with: tagPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(APIHelper.mapValueToPathItem(format))"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let percentPlayedPreEscape = "\(APIHelper.mapValueToPathItem(percentPlayed))"
        let percentPlayedPostEscape = percentPlayedPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{PercentPlayed}", with: percentPlayedPostEscape, options: .literal, range: nil)
        let unplayedCountPreEscape = "\(APIHelper.mapValueToPathItem(unplayedCount))"
        let unplayedCountPostEscape = unplayedCountPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UnplayedCount}", with: unplayedCountPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getMusicgenresByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMusicgenresByNameImagesByType(name: String, type: ModelType_getMusicgenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getMusicgenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /MusicGenres/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getMusicgenresByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_getMusicgenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/MusicGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getMusicgenresByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMusicgenresByNameImagesByTypeByIndex(name: String, type: ModelType_getMusicgenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /MusicGenres/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_getMusicgenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/MusicGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getPersonsByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPersonsByNameImagesByType(name: String, type: ModelType_getPersonsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getPersonsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Persons/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getPersonsByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_getPersonsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Persons/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getPersonsByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPersonsByNameImagesByTypeByIndex(name: String, type: ModelType_getPersonsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Persons/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_getPersonsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Persons/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getStudiosByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStudiosByNameImagesByType(name: String, type: ModelType_getStudiosByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getStudiosByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Studios/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getStudiosByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_getStudiosByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Studios/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getStudiosByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStudiosByNameImagesByTypeByIndex(name: String, type: ModelType_getStudiosByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Studios/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_getStudiosByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Studios/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getUsersByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsersByIdImagesByType(id: String, type: ModelType_getUsersByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersByIdImagesByTypeWithRequestBuilder(id: id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Users/{Id}/Images/{Type}
     - No authentication required
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Authentication
    url: https://github.com/MediaBrowser/Emby/wiki/User-Authentication
}
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getUsersByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_getUsersByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getUsersByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUsersByIdImagesByTypeByIndex(id: String, type: ModelType_getUsersByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getUsersByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Users/{Id}/Images/{Type}/{Index}
     - No authentication required
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getUsersByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_getUsersByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headArtistsByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headArtistsByNameImagesByType(name: String, type: ModelType_headArtistsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headArtistsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Artists/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headArtistsByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_headArtistsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Artists/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headArtistsByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headArtistsByNameImagesByTypeByIndex(name: String, type: ModelType_headArtistsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Artists/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headArtistsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_headArtistsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Artists/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headGamegenresByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headGamegenresByNameImagesByType(name: String, type: ModelType_headGamegenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headGamegenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /GameGenres/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headGamegenresByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_headGamegenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/GameGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headGamegenresByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headGamegenresByNameImagesByTypeByIndex(name: String, type: ModelType_headGamegenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /GameGenres/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headGamegenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_headGamegenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/GameGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headGenresByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headGenresByNameImagesByType(name: String, type: ModelType_headGenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headGenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Genres/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headGenresByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_headGenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Genres/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headGenresByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headGenresByNameImagesByTypeByIndex(name: String, type: ModelType_headGenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headGenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Genres/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headGenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_headGenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Genres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headItemsByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headItemsByIdImagesByType(id: String, type: ModelType_headItemsByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headItemsByIdImagesByTypeWithRequestBuilder(id: id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Items/{Id}/Images/{Type}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headItemsByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_headItemsByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headItemsByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headItemsByIdImagesByTypeByIndex(id: String, type: ModelType_headItemsByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headItemsByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Items/{Id}/Images/{Type}/{Index}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headItemsByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_headItemsByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter percentPlayed: (path) Optional percent to render for the percent played overlay 
     - parameter unplayedCount: (path) Optional unplayed count overlay to render 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, percentPlayed: Double, unplayedCount: Int, type: ModelType_headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, addPlayedIndicator: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(id: id, maxWidth: maxWidth, maxHeight: maxHeight, tag: tag, format: format, percentPlayed: percentPlayed, unplayedCount: unplayedCount, type: type, index: index, width: width, height: height, quality: quality, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, addPlayedIndicator: addPlayedIndicator, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter maxWidth: (path) The maximum image width to return. 
     - parameter maxHeight: (path) The maximum image height to return. 
     - parameter tag: (path) Optional. Supply the cache tag from the item object to receive strong caching headers. 
     - parameter format: (path) Determines the output foramt of the image - original,gif,jpg,png 
     - parameter percentPlayed: (path) Optional percent to render for the percent played overlay 
     - parameter unplayedCount: (path) Optional unplayed count overlay to render 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcountWithRequestBuilder(id: String, maxWidth: Int, maxHeight: Int, tag: String, format: String, percentPlayed: Double, unplayedCount: Int, type: ModelType_headItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount, index: Int, width: Int? = nil, height: Int? = nil, quality: Int? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, addPlayedIndicator: Bool? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}/{Index}/{Tag}/{Format}/{MaxWidth}/{MaxHeight}/{PercentPlayed}/{UnplayedCount}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let maxWidthPreEscape = "\(APIHelper.mapValueToPathItem(maxWidth))"
        let maxWidthPostEscape = maxWidthPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{MaxWidth}", with: maxWidthPostEscape, options: .literal, range: nil)
        let maxHeightPreEscape = "\(APIHelper.mapValueToPathItem(maxHeight))"
        let maxHeightPostEscape = maxHeightPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{MaxHeight}", with: maxHeightPostEscape, options: .literal, range: nil)
        let tagPreEscape = "\(APIHelper.mapValueToPathItem(tag))"
        let tagPostEscape = tagPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Tag}", with: tagPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(APIHelper.mapValueToPathItem(format))"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let percentPlayedPreEscape = "\(APIHelper.mapValueToPathItem(percentPlayed))"
        let percentPlayedPostEscape = percentPlayedPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{PercentPlayed}", with: percentPlayedPostEscape, options: .literal, range: nil)
        let unplayedCountPreEscape = "\(APIHelper.mapValueToPathItem(unplayedCount))"
        let unplayedCountPostEscape = unplayedCountPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{UnplayedCount}", with: unplayedCountPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headMusicgenresByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headMusicgenresByNameImagesByType(name: String, type: ModelType_headMusicgenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headMusicgenresByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /MusicGenres/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headMusicgenresByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_headMusicgenresByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/MusicGenres/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headMusicgenresByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headMusicgenresByNameImagesByTypeByIndex(name: String, type: ModelType_headMusicgenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /MusicGenres/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headMusicgenresByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_headMusicgenresByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/MusicGenres/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headPersonsByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headPersonsByNameImagesByType(name: String, type: ModelType_headPersonsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headPersonsByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Persons/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headPersonsByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_headPersonsByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Persons/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headPersonsByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headPersonsByNameImagesByTypeByIndex(name: String, type: ModelType_headPersonsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Persons/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headPersonsByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_headPersonsByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Persons/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headStudiosByNameImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headStudiosByNameImagesByType(name: String, type: ModelType_headStudiosByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headStudiosByNameImagesByTypeWithRequestBuilder(name: name, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Studios/{Name}/Images/{Type}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headStudiosByNameImagesByTypeWithRequestBuilder(name: String, type: ModelType_headStudiosByNameImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Studios/{Name}/Images/{Type}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headStudiosByNameImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headStudiosByNameImagesByTypeByIndex(name: String, type: ModelType_headStudiosByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: name, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Studios/{Name}/Images/{Type}/{Index}
     - No authentication required
     - parameter name: (path) Item name 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headStudiosByNameImagesByTypeByIndexWithRequestBuilder(name: String, type: ModelType_headStudiosByNameImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Studios/{Name}/Images/{Type}/{Index}"
        let namePreEscape = "\(APIHelper.mapValueToPathItem(name))"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Name}", with: namePostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headUsersByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headUsersByIdImagesByType(id: String, type: ModelType_headUsersByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headUsersByIdImagesByTypeWithRequestBuilder(id: id, type: type, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Users/{Id}/Images/{Type}
     - No authentication required
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headUsersByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_headUsersByIdImagesByType, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_headUsersByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headUsersByIdImagesByTypeByIndex(id: String, type: ModelType_headUsersByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headUsersByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index, maxWidth: maxWidth, maxHeight: maxHeight, width: width, height: height, quality: quality, tag: tag, cropWhitespace: cropWhitespace, enableImageEnhancers: enableImageEnhancers, format: format, addPlayedIndicator: addPlayedIndicator, percentPlayed: percentPlayed, unplayedCount: unplayedCount, backgroundColor: backgroundColor, foregroundLayer: foregroundLayer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /Users/{Id}/Images/{Type}/{Index}
     - No authentication required
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter maxWidth: (query) The maximum image width to return. (optional)
     - parameter maxHeight: (query) The maximum image height to return. (optional)
     - parameter width: (query) The fixed image width to return. (optional)
     - parameter height: (query) The fixed image height to return. (optional)
     - parameter quality: (query) Optional quality setting, from 0-100. Defaults to 90 and should suffice in most cases. (optional)
     - parameter tag: (query) Optional. Supply the cache tag from the item object to receive strong caching headers. (optional)
     - parameter cropWhitespace: (query) Specify if whitespace should be cropped out of the image. True/False. If unspecified, whitespace will be cropped from logos and clear art. (optional)
     - parameter enableImageEnhancers: (query) Enable or disable image enhancers such as cover art. (optional)
     - parameter format: (query) Determines the output foramt of the image - original,gif,jpg,png (optional)
     - parameter addPlayedIndicator: (query) Optional. Add a played indicator (optional)
     - parameter percentPlayed: (query) Optional percent to render for the percent played overlay (optional)
     - parameter unplayedCount: (query) Optional unplayed count overlay to render (optional)
     - parameter backgroundColor: (query) Optional. Apply a background color for transparent images. (optional)
     - parameter foregroundLayer: (query) Optional. Apply a foreground layer on top of the image. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func headUsersByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_headUsersByIdImagesByTypeByIndex, index: Int, maxWidth: Int? = nil, maxHeight: Int? = nil, width: Int? = nil, height: Int? = nil, quality: Int? = nil, tag: String? = nil, cropWhitespace: Bool? = nil, enableImageEnhancers: Bool? = nil, format: String? = nil, addPlayedIndicator: Bool? = nil, percentPlayed: Double? = nil, unplayedCount: Int? = nil, backgroundColor: String? = nil, foregroundLayer: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "MaxWidth": (wrappedValue: maxWidth?.encodeToJSON(), isExplode: true),
            "MaxHeight": (wrappedValue: maxHeight?.encodeToJSON(), isExplode: true),
            "Width": (wrappedValue: width?.encodeToJSON(), isExplode: true),
            "Height": (wrappedValue: height?.encodeToJSON(), isExplode: true),
            "Quality": (wrappedValue: quality?.encodeToJSON(), isExplode: true),
            "Tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "CropWhitespace": (wrappedValue: cropWhitespace?.encodeToJSON(), isExplode: true),
            "EnableImageEnhancers": (wrappedValue: enableImageEnhancers?.encodeToJSON(), isExplode: true),
            "Format": (wrappedValue: format?.encodeToJSON(), isExplode: true),
            "AddPlayedIndicator": (wrappedValue: addPlayedIndicator?.encodeToJSON(), isExplode: true),
            "PercentPlayed": (wrappedValue: percentPlayed?.encodeToJSON(), isExplode: true),
            "UnplayedCount": (wrappedValue: unplayedCount?.encodeToJSON(), isExplode: true),
            "BackgroundColor": (wrappedValue: backgroundColor?.encodeToJSON(), isExplode: true),
            "ForegroundLayer": (wrappedValue: foregroundLayer?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_postItemsByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter body: (body) Binary stream 
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsByIdImagesByType(id: String, type: ModelType_postItemsByIdImagesByType, body: URL, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsByIdImagesByTypeWithRequestBuilder(id: id, type: type, body: body, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/{Id}/Images/{Type}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter body: (body) Binary stream 
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_postItemsByIdImagesByType, body: URL, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_postItemsByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter body: (body) Binary stream 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsByIdImagesByTypeByIndex(id: String, type: ModelType_postItemsByIdImagesByTypeByIndex, index: Int, body: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index, body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/{Id}/Images/{Type}/{Index}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter body: (body) Binary stream 
     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_postItemsByIdImagesByTypeByIndex, index: Int, body: URL) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_postItemsByIdImagesByTypeByIndexIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**
     Updates the index for an item image
     
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter newIndex: (query) The new image index 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsByIdImagesByTypeByIndexIndex(id: String, type: ModelType_postItemsByIdImagesByTypeByIndexIndex, index: Int, newIndex: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsByIdImagesByTypeByIndexIndexWithRequestBuilder(id: id, type: type, index: index, newIndex: newIndex).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates the index for an item image
     - POST /Items/{Id}/Images/{Type}/{Index}/Index
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter newIndex: (query) The new image index 
     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdImagesByTypeByIndexIndexWithRequestBuilder(id: String, type: ModelType_postItemsByIdImagesByTypeByIndexIndex, index: Int, newIndex: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/Images/{Type}/{Index}/Index"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "NewIndex": (wrappedValue: newIndex.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_postUsersByIdImagesByType: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter body: (body) Binary stream 
     - parameter index: (query) Image Index (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postUsersByIdImagesByType(id: String, type: ModelType_postUsersByIdImagesByType, body: URL, index: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postUsersByIdImagesByTypeWithRequestBuilder(id: id, type: type, body: body, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Users/{Id}/Images/{Type}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter body: (body) Binary stream 
     - parameter index: (query) Image Index (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postUsersByIdImagesByTypeWithRequestBuilder(id: String, type: ModelType_postUsersByIdImagesByType, body: URL, index: Int? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Index": (wrappedValue: index?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_postUsersByIdImagesByTypeByIndex: String, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }

    /**

     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter body: (body) Binary stream 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postUsersByIdImagesByTypeByIndex(id: String, type: ModelType_postUsersByIdImagesByTypeByIndex, index: Int, body: URL, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postUsersByIdImagesByTypeByIndexWithRequestBuilder(id: id, type: type, index: index, body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Users/{Id}/Images/{Type}/{Index}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) User Id 
     - parameter type: (path) Image Type 
     - parameter index: (path) Image Index 
     - parameter body: (body) Binary stream 
     - returns: RequestBuilder<Void> 
     */
    open class func postUsersByIdImagesByTypeByIndexWithRequestBuilder(id: String, type: ModelType_postUsersByIdImagesByTypeByIndex, index: Int, body: URL) -> RequestBuilder<Void> {
        var localVariablePath = "/Users/{Id}/Images/{Type}/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Type}", with: typePostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = ["body": body]

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/octet-stream",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
