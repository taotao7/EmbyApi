//
// SubtitleServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SubtitleServiceAPI {

    /**
     Deletes an external subtitle file
     
     - parameter id: (path) Item Id 
     - parameter index: (path) The subtitle stream index 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteVideosByIdSubtitlesByIndex(id: String, index: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteVideosByIdSubtitlesByIndexWithRequestBuilder(id: id, index: index).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes an external subtitle file
     - DELETE /Videos/{Id}/Subtitles/{Index}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter index: (path) The subtitle stream index 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteVideosByIdSubtitlesByIndexWithRequestBuilder(id: String, index: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/Videos/{Id}/Subtitles/{Index}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) Item Id 
     - parameter language: (path) Language 
     - parameter isPerfectMatch: (query) IsPerfectMatch (optional)
     - parameter isForced: (query) IsForced (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsByIdRemotesearchSubtitlesByLanguage(id: String, language: String, isPerfectMatch: Bool? = nil, isForced: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSubtitleInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsByIdRemotesearchSubtitlesByLanguageWithRequestBuilder(id: id, language: language, isPerfectMatch: isPerfectMatch, isForced: isForced).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Items/{Id}/RemoteSearch/Subtitles/{Language}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter language: (path) Language 
     - parameter isPerfectMatch: (query) IsPerfectMatch (optional)
     - parameter isForced: (query) IsForced (optional)
     - returns: RequestBuilder<[RemoteSubtitleInfo]> 
     */
    open class func getItemsByIdRemotesearchSubtitlesByLanguageWithRequestBuilder(id: String, language: String, isPerfectMatch: Bool? = nil, isForced: Bool? = nil) -> RequestBuilder<[RemoteSubtitleInfo]> {
        var localVariablePath = "/Items/{Id}/RemoteSearch/Subtitles/{Language}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let languagePreEscape = "\(APIHelper.mapValueToPathItem(language))"
        let languagePostEscape = languagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Language}", with: languagePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "IsPerfectMatch": (wrappedValue: isPerfectMatch?.encodeToJSON(), isExplode: true),
            "IsForced": (wrappedValue: isForced?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSubtitleInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) Item Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProvidersSubtitlesSubtitlesById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getProvidersSubtitlesSubtitlesByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /Providers/Subtitles/Subtitles/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - returns: RequestBuilder<Void> 
     */
    open class func getProvidersSubtitlesSubtitlesByIdWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Providers/Subtitles/Subtitles/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets subtitles in a specified format.
     
     - parameter id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (query) StartPositionTicks (optional)
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVideosByIdByMediasourceidSubtitlesByIndexByFormat(id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64? = nil, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getVideosByIdByMediasourceidSubtitlesByIndexByFormatWithRequestBuilder(id: id, mediaSourceId: mediaSourceId, index: index, format: format, startPositionTicks: startPositionTicks, endPositionTicks: endPositionTicks, copyTimestamps: copyTimestamps).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets subtitles in a specified format.
     - GET /Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (query) StartPositionTicks (optional)
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getVideosByIdByMediasourceidSubtitlesByIndexByFormatWithRequestBuilder(id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64? = nil, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let mediaSourceIdPreEscape = "\(APIHelper.mapValueToPathItem(mediaSourceId))"
        let mediaSourceIdPostEscape = mediaSourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{MediaSourceId}", with: mediaSourceIdPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(APIHelper.mapValueToPathItem(format))"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "StartPositionTicks": (wrappedValue: startPositionTicks?.encodeToJSON(), isExplode: true),
            "EndPositionTicks": (wrappedValue: endPositionTicks?.encodeToJSON(), isExplode: true),
            "CopyTimestamps": (wrappedValue: copyTimestamps?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets subtitles in a specified format.
     
     - parameter id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (path) StartPositionTicks 
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormat(id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatWithRequestBuilder(id: id, mediaSourceId: mediaSourceId, index: index, format: format, startPositionTicks: startPositionTicks, endPositionTicks: endPositionTicks, copyTimestamps: copyTimestamps).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets subtitles in a specified format.
     - GET /Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}
     - No authentication required
     - parameter id: (path) Item Id 
     - parameter mediaSourceId: (path) MediaSourceId 
     - parameter index: (path) The subtitle stream index 
     - parameter format: (path) Format 
     - parameter startPositionTicks: (path) StartPositionTicks 
     - parameter endPositionTicks: (query) EndPositionTicks (optional)
     - parameter copyTimestamps: (query) CopyTimestamps (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksByFormatWithRequestBuilder(id: String, mediaSourceId: String, index: Int, format: String, startPositionTicks: Int64, endPositionTicks: Int64? = nil, copyTimestamps: Bool? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let mediaSourceIdPreEscape = "\(APIHelper.mapValueToPathItem(mediaSourceId))"
        let mediaSourceIdPostEscape = mediaSourceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{MediaSourceId}", with: mediaSourceIdPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(APIHelper.mapValueToPathItem(index))"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Index}", with: indexPostEscape, options: .literal, range: nil)
        let formatPreEscape = "\(APIHelper.mapValueToPathItem(format))"
        let formatPostEscape = formatPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Format}", with: formatPostEscape, options: .literal, range: nil)
        let startPositionTicksPreEscape = "\(APIHelper.mapValueToPathItem(startPositionTicks))"
        let startPositionTicksPostEscape = startPositionTicksPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{StartPositionTicks}", with: startPositionTicksPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "EndPositionTicks": (wrappedValue: endPositionTicks?.encodeToJSON(), isExplode: true),
            "CopyTimestamps": (wrappedValue: copyTimestamps?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter id: (path) Item Id 
     - parameter subtitleId: (path) SubtitleId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsByIdRemotesearchSubtitlesBySubtitleid(id: String, subtitleId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsByIdRemotesearchSubtitlesBySubtitleidWithRequestBuilder(id: id, subtitleId: subtitleId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter subtitleId: (path) SubtitleId 
     - returns: RequestBuilder<Void> 
     */
    open class func postItemsByIdRemotesearchSubtitlesBySubtitleidWithRequestBuilder(id: String, subtitleId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let subtitleIdPreEscape = "\(APIHelper.mapValueToPathItem(subtitleId))"
        let subtitleIdPostEscape = subtitleIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{SubtitleId}", with: subtitleIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
