//
// LiveTvServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LiveTvServiceAPI {

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLivetvChannelmappings(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLivetvChannelmappingsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLivetvChannelmappingsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a listing provider
     
     - parameter id: (query) Provider id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLivetvListingproviders(id: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLivetvListingprovidersWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a listing provider
     - DELETE /LiveTv/ListingProviders
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (query) Provider id (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLivetvListingprovidersWithRequestBuilder(id: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ListingProviders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a live tv recording
     
     - parameter id: (path) Recording Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLivetvRecordingsById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLivetvRecordingsByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a live tv recording
     - DELETE /LiveTv/Recordings/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Recording Id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLivetvRecordingsByIdWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/Recordings/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancels a live tv series timer
     
     - parameter id: (path) Timer Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLivetvSeriestimersById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLivetvSeriestimersByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancels a live tv series timer
     - DELETE /LiveTv/SeriesTimers/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Timer Id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLivetvSeriestimersByIdWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/SeriesTimers/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Cancels a live tv timer
     
     - parameter id: (path) Timer Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLivetvTimersById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLivetvTimersByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancels a live tv timer
     - DELETE /LiveTv/Timers/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Timer Id 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLivetvTimersByIdWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/Timers/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a tuner host
     
     - parameter id: (query) Tuner host id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteLivetvTunerhosts(id: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteLivetvTunerhostsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deletes a tuner host
     - DELETE /LiveTv/TunerHosts
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (query) Tuner host id (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func deleteLivetvTunerhostsWithRequestBuilder(id: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/TunerHosts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func getLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvChannelmappings(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvChannelmappingsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func getLivetvChannelmappingsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getLivetvChannels: String, CaseIterable {
        case tv = "TV"
        case radio = "Radio"
    }

    /**
     Gets available live tv channels.
     
     - parameter type: (query) Optional filter by channel type. (optional)
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter isFavorite: (query) Filter by channels that are favorites, or not. (optional)
     - parameter isLiked: (query) Filter by channels that are liked, or not. (optional)
     - parameter isDisliked: (query) Filter by channels that are disliked, or not. (optional)
     - parameter enableFavoriteSorting: (query) Incorporate favorite and like status into channel sorting. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter addCurrentProgram: (query) Optional. Adds current program info to each channel (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvChannels(type: ModelType_getLivetvChannels? = nil, userId: String? = nil, startIndex: Int? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, limit: Int? = nil, isFavorite: Bool? = nil, isLiked: Bool? = nil, isDisliked: Bool? = nil, enableFavoriteSorting: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, fields: String? = nil, addCurrentProgram: Bool? = nil, enableUserData: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvChannelsWithRequestBuilder(type: type, userId: userId, startIndex: startIndex, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, limit: limit, isFavorite: isFavorite, isLiked: isLiked, isDisliked: isDisliked, enableFavoriteSorting: enableFavoriteSorting, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, fields: fields, addCurrentProgram: addCurrentProgram, enableUserData: enableUserData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available live tv channels.
     - GET /LiveTv/Channels
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter type: (query) Optional filter by channel type. (optional)
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter isFavorite: (query) Filter by channels that are favorites, or not. (optional)
     - parameter isLiked: (query) Filter by channels that are liked, or not. (optional)
     - parameter isDisliked: (query) Filter by channels that are disliked, or not. (optional)
     - parameter enableFavoriteSorting: (query) Incorporate favorite and like status into channel sorting. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter addCurrentProgram: (query) Optional. Adds current program info to each channel (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getLivetvChannelsWithRequestBuilder(type: ModelType_getLivetvChannels? = nil, userId: String? = nil, startIndex: Int? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, limit: Int? = nil, isFavorite: Bool? = nil, isLiked: Bool? = nil, isDisliked: Bool? = nil, enableFavoriteSorting: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, fields: String? = nil, addCurrentProgram: Bool? = nil, enableUserData: Bool? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/LiveTv/Channels"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "IsFavorite": (wrappedValue: isFavorite?.encodeToJSON(), isExplode: true),
            "IsLiked": (wrappedValue: isLiked?.encodeToJSON(), isExplode: true),
            "IsDisliked": (wrappedValue: isDisliked?.encodeToJSON(), isExplode: true),
            "EnableFavoriteSorting": (wrappedValue: enableFavoriteSorting?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "AddCurrentProgram": (wrappedValue: addCurrentProgram?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a live tv channel
     
     - parameter id: (path) Channel Id 
     - parameter userId: (query) Optional attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvChannelsById(id: String, userId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvChannelsByIdWithRequestBuilder(id: id, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a live tv channel
     - GET /LiveTv/Channels/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter id: (path) Channel Id 
     - parameter userId: (query) Optional attach user data. (optional)
     - returns: RequestBuilder<BaseItemDto> 
     */
    open class func getLivetvChannelsByIdWithRequestBuilder(id: String, userId: String? = nil) -> RequestBuilder<BaseItemDto> {
        var localVariablePath = "/LiveTv/Channels/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets guide info
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvGuideinfo(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvGuideInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvGuideinfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets guide info
     - GET /LiveTv/GuideInfo
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<LiveTvGuideInfo> 
     */
    open class func getLivetvGuideinfoWithRequestBuilder() -> RequestBuilder<LiveTvGuideInfo> {
        let localVariablePath = "/LiveTv/GuideInfo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvGuideInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets available live tv services.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvInfo(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvLiveTvInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvInfoWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available live tv services.
     - GET /LiveTv/Info
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<LiveTvLiveTvInfo> 
     */
    open class func getLivetvInfoWithRequestBuilder() -> RequestBuilder<LiveTvLiveTvInfo> {
        let localVariablePath = "/LiveTv/Info"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvLiveTvInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets current listing providers
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvListingproviders(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LiveTvListingsProviderInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvListingprovidersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets current listing providers
     - GET /LiveTv/ListingProviders
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<[LiveTvListingsProviderInfo]> 
     */
    open class func getLivetvListingprovidersWithRequestBuilder() -> RequestBuilder<[LiveTvListingsProviderInfo]> {
        let localVariablePath = "/LiveTv/ListingProviders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LiveTvListingsProviderInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets listing provider
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvListingprovidersAvailable(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LiveTvListingProviderTypeInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvListingprovidersAvailableWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets listing provider
     - GET /LiveTv/ListingProviders/Available
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<[LiveTvListingProviderTypeInfo]> 
     */
    open class func getLivetvListingprovidersAvailableWithRequestBuilder() -> RequestBuilder<[LiveTvListingProviderTypeInfo]> {
        let localVariablePath = "/LiveTv/ListingProviders/Available"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LiveTvListingProviderTypeInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvListingprovidersDefault(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvListingsProviderInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvListingprovidersDefaultWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /LiveTv/ListingProviders/Default
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<LiveTvListingsProviderInfo> 
     */
    open class func getLivetvListingprovidersDefaultWithRequestBuilder() -> RequestBuilder<LiveTvListingsProviderInfo> {
        let localVariablePath = "/LiveTv/ListingProviders/Default"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvListingsProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets available lineups
     
     - parameter id: (query) Provider id (optional)
     - parameter type: (query) Provider Type (optional)
     - parameter location: (query) Location (optional)
     - parameter country: (query) Country (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvListingprovidersLineups(id: String? = nil, type: String? = nil, location: String? = nil, country: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [NameIdPair]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvListingprovidersLineupsWithRequestBuilder(id: id, type: type, location: location, country: country).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available lineups
     - GET /LiveTv/ListingProviders/Lineups
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (query) Provider id (optional)
     - parameter type: (query) Provider Type (optional)
     - parameter location: (query) Location (optional)
     - parameter country: (query) Country (optional)
     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getLivetvListingprovidersLineupsWithRequestBuilder(id: String? = nil, type: String? = nil, location: String? = nil, country: String? = nil) -> RequestBuilder<[NameIdPair]> {
        let localVariablePath = "/LiveTv/ListingProviders/Lineups"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "Type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "Location": (wrappedValue: location?.encodeToJSON(), isExplode: true),
            "Country": (wrappedValue: country?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NameIdPair]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets available lineups
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvListingprovidersSchedulesdirectCountries(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvListingprovidersSchedulesdirectCountriesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available lineups
     - GET /LiveTv/ListingProviders/SchedulesDirect/Countries
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<Void> 
     */
    open class func getLivetvListingprovidersSchedulesdirectCountriesWithRequestBuilder() -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ListingProviders/SchedulesDirect/Countries"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a live tv channel
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvLiverecordingsByIdStream(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvLiverecordingsByIdStreamWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a live tv channel
     - GET /LiveTv/LiveRecordings/{Id}/stream
     - No authentication required
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getLivetvLiverecordingsByIdStreamWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/LiveRecordings/{Id}/stream"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets a live tv channel
     
     - parameter id: (path)  
     - parameter container: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvLivestreamfilesByIdByContainer(id: String, container: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvLivestreamfilesByIdByContainerWithRequestBuilder(id: id, container: container).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a live tv channel
     - GET /LiveTv/LiveStreamFiles/{Id}/stream.{Container}
     - No authentication required
     - parameter id: (path)  
     - parameter container: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getLivetvLivestreamfilesByIdByContainerWithRequestBuilder(id: String, container: String) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/LiveStreamFiles/{Id}/stream.{Container}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let containerPreEscape = "\(APIHelper.mapValueToPathItem(container))"
        let containerPostEscape = containerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Container}", with: containerPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Gets available live tv epgs..
     
     - parameter channelIds: (query) The channels to return guide information for. (optional)
     - parameter userId: (query) Optional filter by user id. (optional)
     - parameter minStartDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter maxStartDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter minEndDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxEndDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Name, StartDate (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvPrograms(channelIds: String? = nil, userId: String? = nil, minStartDate: String? = nil, hasAired: Bool? = nil, maxStartDate: String? = nil, minEndDate: String? = nil, maxEndDate: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, genreIds: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil, fields: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvProgramsWithRequestBuilder(channelIds: channelIds, userId: userId, minStartDate: minStartDate, hasAired: hasAired, maxStartDate: maxStartDate, minEndDate: minEndDate, maxEndDate: maxEndDate, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, startIndex: startIndex, limit: limit, sortBy: sortBy, sortOrder: sortOrder, genreIds: genreIds, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, enableUserData: enableUserData, fields: fields).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available live tv epgs..
     - GET /LiveTv/Programs
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter channelIds: (query) The channels to return guide information for. (optional)
     - parameter userId: (query) Optional filter by user id. (optional)
     - parameter minStartDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter maxStartDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter minEndDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxEndDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Name, StartDate (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getLivetvProgramsWithRequestBuilder(channelIds: String? = nil, userId: String? = nil, minStartDate: String? = nil, hasAired: Bool? = nil, maxStartDate: String? = nil, minEndDate: String? = nil, maxEndDate: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, startIndex: Int? = nil, limit: Int? = nil, sortBy: String? = nil, sortOrder: String? = nil, genreIds: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, enableUserData: Bool? = nil, fields: String? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/LiveTv/Programs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChannelIds": (wrappedValue: channelIds?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "MinStartDate": (wrappedValue: minStartDate?.encodeToJSON(), isExplode: true),
            "HasAired": (wrappedValue: hasAired?.encodeToJSON(), isExplode: true),
            "MaxStartDate": (wrappedValue: maxStartDate?.encodeToJSON(), isExplode: true),
            "MinEndDate": (wrappedValue: minEndDate?.encodeToJSON(), isExplode: true),
            "MaxEndDate": (wrappedValue: maxEndDate?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "SortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "SortOrder": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "GenreIds": (wrappedValue: genreIds?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets available live tv epgs..
     
     - parameter userId: (query) Optional filter by user id. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter isAiring: (query) Optional. Filter by programs that are currently airing, or not. (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvProgramsRecommended(userId: String? = nil, limit: Int? = nil, isAiring: Bool? = nil, hasAired: Bool? = nil, isSeries: Bool? = nil, isMovie: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, genreIds: String? = nil, fields: String? = nil, enableUserData: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvProgramsRecommendedWithRequestBuilder(userId: userId, limit: limit, isAiring: isAiring, hasAired: hasAired, isSeries: isSeries, isMovie: isMovie, isNews: isNews, isKids: isKids, isSports: isSports, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, genreIds: genreIds, fields: fields, enableUserData: enableUserData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available live tv epgs..
     - GET /LiveTv/Programs/Recommended
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (query) Optional filter by user id. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter isAiring: (query) Optional. Filter by programs that are currently airing, or not. (optional)
     - parameter hasAired: (query) Optional. Filter by programs that have completed airing, or not. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getLivetvProgramsRecommendedWithRequestBuilder(userId: String? = nil, limit: Int? = nil, isAiring: Bool? = nil, hasAired: Bool? = nil, isSeries: Bool? = nil, isMovie: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, genreIds: String? = nil, fields: String? = nil, enableUserData: Bool? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/LiveTv/Programs/Recommended"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "IsAiring": (wrappedValue: isAiring?.encodeToJSON(), isExplode: true),
            "HasAired": (wrappedValue: hasAired?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "GenreIds": (wrappedValue: genreIds?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter status
     */
    public enum Status_getLivetvRecordings: String, CaseIterable {
        case new = "New"
        case inProgress = "InProgress"
        case completed = "Completed"
        case cancelled = "Cancelled"
        case conflictedOk = "ConflictedOk"
        case conflictedNotOk = "ConflictedNotOk"
        case error = "Error"
    }

    /**
     Gets live tv recordings
     
     - parameter channelId: (query) Optional filter by channel id. (optional)
     - parameter status: (query) Optional filter by recording status. (optional)
     - parameter isInProgress: (query) Optional filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional filter by recordings belonging to a series timer (optional)
     - parameter artistType: (query) Artist or AlbumArtist (optional)
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter minIndexNumber: (query) Optional filter by minimum index number. (optional)
     - parameter minPlayers: (query) Optional filter by minimum number of game players. (optional)
     - parameter maxPlayers: (query) Optional filter by maximum number of game players. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating (optional)
     - parameter isHD: (query) Optional filter by items that are HD or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter airedDuringSeason: (query) Gets all episodes that aired during a season, including specials. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter anyProviderIdEquals: (query) Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#39;prov.id&#39;, e.g. &#39;imdb.tt123456&#39;. This allows multiple, comma delimeted value pairs. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)
     - parameter containers: (query) Optional filter by Container. Allows multiple, comma delimeted. (optional)
     - parameter audioCodecs: (query) Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)
     - parameter videoCodecs: (query) Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)
     - parameter subtitleCodecs: (query) Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)
     - parameter path: (query) Optional filter by Path. (optional)
     - parameter userId: (query) User Id (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings (optional)
     - parameter groupItemsIntoCollections: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimeted. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvRecordings(channelId: String? = nil, status: Status_getLivetvRecordings? = nil, isInProgress: Bool? = nil, seriesTimerId: String? = nil, artistType: String? = nil, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, minIndexNumber: Int? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHD: Bool? = nil, locationTypes: String? = nil, excludeLocationTypes: String? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, airedDuringSeason: Int? = nil, minPremiereDate: String? = nil, minDateLastSaved: String? = nil, minDateLastSavedForUser: String? = nil, maxPremiereDate: String? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: String? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, sortOrder: String? = nil, parentId: String? = nil, fields: String? = nil, excludeItemTypes: String? = nil, includeItemTypes: String? = nil, anyProviderIdEquals: String? = nil, filters: String? = nil, isFavorite: Bool? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, mediaTypes: String? = nil, imageTypes: String? = nil, sortBy: String? = nil, isPlayed: Bool? = nil, genres: String? = nil, officialRatings: String? = nil, tags: String? = nil, years: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, person: String? = nil, personIds: String? = nil, personTypes: String? = nil, studios: String? = nil, studioIds: String? = nil, artists: String? = nil, artistIds: String? = nil, albums: String? = nil, ids: String? = nil, videoTypes: String? = nil, containers: String? = nil, audioCodecs: String? = nil, videoCodecs: String? = nil, subtitleCodecs: String? = nil, path: String? = nil, userId: String? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, groupItemsIntoCollections: Bool? = nil, is3D: Bool? = nil, seriesStatus: String? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvRecordingsWithRequestBuilder(channelId: channelId, status: status, isInProgress: isInProgress, seriesTimerId: seriesTimerId, artistType: artistType, maxOfficialRating: maxOfficialRating, hasThemeSong: hasThemeSong, hasThemeVideo: hasThemeVideo, hasSubtitles: hasSubtitles, hasSpecialFeature: hasSpecialFeature, hasTrailer: hasTrailer, adjacentTo: adjacentTo, minIndexNumber: minIndexNumber, minPlayers: minPlayers, maxPlayers: maxPlayers, parentIndexNumber: parentIndexNumber, hasParentalRating: hasParentalRating, isHD: isHD, locationTypes: locationTypes, excludeLocationTypes: excludeLocationTypes, isMissing: isMissing, isUnaired: isUnaired, minCommunityRating: minCommunityRating, minCriticRating: minCriticRating, airedDuringSeason: airedDuringSeason, minPremiereDate: minPremiereDate, minDateLastSaved: minDateLastSaved, minDateLastSavedForUser: minDateLastSavedForUser, maxPremiereDate: maxPremiereDate, hasOverview: hasOverview, hasImdbId: hasImdbId, hasTmdbId: hasTmdbId, hasTvdbId: hasTvdbId, excludeItemIds: excludeItemIds, startIndex: startIndex, limit: limit, recursive: recursive, sortOrder: sortOrder, parentId: parentId, fields: fields, excludeItemTypes: excludeItemTypes, includeItemTypes: includeItemTypes, anyProviderIdEquals: anyProviderIdEquals, filters: filters, isFavorite: isFavorite, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, mediaTypes: mediaTypes, imageTypes: imageTypes, sortBy: sortBy, isPlayed: isPlayed, genres: genres, officialRatings: officialRatings, tags: tags, years: years, enableImages: enableImages, enableUserData: enableUserData, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, person: person, personIds: personIds, personTypes: personTypes, studios: studios, studioIds: studioIds, artists: artists, artistIds: artistIds, albums: albums, ids: ids, videoTypes: videoTypes, containers: containers, audioCodecs: audioCodecs, videoCodecs: videoCodecs, subtitleCodecs: subtitleCodecs, path: path, userId: userId, minOfficialRating: minOfficialRating, isLocked: isLocked, isPlaceHolder: isPlaceHolder, hasOfficialRating: hasOfficialRating, groupItemsIntoCollections: groupItemsIntoCollections, is3D: is3D, seriesStatus: seriesStatus, nameStartsWithOrGreater: nameStartsWithOrGreater, nameStartsWith: nameStartsWith, nameLessThan: nameLessThan).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets live tv recordings
     - GET /LiveTv/Recordings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter channelId: (query) Optional filter by channel id. (optional)
     - parameter status: (query) Optional filter by recording status. (optional)
     - parameter isInProgress: (query) Optional filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional filter by recordings belonging to a series timer (optional)
     - parameter artistType: (query) Artist or AlbumArtist (optional)
     - parameter maxOfficialRating: (query) Optional filter by maximum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter hasThemeSong: (query) Optional filter by items with theme songs. (optional)
     - parameter hasThemeVideo: (query) Optional filter by items with theme videos. (optional)
     - parameter hasSubtitles: (query) Optional filter by items with subtitles. (optional)
     - parameter hasSpecialFeature: (query) Optional filter by items with special features. (optional)
     - parameter hasTrailer: (query) Optional filter by items with trailers. (optional)
     - parameter adjacentTo: (query) Optional. Return items that are siblings of a supplied item. (optional)
     - parameter minIndexNumber: (query) Optional filter by minimum index number. (optional)
     - parameter minPlayers: (query) Optional filter by minimum number of game players. (optional)
     - parameter maxPlayers: (query) Optional filter by maximum number of game players. (optional)
     - parameter parentIndexNumber: (query) Optional filter by parent index number. (optional)
     - parameter hasParentalRating: (query) Optional filter by items that have or do not have a parental rating (optional)
     - parameter isHD: (query) Optional filter by items that are HD or not. (optional)
     - parameter locationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter excludeLocationTypes: (query) Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimeted. (optional)
     - parameter isMissing: (query) Optional filter by items that are missing episodes or not. (optional)
     - parameter isUnaired: (query) Optional filter by items that are unaired episodes or not. (optional)
     - parameter minCommunityRating: (query) Optional filter by minimum community rating. (optional)
     - parameter minCriticRating: (query) Optional filter by minimum critic rating. (optional)
     - parameter airedDuringSeason: (query) Gets all episodes that aired during a season, including specials. (optional)
     - parameter minPremiereDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSaved: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter minDateLastSavedForUser: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxPremiereDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter hasOverview: (query) Optional filter by items that have an overview or not. (optional)
     - parameter hasImdbId: (query) Optional filter by items that have an imdb id or not. (optional)
     - parameter hasTmdbId: (query) Optional filter by items that have a tmdb id or not. (optional)
     - parameter hasTvdbId: (query) Optional filter by items that have a tvdb id or not. (optional)
     - parameter excludeItemIds: (query) Optional. If specified, results will be filtered by exxcluding item ids. This allows multiple, comma delimeted. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter recursive: (query) When searching within folders, this determines whether or not the search will be recursive. true/false (optional)
     - parameter sortOrder: (query) Sort Order - Ascending,Descending (optional)
     - parameter parentId: (query) Specify this to localize the search to a specific item or folder. Omit to use the root (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter excludeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter includeItemTypes: (query) Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted. (optional)
     - parameter anyProviderIdEquals: (query) Optional. If specified, result will be filtered to contain only items which match at least one of the specified IDs. Each provider ID must be in the form &#39;prov.id&#39;, e.g. &#39;imdb.tt123456&#39;. This allows multiple, comma delimeted value pairs. (optional)
     - parameter filters: (query) Optional. Specify additional filters to apply. This allows multiple, comma delimeted. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes (optional)
     - parameter isFavorite: (query) Optional filter by items that are marked as favorite, or not. (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter mediaTypes: (query) Optional filter by MediaType. Allows multiple, comma delimited. (optional)
     - parameter imageTypes: (query) Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited. (optional)
     - parameter sortBy: (query) Optional. Specify one or more sort orders, comma delimeted. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime (optional)
     - parameter isPlayed: (query) Optional filter by items that are played, or not. (optional)
     - parameter genres: (query) Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimeted. (optional)
     - parameter officialRatings: (query) Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimeted. (optional)
     - parameter tags: (query) Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimeted. (optional)
     - parameter years: (query) Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimeted. (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter person: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personIds: (query) Optional. If specified, results will be filtered to include only those containing the specified person. (optional)
     - parameter personTypes: (query) Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited (optional)
     - parameter studios: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter studioIds: (query) Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimeted. (optional)
     - parameter artists: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter artistIds: (query) Optional. If specified, results will be filtered based on artist. This allows multiple, pipe delimeted. (optional)
     - parameter albums: (query) Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimeted. (optional)
     - parameter ids: (query) Optional. If specific items are needed, specify a list of item id&#39;s to retrieve. This allows multiple, comma delimited. (optional)
     - parameter videoTypes: (query) Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimeted. (optional)
     - parameter containers: (query) Optional filter by Container. Allows multiple, comma delimeted. (optional)
     - parameter audioCodecs: (query) Optional filter by AudioCodec. Allows multiple, comma delimeted. (optional)
     - parameter videoCodecs: (query) Optional filter by VideoCodec. Allows multiple, comma delimeted. (optional)
     - parameter subtitleCodecs: (query) Optional filter by SubtitleCodec. Allows multiple, comma delimeted. (optional)
     - parameter path: (query) Optional filter by Path. (optional)
     - parameter userId: (query) User Id (optional)
     - parameter minOfficialRating: (query) Optional filter by minimum official rating (PG, PG-13, TV-MA, etc). (optional)
     - parameter isLocked: (query) Optional filter by items that are locked. (optional)
     - parameter isPlaceHolder: (query) Optional filter by items that are placeholders (optional)
     - parameter hasOfficialRating: (query) Optional filter by items that have official ratings (optional)
     - parameter groupItemsIntoCollections: (query) Whether or not to hide items behind their boxsets. (optional)
     - parameter is3D: (query) Optional filter by items that are 3D, or not. (optional)
     - parameter seriesStatus: (query) Optional filter by Series Status. Allows multiple, comma delimeted. (optional)
     - parameter nameStartsWithOrGreater: (query) Optional filter by items whose name is sorted equally or greater than a given input string. (optional)
     - parameter nameStartsWith: (query) Optional filter by items whose name is sorted equally than a given input string. (optional)
     - parameter nameLessThan: (query) Optional filter by items whose name is equally or lesser than a given input string. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getLivetvRecordingsWithRequestBuilder(channelId: String? = nil, status: Status_getLivetvRecordings? = nil, isInProgress: Bool? = nil, seriesTimerId: String? = nil, artistType: String? = nil, maxOfficialRating: String? = nil, hasThemeSong: Bool? = nil, hasThemeVideo: Bool? = nil, hasSubtitles: Bool? = nil, hasSpecialFeature: Bool? = nil, hasTrailer: Bool? = nil, adjacentTo: String? = nil, minIndexNumber: Int? = nil, minPlayers: Int? = nil, maxPlayers: Int? = nil, parentIndexNumber: Int? = nil, hasParentalRating: Bool? = nil, isHD: Bool? = nil, locationTypes: String? = nil, excludeLocationTypes: String? = nil, isMissing: Bool? = nil, isUnaired: Bool? = nil, minCommunityRating: Double? = nil, minCriticRating: Double? = nil, airedDuringSeason: Int? = nil, minPremiereDate: String? = nil, minDateLastSaved: String? = nil, minDateLastSavedForUser: String? = nil, maxPremiereDate: String? = nil, hasOverview: Bool? = nil, hasImdbId: Bool? = nil, hasTmdbId: Bool? = nil, hasTvdbId: Bool? = nil, excludeItemIds: String? = nil, startIndex: Int? = nil, limit: Int? = nil, recursive: Bool? = nil, sortOrder: String? = nil, parentId: String? = nil, fields: String? = nil, excludeItemTypes: String? = nil, includeItemTypes: String? = nil, anyProviderIdEquals: String? = nil, filters: String? = nil, isFavorite: Bool? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, mediaTypes: String? = nil, imageTypes: String? = nil, sortBy: String? = nil, isPlayed: Bool? = nil, genres: String? = nil, officialRatings: String? = nil, tags: String? = nil, years: String? = nil, enableImages: Bool? = nil, enableUserData: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, person: String? = nil, personIds: String? = nil, personTypes: String? = nil, studios: String? = nil, studioIds: String? = nil, artists: String? = nil, artistIds: String? = nil, albums: String? = nil, ids: String? = nil, videoTypes: String? = nil, containers: String? = nil, audioCodecs: String? = nil, videoCodecs: String? = nil, subtitleCodecs: String? = nil, path: String? = nil, userId: String? = nil, minOfficialRating: String? = nil, isLocked: Bool? = nil, isPlaceHolder: Bool? = nil, hasOfficialRating: Bool? = nil, groupItemsIntoCollections: Bool? = nil, is3D: Bool? = nil, seriesStatus: String? = nil, nameStartsWithOrGreater: String? = nil, nameStartsWith: String? = nil, nameLessThan: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/Recordings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChannelId": (wrappedValue: channelId?.encodeToJSON(), isExplode: true),
            "Status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "IsInProgress": (wrappedValue: isInProgress?.encodeToJSON(), isExplode: true),
            "SeriesTimerId": (wrappedValue: seriesTimerId?.encodeToJSON(), isExplode: true),
            "ArtistType": (wrappedValue: artistType?.encodeToJSON(), isExplode: true),
            "MaxOfficialRating": (wrappedValue: maxOfficialRating?.encodeToJSON(), isExplode: true),
            "HasThemeSong": (wrappedValue: hasThemeSong?.encodeToJSON(), isExplode: true),
            "HasThemeVideo": (wrappedValue: hasThemeVideo?.encodeToJSON(), isExplode: true),
            "HasSubtitles": (wrappedValue: hasSubtitles?.encodeToJSON(), isExplode: true),
            "HasSpecialFeature": (wrappedValue: hasSpecialFeature?.encodeToJSON(), isExplode: true),
            "HasTrailer": (wrappedValue: hasTrailer?.encodeToJSON(), isExplode: true),
            "AdjacentTo": (wrappedValue: adjacentTo?.encodeToJSON(), isExplode: true),
            "MinIndexNumber": (wrappedValue: minIndexNumber?.encodeToJSON(), isExplode: true),
            "MinPlayers": (wrappedValue: minPlayers?.encodeToJSON(), isExplode: true),
            "MaxPlayers": (wrappedValue: maxPlayers?.encodeToJSON(), isExplode: true),
            "ParentIndexNumber": (wrappedValue: parentIndexNumber?.encodeToJSON(), isExplode: true),
            "HasParentalRating": (wrappedValue: hasParentalRating?.encodeToJSON(), isExplode: true),
            "IsHD": (wrappedValue: isHD?.encodeToJSON(), isExplode: true),
            "LocationTypes": (wrappedValue: locationTypes?.encodeToJSON(), isExplode: true),
            "ExcludeLocationTypes": (wrappedValue: excludeLocationTypes?.encodeToJSON(), isExplode: true),
            "IsMissing": (wrappedValue: isMissing?.encodeToJSON(), isExplode: true),
            "IsUnaired": (wrappedValue: isUnaired?.encodeToJSON(), isExplode: true),
            "MinCommunityRating": (wrappedValue: minCommunityRating?.encodeToJSON(), isExplode: true),
            "MinCriticRating": (wrappedValue: minCriticRating?.encodeToJSON(), isExplode: true),
            "AiredDuringSeason": (wrappedValue: airedDuringSeason?.encodeToJSON(), isExplode: true),
            "MinPremiereDate": (wrappedValue: minPremiereDate?.encodeToJSON(), isExplode: true),
            "MinDateLastSaved": (wrappedValue: minDateLastSaved?.encodeToJSON(), isExplode: true),
            "MinDateLastSavedForUser": (wrappedValue: minDateLastSavedForUser?.encodeToJSON(), isExplode: true),
            "MaxPremiereDate": (wrappedValue: maxPremiereDate?.encodeToJSON(), isExplode: true),
            "HasOverview": (wrappedValue: hasOverview?.encodeToJSON(), isExplode: true),
            "HasImdbId": (wrappedValue: hasImdbId?.encodeToJSON(), isExplode: true),
            "HasTmdbId": (wrappedValue: hasTmdbId?.encodeToJSON(), isExplode: true),
            "HasTvdbId": (wrappedValue: hasTvdbId?.encodeToJSON(), isExplode: true),
            "ExcludeItemIds": (wrappedValue: excludeItemIds?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "Recursive": (wrappedValue: recursive?.encodeToJSON(), isExplode: true),
            "SortOrder": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
            "ParentId": (wrappedValue: parentId?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "ExcludeItemTypes": (wrappedValue: excludeItemTypes?.encodeToJSON(), isExplode: true),
            "IncludeItemTypes": (wrappedValue: includeItemTypes?.encodeToJSON(), isExplode: true),
            "AnyProviderIdEquals": (wrappedValue: anyProviderIdEquals?.encodeToJSON(), isExplode: true),
            "Filters": (wrappedValue: filters?.encodeToJSON(), isExplode: true),
            "IsFavorite": (wrappedValue: isFavorite?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
            "MediaTypes": (wrappedValue: mediaTypes?.encodeToJSON(), isExplode: true),
            "ImageTypes": (wrappedValue: imageTypes?.encodeToJSON(), isExplode: true),
            "SortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "IsPlayed": (wrappedValue: isPlayed?.encodeToJSON(), isExplode: true),
            "Genres": (wrappedValue: genres?.encodeToJSON(), isExplode: true),
            "OfficialRatings": (wrappedValue: officialRatings?.encodeToJSON(), isExplode: true),
            "Tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
            "Years": (wrappedValue: years?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "Person": (wrappedValue: person?.encodeToJSON(), isExplode: true),
            "PersonIds": (wrappedValue: personIds?.encodeToJSON(), isExplode: true),
            "PersonTypes": (wrappedValue: personTypes?.encodeToJSON(), isExplode: true),
            "Studios": (wrappedValue: studios?.encodeToJSON(), isExplode: true),
            "StudioIds": (wrappedValue: studioIds?.encodeToJSON(), isExplode: true),
            "Artists": (wrappedValue: artists?.encodeToJSON(), isExplode: true),
            "ArtistIds": (wrappedValue: artistIds?.encodeToJSON(), isExplode: true),
            "Albums": (wrappedValue: albums?.encodeToJSON(), isExplode: true),
            "Ids": (wrappedValue: ids?.encodeToJSON(), isExplode: true),
            "VideoTypes": (wrappedValue: videoTypes?.encodeToJSON(), isExplode: true),
            "Containers": (wrappedValue: containers?.encodeToJSON(), isExplode: true),
            "AudioCodecs": (wrappedValue: audioCodecs?.encodeToJSON(), isExplode: true),
            "VideoCodecs": (wrappedValue: videoCodecs?.encodeToJSON(), isExplode: true),
            "SubtitleCodecs": (wrappedValue: subtitleCodecs?.encodeToJSON(), isExplode: true),
            "Path": (wrappedValue: path?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "MinOfficialRating": (wrappedValue: minOfficialRating?.encodeToJSON(), isExplode: true),
            "IsLocked": (wrappedValue: isLocked?.encodeToJSON(), isExplode: true),
            "IsPlaceHolder": (wrappedValue: isPlaceHolder?.encodeToJSON(), isExplode: true),
            "HasOfficialRating": (wrappedValue: hasOfficialRating?.encodeToJSON(), isExplode: true),
            "GroupItemsIntoCollections": (wrappedValue: groupItemsIntoCollections?.encodeToJSON(), isExplode: true),
            "Is3D": (wrappedValue: is3D?.encodeToJSON(), isExplode: true),
            "SeriesStatus": (wrappedValue: seriesStatus?.encodeToJSON(), isExplode: true),
            "NameStartsWithOrGreater": (wrappedValue: nameStartsWithOrGreater?.encodeToJSON(), isExplode: true),
            "NameStartsWith": (wrappedValue: nameStartsWith?.encodeToJSON(), isExplode: true),
            "NameLessThan": (wrappedValue: nameLessThan?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a live tv recording
     
     - parameter id: (path) Recording Id 
     - parameter userId: (query) Optional attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvRecordingsById(id: String, userId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvRecordingsByIdWithRequestBuilder(id: id, userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a live tv recording
     - GET /LiveTv/Recordings/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter id: (path) Recording Id 
     - parameter userId: (query) Optional attach user data. (optional)
     - returns: RequestBuilder<BaseItemDto> 
     */
    open class func getLivetvRecordingsByIdWithRequestBuilder(id: String, userId: String? = nil) -> RequestBuilder<BaseItemDto> {
        var localVariablePath = "/LiveTv/Recordings/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets recording folders
     
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvRecordingsFolders(userId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [BaseItemDto]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvRecordingsFoldersWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets recording folders
     - GET /LiveTv/Recordings/Folders
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - returns: RequestBuilder<[BaseItemDto]> 
     */
    open class func getLivetvRecordingsFoldersWithRequestBuilder(userId: String? = nil) -> RequestBuilder<[BaseItemDto]> {
        let localVariablePath = "/LiveTv/Recordings/Folders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[BaseItemDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets live tv recording groups
     
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvRecordingsGroups(userId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvRecordingsGroupsWithRequestBuilder(userId: userId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets live tv recording groups
     - GET /LiveTv/Recordings/Groups
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getLivetvRecordingsGroupsWithRequestBuilder(userId: String? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/LiveTv/Recordings/Groups"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a recording group
     
     - parameter id: (path) Recording group Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvRecordingsGroupsById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvRecordingsGroupsByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a recording group
     - GET /LiveTv/Recordings/Groups/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter id: (path) Recording group Id 
     - returns: RequestBuilder<BaseItemDto> 
     */
    open class func getLivetvRecordingsGroupsByIdWithRequestBuilder(id: String) -> RequestBuilder<BaseItemDto> {
        var localVariablePath = "/LiveTv/Recordings/Groups/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter status
     */
    public enum Status_getLivetvRecordingsSeries: String, CaseIterable {
        case new = "New"
        case inProgress = "InProgress"
        case completed = "Completed"
        case cancelled = "Cancelled"
        case conflictedOk = "ConflictedOk"
        case conflictedNotOk = "ConflictedNotOk"
        case error = "Error"
    }

    /**
     Gets live tv recordings
     
     - parameter channelId: (query) Optional filter by channel id. (optional)
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - parameter groupId: (query) Optional filter by recording group. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter status: (query) Optional filter by recording status. (optional)
     - parameter isInProgress: (query) Optional filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional filter by recordings belonging to a series timer (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvRecordingsSeries(channelId: String? = nil, userId: String? = nil, groupId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, status: Status_getLivetvRecordingsSeries? = nil, isInProgress: Bool? = nil, seriesTimerId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, fields: String? = nil, enableUserData: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvRecordingsSeriesWithRequestBuilder(channelId: channelId, userId: userId, groupId: groupId, startIndex: startIndex, limit: limit, status: status, isInProgress: isInProgress, seriesTimerId: seriesTimerId, enableImages: enableImages, imageTypeLimit: imageTypeLimit, enableImageTypes: enableImageTypes, fields: fields, enableUserData: enableUserData).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets live tv recordings
     - GET /LiveTv/Recordings/Series
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter channelId: (query) Optional filter by channel id. (optional)
     - parameter userId: (query) Optional filter by user and attach user data. (optional)
     - parameter groupId: (query) Optional filter by recording group. (optional)
     - parameter startIndex: (query) Optional. The record index to start at. All items with a lower index will be dropped from the results. (optional)
     - parameter limit: (query) Optional. The maximum number of records to return (optional)
     - parameter status: (query) Optional filter by recording status. (optional)
     - parameter isInProgress: (query) Optional filter by recordings that are in progress, or not. (optional)
     - parameter seriesTimerId: (query) Optional filter by recordings belonging to a series timer (optional)
     - parameter enableImages: (query) Optional, include image information in output (optional)
     - parameter imageTypeLimit: (query) Optional, the max number of images to return, per image type (optional)
     - parameter enableImageTypes: (query) Optional. The image types to include in the output. (optional)
     - parameter fields: (query) Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines (optional)
     - parameter enableUserData: (query) Optional, include user data (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func getLivetvRecordingsSeriesWithRequestBuilder(channelId: String? = nil, userId: String? = nil, groupId: String? = nil, startIndex: Int? = nil, limit: Int? = nil, status: Status_getLivetvRecordingsSeries? = nil, isInProgress: Bool? = nil, seriesTimerId: String? = nil, enableImages: Bool? = nil, imageTypeLimit: Int? = nil, enableImageTypes: String? = nil, fields: String? = nil, enableUserData: Bool? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/LiveTv/Recordings/Series"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChannelId": (wrappedValue: channelId?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "GroupId": (wrappedValue: groupId?.encodeToJSON(), isExplode: true),
            "StartIndex": (wrappedValue: startIndex?.encodeToJSON(), isExplode: true),
            "Limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "Status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "IsInProgress": (wrappedValue: isInProgress?.encodeToJSON(), isExplode: true),
            "SeriesTimerId": (wrappedValue: seriesTimerId?.encodeToJSON(), isExplode: true),
            "EnableImages": (wrappedValue: enableImages?.encodeToJSON(), isExplode: true),
            "ImageTypeLimit": (wrappedValue: imageTypeLimit?.encodeToJSON(), isExplode: true),
            "EnableImageTypes": (wrappedValue: enableImageTypes?.encodeToJSON(), isExplode: true),
            "Fields": (wrappedValue: fields?.encodeToJSON(), isExplode: true),
            "EnableUserData": (wrappedValue: enableUserData?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_getLivetvSeriestimers: String, CaseIterable {
        case ascending = "Ascending"
        case descending = "Descending"
    }

    /**
     Gets live tv series timers
     
     - parameter sortBy: (query) Optional. Sort by SortName or Priority (optional)
     - parameter sortOrder: (query) Optional. Sort in Ascending or Descending order (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvSeriestimers(sortBy: String? = nil, sortOrder: SortOrder_getLivetvSeriestimers? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultLiveTvSeriesTimerInfoDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvSeriestimersWithRequestBuilder(sortBy: sortBy, sortOrder: sortOrder).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets live tv series timers
     - GET /LiveTv/SeriesTimers
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter sortBy: (query) Optional. Sort by SortName or Priority (optional)
     - parameter sortOrder: (query) Optional. Sort in Ascending or Descending order (optional)
     - returns: RequestBuilder<QueryResultLiveTvSeriesTimerInfoDto> 
     */
    open class func getLivetvSeriestimersWithRequestBuilder(sortBy: String? = nil, sortOrder: SortOrder_getLivetvSeriestimers? = nil) -> RequestBuilder<QueryResultLiveTvSeriesTimerInfoDto> {
        let localVariablePath = "/LiveTv/SeriesTimers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "SortBy": (wrappedValue: sortBy?.encodeToJSON(), isExplode: true),
            "SortOrder": (wrappedValue: sortOrder?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultLiveTvSeriesTimerInfoDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a live tv series timer
     
     - parameter id: (path) Timer Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvSeriestimersById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvTimerInfoDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvSeriestimersByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a live tv series timer
     - GET /LiveTv/SeriesTimers/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Timer Id 
     - returns: RequestBuilder<LiveTvTimerInfoDto> 
     */
    open class func getLivetvSeriestimersByIdWithRequestBuilder(id: String) -> RequestBuilder<LiveTvTimerInfoDto> {
        var localVariablePath = "/LiveTv/SeriesTimers/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvTimerInfoDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets live tv timers
     
     - parameter channelId: (query) Optional filter by channel id. (optional)
     - parameter seriesTimerId: (query) Optional filter by timers belonging to a series timer (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvTimers(channelId: String? = nil, seriesTimerId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultLiveTvTimerInfoDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvTimersWithRequestBuilder(channelId: channelId, seriesTimerId: seriesTimerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets live tv timers
     - GET /LiveTv/Timers
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter channelId: (query) Optional filter by channel id. (optional)
     - parameter seriesTimerId: (query) Optional filter by timers belonging to a series timer (optional)
     - returns: RequestBuilder<QueryResultLiveTvTimerInfoDto> 
     */
    open class func getLivetvTimersWithRequestBuilder(channelId: String? = nil, seriesTimerId: String? = nil) -> RequestBuilder<QueryResultLiveTvTimerInfoDto> {
        let localVariablePath = "/LiveTv/Timers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChannelId": (wrappedValue: channelId?.encodeToJSON(), isExplode: true),
            "SeriesTimerId": (wrappedValue: seriesTimerId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultLiveTvTimerInfoDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a live tv timer
     
     - parameter id: (path) Timer Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvTimersById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvTimerInfoDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvTimersByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a live tv timer
     - GET /LiveTv/Timers/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Timer Id 
     - returns: RequestBuilder<LiveTvTimerInfoDto> 
     */
    open class func getLivetvTimersByIdWithRequestBuilder(id: String) -> RequestBuilder<LiveTvTimerInfoDto> {
        var localVariablePath = "/LiveTv/Timers/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvTimerInfoDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets default values for a new timer
     
     - parameter programId: (query) Optional, to attach default values based on a program. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvTimersDefaults(programId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvSeriesTimerInfoDto?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvTimersDefaultsWithRequestBuilder(programId: programId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets default values for a new timer
     - GET /LiveTv/Timers/Defaults
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter programId: (query) Optional, to attach default values based on a program. (optional)
     - returns: RequestBuilder<LiveTvSeriesTimerInfoDto> 
     */
    open class func getLivetvTimersDefaultsWithRequestBuilder(programId: String? = nil) -> RequestBuilder<LiveTvSeriesTimerInfoDto> {
        let localVariablePath = "/LiveTv/Timers/Defaults"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProgramId": (wrappedValue: programId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvSeriesTimerInfoDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets tuner hosts
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvTunerhosts(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LiveTvTunerHostInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvTunerhostsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets tuner hosts
     - GET /LiveTv/TunerHosts
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<[LiveTvTunerHostInfo]> 
     */
    open class func getLivetvTunerhostsWithRequestBuilder() -> RequestBuilder<[LiveTvTunerHostInfo]> {
        let localVariablePath = "/LiveTv/TunerHosts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LiveTvTunerHostInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvTunerhostsTypes(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [NameIdPair]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvTunerhostsTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /LiveTv/TunerHosts/Types
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<[NameIdPair]> 
     */
    open class func getLivetvTunerhostsTypesWithRequestBuilder() -> RequestBuilder<[NameIdPair]> {
        let localVariablePath = "/LiveTv/TunerHosts/Types"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[NameIdPair]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLivetvTunersDiscvover(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [LiveTvTunerHostInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLivetvTunersDiscvoverWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /LiveTv/Tuners/Discvover
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - returns: RequestBuilder<[LiveTvTunerHostInfo]> 
     */
    open class func getLivetvTunersDiscvoverWithRequestBuilder() -> RequestBuilder<[LiveTvTunerHostInfo]> {
        let localVariablePath = "/LiveTv/Tuners/Discvover"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LiveTvTunerHostInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func headLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func headLivetvChannelmappings(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return headLivetvChannelmappingsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - HEAD /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func headLivetvChannelmappingsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "HEAD", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func optionsLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return optionsLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - OPTIONS /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func optionsLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "OPTIONS", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func optionsLivetvChannelmappings(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return optionsLivetvChannelmappingsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - OPTIONS /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func optionsLivetvChannelmappingsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "OPTIONS", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return patchLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func patchLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchLivetvChannelmappings(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return patchLivetvChannelmappingsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func patchLivetvChannelmappingsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func postLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter liveTvSetChannelMapping: (body) SetChannelMapping 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvChannelmappings(providerId: String, liveTvSetChannelMapping: LiveTvSetChannelMapping, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvChannelmappingsWithRequestBuilder(providerId: providerId, liveTvSetChannelMapping: liveTvSetChannelMapping).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - parameter liveTvSetChannelMapping: (body) SetChannelMapping 
     - returns: RequestBuilder<Void> 
     */
    open class func postLivetvChannelmappingsWithRequestBuilder(providerId: String, liveTvSetChannelMapping: LiveTvSetChannelMapping) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvSetChannelMapping)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Adds a listing provider
     
     - parameter liveTvListingsProviderInfo: (body) ListingsProviderInfo:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvListingproviders(liveTvListingsProviderInfo: LiveTvListingsProviderInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvListingsProviderInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvListingprovidersWithRequestBuilder(liveTvListingsProviderInfo: liveTvListingsProviderInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds a listing provider
     - POST /LiveTv/ListingProviders
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter liveTvListingsProviderInfo: (body) ListingsProviderInfo:  
     - returns: RequestBuilder<LiveTvListingsProviderInfo> 
     */
    open class func postLivetvListingprovidersWithRequestBuilder(liveTvListingsProviderInfo: LiveTvListingsProviderInfo) -> RequestBuilder<LiveTvListingsProviderInfo> {
        let localVariablePath = "/LiveTv/ListingProviders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvListingsProviderInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvListingsProviderInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets available live tv epgs..
     
     - parameter liveTvGetPrograms: (body) GetPrograms 
     - parameter channelIds: (query) The channels to return guide information for. (optional)
     - parameter userId: (query) Optional filter by user id. (optional)
     - parameter minStartDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxStartDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter minEndDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxEndDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvPrograms(liveTvGetPrograms: LiveTvGetPrograms, channelIds: String? = nil, userId: String? = nil, minStartDate: String? = nil, maxStartDate: String? = nil, minEndDate: String? = nil, maxEndDate: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, genreIds: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QueryResultBaseItemDto?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvProgramsWithRequestBuilder(liveTvGetPrograms: liveTvGetPrograms, channelIds: channelIds, userId: userId, minStartDate: minStartDate, maxStartDate: maxStartDate, minEndDate: minEndDate, maxEndDate: maxEndDate, isMovie: isMovie, isSeries: isSeries, isNews: isNews, isKids: isKids, isSports: isSports, genreIds: genreIds).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets available live tv epgs..
     - POST /LiveTv/Programs
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - externalDocs: class ExternalDocumentation {
    description: API Documentation: Item Information
    url: https://github.com/MediaBrowser/Emby/wiki/Item-Information
}
     - parameter liveTvGetPrograms: (body) GetPrograms 
     - parameter channelIds: (query) The channels to return guide information for. (optional)
     - parameter userId: (query) Optional filter by user id. (optional)
     - parameter minStartDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxStartDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter minEndDate: (query) Optional. The minimum premiere date. Format &#x3D; ISO (optional)
     - parameter maxEndDate: (query) Optional. The maximum premiere date. Format &#x3D; ISO (optional)
     - parameter isMovie: (query) Optional filter for movies. (optional)
     - parameter isSeries: (query) Optional filter for movies. (optional)
     - parameter isNews: (query) Optional filter for news. (optional)
     - parameter isKids: (query) Optional filter for kids. (optional)
     - parameter isSports: (query) Optional filter for sports. (optional)
     - parameter genreIds: (query) The genres to return guide information for. (optional)
     - returns: RequestBuilder<QueryResultBaseItemDto> 
     */
    open class func postLivetvProgramsWithRequestBuilder(liveTvGetPrograms: LiveTvGetPrograms, channelIds: String? = nil, userId: String? = nil, minStartDate: String? = nil, maxStartDate: String? = nil, minEndDate: String? = nil, maxEndDate: String? = nil, isMovie: Bool? = nil, isSeries: Bool? = nil, isNews: Bool? = nil, isKids: Bool? = nil, isSports: Bool? = nil, genreIds: String? = nil) -> RequestBuilder<QueryResultBaseItemDto> {
        let localVariablePath = "/LiveTv/Programs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvGetPrograms)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ChannelIds": (wrappedValue: channelIds?.encodeToJSON(), isExplode: true),
            "UserId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "MinStartDate": (wrappedValue: minStartDate?.encodeToJSON(), isExplode: true),
            "MaxStartDate": (wrappedValue: maxStartDate?.encodeToJSON(), isExplode: true),
            "MinEndDate": (wrappedValue: minEndDate?.encodeToJSON(), isExplode: true),
            "MaxEndDate": (wrappedValue: maxEndDate?.encodeToJSON(), isExplode: true),
            "IsMovie": (wrappedValue: isMovie?.encodeToJSON(), isExplode: true),
            "IsSeries": (wrappedValue: isSeries?.encodeToJSON(), isExplode: true),
            "IsNews": (wrappedValue: isNews?.encodeToJSON(), isExplode: true),
            "IsKids": (wrappedValue: isKids?.encodeToJSON(), isExplode: true),
            "IsSports": (wrappedValue: isSports?.encodeToJSON(), isExplode: true),
            "GenreIds": (wrappedValue: genreIds?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QueryResultBaseItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a live tv series timer
     
     - parameter liveTvSeriesTimerInfoDto: (body) SeriesTimerInfoDto:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvSeriestimers(liveTvSeriesTimerInfoDto: LiveTvSeriesTimerInfoDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvSeriestimersWithRequestBuilder(liveTvSeriesTimerInfoDto: liveTvSeriesTimerInfoDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a live tv series timer
     - POST /LiveTv/SeriesTimers
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter liveTvSeriesTimerInfoDto: (body) SeriesTimerInfoDto:  
     - returns: RequestBuilder<Void> 
     */
    open class func postLivetvSeriestimersWithRequestBuilder(liveTvSeriesTimerInfoDto: LiveTvSeriesTimerInfoDto) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/SeriesTimers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvSeriesTimerInfoDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a live tv series timer
     
     - parameter id: (path)  
     - parameter liveTvSeriesTimerInfoDto: (body) SeriesTimerInfoDto:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvSeriestimersById(id: String, liveTvSeriesTimerInfoDto: LiveTvSeriesTimerInfoDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvSeriestimersByIdWithRequestBuilder(id: id, liveTvSeriesTimerInfoDto: liveTvSeriesTimerInfoDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a live tv series timer
     - POST /LiveTv/SeriesTimers/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path)  
     - parameter liveTvSeriesTimerInfoDto: (body) SeriesTimerInfoDto:  
     - returns: RequestBuilder<Void> 
     */
    open class func postLivetvSeriestimersByIdWithRequestBuilder(id: String, liveTvSeriesTimerInfoDto: LiveTvSeriesTimerInfoDto) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/SeriesTimers/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvSeriesTimerInfoDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a live tv timer
     
     - parameter liveTvTimerInfoDto: (body) TimerInfoDto:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvTimers(liveTvTimerInfoDto: LiveTvTimerInfoDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvTimersWithRequestBuilder(liveTvTimerInfoDto: liveTvTimerInfoDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Creates a live tv timer
     - POST /LiveTv/Timers
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter liveTvTimerInfoDto: (body) TimerInfoDto:  
     - returns: RequestBuilder<Void> 
     */
    open class func postLivetvTimersWithRequestBuilder(liveTvTimerInfoDto: LiveTvTimerInfoDto) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/Timers"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvTimerInfoDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a live tv timer
     
     - parameter id: (path)  
     - parameter liveTvTimerInfoDto: (body) TimerInfoDto:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvTimersById(id: String, liveTvTimerInfoDto: LiveTvTimerInfoDto, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvTimersByIdWithRequestBuilder(id: id, liveTvTimerInfoDto: liveTvTimerInfoDto).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a live tv timer
     - POST /LiveTv/Timers/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path)  
     - parameter liveTvTimerInfoDto: (body) TimerInfoDto:  
     - returns: RequestBuilder<Void> 
     */
    open class func postLivetvTimersByIdWithRequestBuilder(id: String, liveTvTimerInfoDto: LiveTvTimerInfoDto) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/Timers/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvTimerInfoDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Adds a tuner host
     
     - parameter liveTvTunerHostInfo: (body) TunerHostInfo:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvTunerhosts(liveTvTunerHostInfo: LiveTvTunerHostInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: LiveTvTunerHostInfo?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvTunerhostsWithRequestBuilder(liveTvTunerHostInfo: liveTvTunerHostInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Adds a tuner host
     - POST /LiveTv/TunerHosts
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter liveTvTunerHostInfo: (body) TunerHostInfo:  
     - returns: RequestBuilder<LiveTvTunerHostInfo> 
     */
    open class func postLivetvTunerhostsWithRequestBuilder(liveTvTunerHostInfo: LiveTvTunerHostInfo) -> RequestBuilder<LiveTvTunerHostInfo> {
        let localVariablePath = "/LiveTv/TunerHosts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvTunerHostInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LiveTvTunerHostInfo>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Resets a tv tuner
     
     - parameter id: (path) Tuner Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postLivetvTunersByIdReset(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postLivetvTunersByIdResetWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Resets a tv tuner
     - POST /LiveTv/Tuners/{Id}/Reset
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Tuner Id 
     - returns: RequestBuilder<Void> 
     */
    open class func postLivetvTunersByIdResetWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/LiveTv/Tuners/{Id}/Reset"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func putLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return putLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func putLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter liveTvSetChannelMapping: (body) SetChannelMapping 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func putLivetvChannelmappings(providerId: String, liveTvSetChannelMapping: LiveTvSetChannelMapping, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return putLivetvChannelmappingsWithRequestBuilder(providerId: providerId, liveTvSetChannelMapping: liveTvSetChannelMapping).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - parameter liveTvSetChannelMapping: (body) SetChannelMapping 
     - returns: RequestBuilder<Void> 
     */
    open class func putLivetvChannelmappingsWithRequestBuilder(providerId: String, liveTvSetChannelMapping: LiveTvSetChannelMapping) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: liveTvSetChannelMapping)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func traceLivetvChannelmappingoptions(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return traceLivetvChannelmappingoptionsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - TRACE /LiveTv/ChannelMappingOptions
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func traceLivetvChannelmappingoptionsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappingOptions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "TRACE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providerId: (query) Provider id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func traceLivetvChannelmappings(providerId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return traceLivetvChannelmappingsWithRequestBuilder(providerId: providerId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - TRACE /LiveTv/ChannelMappings
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providerId: (query) Provider id 
     - returns: RequestBuilder<Void> 
     */
    open class func traceLivetvChannelmappingsWithRequestBuilder(providerId: String) -> RequestBuilder<Void> {
        let localVariablePath = "/LiveTv/ChannelMappings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ProviderId": (wrappedValue: providerId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "TRACE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
