//
// ItemLookupServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ItemLookupServiceAPI {

    /**
     Gets external id infos for an item
     
     - parameter id: (path) Item Id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsByIdExternalidinfos(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ExternalIdInfo]?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsByIdExternalidinfosWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets external id infos for an item
     - GET /Items/{Id}/ExternalIdInfos
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - returns: RequestBuilder<[ExternalIdInfo]> 
     */
    open class func getItemsByIdExternalidinfosWithRequestBuilder(id: String) -> RequestBuilder<[ExternalIdInfo]> {
        var localVariablePath = "/Items/{Id}/ExternalIdInfos"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ExternalIdInfo]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a remote image
     
     - parameter imageUrl: (query) The image url 
     - parameter providerName: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsRemotesearchImage(imageUrl: String, providerName: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsRemotesearchImageWithRequestBuilder(imageUrl: imageUrl, providerName: providerName).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a remote image
     - GET /Items/RemoteSearch/Image
     - No authentication required
     - parameter imageUrl: (query) The image url 
     - parameter providerName: (query)  
     - returns: RequestBuilder<Void> 
     */
    open class func getItemsRemotesearchImageWithRequestBuilder(imageUrl: String, providerName: String) -> RequestBuilder<Void> {
        let localVariablePath = "/Items/RemoteSearch/Image"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ImageUrl": (wrappedValue: imageUrl.encodeToJSON(), isExplode: true),
            "ProviderName": (wrappedValue: providerName.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Applies search criteria to an item and refreshes metadata
     
     - parameter id: (path) The item id 
     - parameter remoteSearchResult: (body) RemoteSearchResult:  
     - parameter replaceAllImages: (query) Whether or not to replace all images (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchApplyById(id: String, remoteSearchResult: RemoteSearchResult, replaceAllImages: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchApplyByIdWithRequestBuilder(id: id, remoteSearchResult: remoteSearchResult, replaceAllImages: replaceAllImages).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Applies search criteria to an item and refreshes metadata
     - POST /Items/RemoteSearch/Apply/{Id}
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) The item id 
     - parameter remoteSearchResult: (body) RemoteSearchResult:  
     - parameter replaceAllImages: (query) Whether or not to replace all images (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postItemsRemotesearchApplyByIdWithRequestBuilder(id: String, remoteSearchResult: RemoteSearchResult, replaceAllImages: Bool? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/Items/RemoteSearch/Apply/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: remoteSearchResult)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ReplaceAllImages": (wrappedValue: replaceAllImages?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersBookInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchBook(providersRemoteSearchQueryProvidersBookInfo: ProvidersRemoteSearchQueryProvidersBookInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchBookWithRequestBuilder(providersRemoteSearchQueryProvidersBookInfo: providersRemoteSearchQueryProvidersBookInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/Book
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersBookInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchBookWithRequestBuilder(providersRemoteSearchQueryProvidersBookInfo: ProvidersRemoteSearchQueryProvidersBookInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Book"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersBookInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersBoxSetInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchBoxset(providersRemoteSearchQueryProvidersBoxSetInfo: ProvidersRemoteSearchQueryProvidersBoxSetInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchBoxsetWithRequestBuilder(providersRemoteSearchQueryProvidersBoxSetInfo: providersRemoteSearchQueryProvidersBoxSetInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/BoxSet
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersBoxSetInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchBoxsetWithRequestBuilder(providersRemoteSearchQueryProvidersBoxSetInfo: ProvidersRemoteSearchQueryProvidersBoxSetInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/BoxSet"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersBoxSetInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersGameInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchGame(providersRemoteSearchQueryProvidersGameInfo: ProvidersRemoteSearchQueryProvidersGameInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchGameWithRequestBuilder(providersRemoteSearchQueryProvidersGameInfo: providersRemoteSearchQueryProvidersGameInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/Game
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersGameInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchGameWithRequestBuilder(providersRemoteSearchQueryProvidersGameInfo: ProvidersRemoteSearchQueryProvidersGameInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Game"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersGameInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersMovieInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchMovie(providersRemoteSearchQueryProvidersMovieInfo: ProvidersRemoteSearchQueryProvidersMovieInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchMovieWithRequestBuilder(providersRemoteSearchQueryProvidersMovieInfo: providersRemoteSearchQueryProvidersMovieInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/Movie
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersMovieInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchMovieWithRequestBuilder(providersRemoteSearchQueryProvidersMovieInfo: ProvidersRemoteSearchQueryProvidersMovieInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Movie"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersMovieInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersAlbumInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchMusicalbum(providersRemoteSearchQueryProvidersAlbumInfo: ProvidersRemoteSearchQueryProvidersAlbumInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchMusicalbumWithRequestBuilder(providersRemoteSearchQueryProvidersAlbumInfo: providersRemoteSearchQueryProvidersAlbumInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/MusicAlbum
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersAlbumInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchMusicalbumWithRequestBuilder(providersRemoteSearchQueryProvidersAlbumInfo: ProvidersRemoteSearchQueryProvidersAlbumInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/MusicAlbum"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersAlbumInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersArtistInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchMusicartist(providersRemoteSearchQueryProvidersArtistInfo: ProvidersRemoteSearchQueryProvidersArtistInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchMusicartistWithRequestBuilder(providersRemoteSearchQueryProvidersArtistInfo: providersRemoteSearchQueryProvidersArtistInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/MusicArtist
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersArtistInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchMusicartistWithRequestBuilder(providersRemoteSearchQueryProvidersArtistInfo: ProvidersRemoteSearchQueryProvidersArtistInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/MusicArtist"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersArtistInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersMusicVideoInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchMusicvideo(providersRemoteSearchQueryProvidersMusicVideoInfo: ProvidersRemoteSearchQueryProvidersMusicVideoInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchMusicvideoWithRequestBuilder(providersRemoteSearchQueryProvidersMusicVideoInfo: providersRemoteSearchQueryProvidersMusicVideoInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/MusicVideo
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersMusicVideoInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchMusicvideoWithRequestBuilder(providersRemoteSearchQueryProvidersMusicVideoInfo: ProvidersRemoteSearchQueryProvidersMusicVideoInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/MusicVideo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersMusicVideoInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersPersonLookupInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchPerson(providersRemoteSearchQueryProvidersPersonLookupInfo: ProvidersRemoteSearchQueryProvidersPersonLookupInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchPersonWithRequestBuilder(providersRemoteSearchQueryProvidersPersonLookupInfo: providersRemoteSearchQueryProvidersPersonLookupInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/Person
     - Requires authentication as administrator
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersPersonLookupInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchPersonWithRequestBuilder(providersRemoteSearchQueryProvidersPersonLookupInfo: ProvidersRemoteSearchQueryProvidersPersonLookupInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Person"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersPersonLookupInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersSeriesInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchSeries(providersRemoteSearchQueryProvidersSeriesInfo: ProvidersRemoteSearchQueryProvidersSeriesInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchSeriesWithRequestBuilder(providersRemoteSearchQueryProvidersSeriesInfo: providersRemoteSearchQueryProvidersSeriesInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/Series
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersSeriesInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchSeriesWithRequestBuilder(providersRemoteSearchQueryProvidersSeriesInfo: ProvidersRemoteSearchQueryProvidersSeriesInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Series"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersSeriesInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter providersRemoteSearchQueryProvidersTrailerInfo: (body) RemoteSearchQuery&#x60;1:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postItemsRemotesearchTrailer(providersRemoteSearchQueryProvidersTrailerInfo: ProvidersRemoteSearchQueryProvidersTrailerInfo, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [RemoteSearchResult]?, _ error: Error?) -> Void)) -> RequestTask {
        return postItemsRemotesearchTrailerWithRequestBuilder(providersRemoteSearchQueryProvidersTrailerInfo: providersRemoteSearchQueryProvidersTrailerInfo).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /Items/RemoteSearch/Trailer
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter providersRemoteSearchQueryProvidersTrailerInfo: (body) RemoteSearchQuery&#x60;1:  
     - returns: RequestBuilder<[RemoteSearchResult]> 
     */
    open class func postItemsRemotesearchTrailerWithRequestBuilder(providersRemoteSearchQueryProvidersTrailerInfo: ProvidersRemoteSearchQueryProvidersTrailerInfo) -> RequestBuilder<[RemoteSearchResult]> {
        let localVariablePath = "/Items/RemoteSearch/Trailer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: providersRemoteSearchQueryProvidersTrailerInfo)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RemoteSearchResult]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
