//
// DisplayPreferencesServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DisplayPreferencesServiceAPI {

    /**
     Gets a user's display preferences for an item
     
     - parameter id: (path) Item Id 
     - parameter userId: (query) User Id 
     - parameter client: (query) Client 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDisplaypreferencesById(id: String, userId: String, client: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DisplayPreferences?, _ error: Error?) -> Void)) -> RequestTask {
        return getDisplaypreferencesByIdWithRequestBuilder(id: id, userId: userId, client: client).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Gets a user's display preferences for an item
     - GET /DisplayPreferences/{Id}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter id: (path) Item Id 
     - parameter userId: (query) User Id 
     - parameter client: (query) Client 
     - returns: RequestBuilder<DisplayPreferences> 
     */
    open class func getDisplaypreferencesByIdWithRequestBuilder(id: String, userId: String, client: String) -> RequestBuilder<DisplayPreferences> {
        var localVariablePath = "/DisplayPreferences/{Id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{Id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
            "Client": (wrappedValue: client.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DisplayPreferences>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a user's display preferences for an item
     
     - parameter displayPreferencesId: (path) DisplayPreferences Id 
     - parameter userId: (query) User Id 
     - parameter displayPreferences: (body) DisplayPreferences:  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postDisplaypreferencesByDisplaypreferencesid(displayPreferencesId: String, userId: String, displayPreferences: DisplayPreferences, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postDisplaypreferencesByDisplaypreferencesidWithRequestBuilder(displayPreferencesId: displayPreferencesId, userId: userId, displayPreferences: displayPreferences).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Updates a user's display preferences for an item
     - POST /DisplayPreferences/{DisplayPreferencesId}
     - Requires authentication as user
     - API Key:
       - type: apiKey api_key (QUERY)
       - name: apikeyauth
     - Bearer Token:
       - type: http
       - name: embyauth
     - parameter displayPreferencesId: (path) DisplayPreferences Id 
     - parameter userId: (query) User Id 
     - parameter displayPreferences: (body) DisplayPreferences:  
     - returns: RequestBuilder<Void> 
     */
    open class func postDisplaypreferencesByDisplaypreferencesidWithRequestBuilder(displayPreferencesId: String, userId: String, displayPreferences: DisplayPreferences) -> RequestBuilder<Void> {
        var localVariablePath = "/DisplayPreferences/{DisplayPreferencesId}"
        let displayPreferencesIdPreEscape = "\(APIHelper.mapValueToPathItem(displayPreferencesId))"
        let displayPreferencesIdPostEscape = displayPreferencesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{DisplayPreferencesId}", with: displayPreferencesIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: displayPreferences)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "UserId": (wrappedValue: userId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
