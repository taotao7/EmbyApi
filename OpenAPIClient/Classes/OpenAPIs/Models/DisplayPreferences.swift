//
// DisplayPreferences.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DisplayPreferences: Codable, JSONEncodable, Hashable {

    public enum ScrollDirection: String, Codable, CaseIterable {
        case horizontal = "Horizontal"
        case vertical = "Vertical"
    }
    public enum SortOrder: String, Codable, CaseIterable {
        case ascending = "Ascending"
        case descending = "Descending"
    }
    public var id: String?
    public var viewType: String?
    public var sortBy: String?
    public var indexBy: String?
    public var rememberIndexing: Bool?
    public var primaryImageHeight: Int?
    public var primaryImageWidth: Int?
    public var customPrefs: [String: String]?
    public var scrollDirection: ScrollDirection?
    public var showBackdrop: Bool?
    public var rememberSorting: Bool?
    public var sortOrder: SortOrder?
    public var showSidebar: Bool?
    public var client: String?

    public init(id: String? = nil, viewType: String? = nil, sortBy: String? = nil, indexBy: String? = nil, rememberIndexing: Bool? = nil, primaryImageHeight: Int? = nil, primaryImageWidth: Int? = nil, customPrefs: [String: String]? = nil, scrollDirection: ScrollDirection? = nil, showBackdrop: Bool? = nil, rememberSorting: Bool? = nil, sortOrder: SortOrder? = nil, showSidebar: Bool? = nil, client: String? = nil) {
        self.id = id
        self.viewType = viewType
        self.sortBy = sortBy
        self.indexBy = indexBy
        self.rememberIndexing = rememberIndexing
        self.primaryImageHeight = primaryImageHeight
        self.primaryImageWidth = primaryImageWidth
        self.customPrefs = customPrefs
        self.scrollDirection = scrollDirection
        self.showBackdrop = showBackdrop
        self.rememberSorting = rememberSorting
        self.sortOrder = sortOrder
        self.showSidebar = showSidebar
        self.client = client
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case viewType = "ViewType"
        case sortBy = "SortBy"
        case indexBy = "IndexBy"
        case rememberIndexing = "RememberIndexing"
        case primaryImageHeight = "PrimaryImageHeight"
        case primaryImageWidth = "PrimaryImageWidth"
        case customPrefs = "CustomPrefs"
        case scrollDirection = "ScrollDirection"
        case showBackdrop = "ShowBackdrop"
        case rememberSorting = "RememberSorting"
        case sortOrder = "SortOrder"
        case showSidebar = "ShowSidebar"
        case client = "Client"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(viewType, forKey: .viewType)
        try container.encodeIfPresent(sortBy, forKey: .sortBy)
        try container.encodeIfPresent(indexBy, forKey: .indexBy)
        try container.encodeIfPresent(rememberIndexing, forKey: .rememberIndexing)
        try container.encodeIfPresent(primaryImageHeight, forKey: .primaryImageHeight)
        try container.encodeIfPresent(primaryImageWidth, forKey: .primaryImageWidth)
        try container.encodeIfPresent(customPrefs, forKey: .customPrefs)
        try container.encodeIfPresent(scrollDirection, forKey: .scrollDirection)
        try container.encodeIfPresent(showBackdrop, forKey: .showBackdrop)
        try container.encodeIfPresent(rememberSorting, forKey: .rememberSorting)
        try container.encodeIfPresent(sortOrder, forKey: .sortOrder)
        try container.encodeIfPresent(showSidebar, forKey: .showSidebar)
        try container.encodeIfPresent(client, forKey: .client)
    }
}

