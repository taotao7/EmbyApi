//
// TranscodingInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TranscodingInfo: Codable, JSONEncodable, Hashable {

    public enum TranscodeReasons: String, Codable, CaseIterable {
        case containerNotSupported = "ContainerNotSupported"
        case videoCodecNotSupported = "VideoCodecNotSupported"
        case audioCodecNotSupported = "AudioCodecNotSupported"
        case containerBitrateExceedsLimit = "ContainerBitrateExceedsLimit"
        case audioBitrateNotSupported = "AudioBitrateNotSupported"
        case audioChannelsNotSupported = "AudioChannelsNotSupported"
        case videoResolutionNotSupported = "VideoResolutionNotSupported"
        case unknownVideoStreamInfo = "UnknownVideoStreamInfo"
        case unknownAudioStreamInfo = "UnknownAudioStreamInfo"
        case audioProfileNotSupported = "AudioProfileNotSupported"
        case audioSampleRateNotSupported = "AudioSampleRateNotSupported"
        case anamorphicVideoNotSupported = "AnamorphicVideoNotSupported"
        case interlacedVideoNotSupported = "InterlacedVideoNotSupported"
        case secondaryAudioNotSupported = "SecondaryAudioNotSupported"
        case refFramesNotSupported = "RefFramesNotSupported"
        case videoBitDepthNotSupported = "VideoBitDepthNotSupported"
        case videoBitrateNotSupported = "VideoBitrateNotSupported"
        case videoFramerateNotSupported = "VideoFramerateNotSupported"
        case videoLevelNotSupported = "VideoLevelNotSupported"
        case videoProfileNotSupported = "VideoProfileNotSupported"
        case audioBitDepthNotSupported = "AudioBitDepthNotSupported"
        case subtitleCodecNotSupported = "SubtitleCodecNotSupported"
        case directPlayError = "DirectPlayError"
    }
    public var audioCodec: String?
    public var videoCodec: String?
    public var container: String?
    public var isVideoDirect: Bool?
    public var isAudioDirect: Bool?
    public var bitrate: Int?
    public var framerate: Float?
    public var completionPercentage: Double?
    public var transcodingPositionTicks: Double?
    public var transcodingStartPositionTicks: Double?
    public var width: Int?
    public var height: Int?
    public var audioChannels: Int?
    public var transcodeReasons: [TranscodeReasons]?
    public var currentCpuUsage: Double?
    public var averageCpuUsage: Double?
    public var cpuHistory: [TupleDoubleDouble]?
    public var currentThrottle: Int?
    public var videoDecoder: String?
    public var videoDecoderIsHardware: Bool?
    public var videoDecoderMediaType: String?
    public var videoDecoderHwAccel: String?
    public var videoEncoder: String?
    public var videoEncoderIsHardware: Bool?
    public var videoEncoderMediaType: String?
    public var videoEncoderHwAccel: String?

    public init(audioCodec: String? = nil, videoCodec: String? = nil, container: String? = nil, isVideoDirect: Bool? = nil, isAudioDirect: Bool? = nil, bitrate: Int? = nil, framerate: Float? = nil, completionPercentage: Double? = nil, transcodingPositionTicks: Double? = nil, transcodingStartPositionTicks: Double? = nil, width: Int? = nil, height: Int? = nil, audioChannels: Int? = nil, transcodeReasons: [TranscodeReasons]? = nil, currentCpuUsage: Double? = nil, averageCpuUsage: Double? = nil, cpuHistory: [TupleDoubleDouble]? = nil, currentThrottle: Int? = nil, videoDecoder: String? = nil, videoDecoderIsHardware: Bool? = nil, videoDecoderMediaType: String? = nil, videoDecoderHwAccel: String? = nil, videoEncoder: String? = nil, videoEncoderIsHardware: Bool? = nil, videoEncoderMediaType: String? = nil, videoEncoderHwAccel: String? = nil) {
        self.audioCodec = audioCodec
        self.videoCodec = videoCodec
        self.container = container
        self.isVideoDirect = isVideoDirect
        self.isAudioDirect = isAudioDirect
        self.bitrate = bitrate
        self.framerate = framerate
        self.completionPercentage = completionPercentage
        self.transcodingPositionTicks = transcodingPositionTicks
        self.transcodingStartPositionTicks = transcodingStartPositionTicks
        self.width = width
        self.height = height
        self.audioChannels = audioChannels
        self.transcodeReasons = transcodeReasons
        self.currentCpuUsage = currentCpuUsage
        self.averageCpuUsage = averageCpuUsage
        self.cpuHistory = cpuHistory
        self.currentThrottle = currentThrottle
        self.videoDecoder = videoDecoder
        self.videoDecoderIsHardware = videoDecoderIsHardware
        self.videoDecoderMediaType = videoDecoderMediaType
        self.videoDecoderHwAccel = videoDecoderHwAccel
        self.videoEncoder = videoEncoder
        self.videoEncoderIsHardware = videoEncoderIsHardware
        self.videoEncoderMediaType = videoEncoderMediaType
        self.videoEncoderHwAccel = videoEncoderHwAccel
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case audioCodec = "AudioCodec"
        case videoCodec = "VideoCodec"
        case container = "Container"
        case isVideoDirect = "IsVideoDirect"
        case isAudioDirect = "IsAudioDirect"
        case bitrate = "Bitrate"
        case framerate = "Framerate"
        case completionPercentage = "CompletionPercentage"
        case transcodingPositionTicks = "TranscodingPositionTicks"
        case transcodingStartPositionTicks = "TranscodingStartPositionTicks"
        case width = "Width"
        case height = "Height"
        case audioChannels = "AudioChannels"
        case transcodeReasons = "TranscodeReasons"
        case currentCpuUsage = "CurrentCpuUsage"
        case averageCpuUsage = "AverageCpuUsage"
        case cpuHistory = "CpuHistory"
        case currentThrottle = "CurrentThrottle"
        case videoDecoder = "VideoDecoder"
        case videoDecoderIsHardware = "VideoDecoderIsHardware"
        case videoDecoderMediaType = "VideoDecoderMediaType"
        case videoDecoderHwAccel = "VideoDecoderHwAccel"
        case videoEncoder = "VideoEncoder"
        case videoEncoderIsHardware = "VideoEncoderIsHardware"
        case videoEncoderMediaType = "VideoEncoderMediaType"
        case videoEncoderHwAccel = "VideoEncoderHwAccel"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(audioCodec, forKey: .audioCodec)
        try container.encodeIfPresent(videoCodec, forKey: .videoCodec)
        try container.encodeIfPresent(container, forKey: .container)
        try container.encodeIfPresent(isVideoDirect, forKey: .isVideoDirect)
        try container.encodeIfPresent(isAudioDirect, forKey: .isAudioDirect)
        try container.encodeIfPresent(bitrate, forKey: .bitrate)
        try container.encodeIfPresent(framerate, forKey: .framerate)
        try container.encodeIfPresent(completionPercentage, forKey: .completionPercentage)
        try container.encodeIfPresent(transcodingPositionTicks, forKey: .transcodingPositionTicks)
        try container.encodeIfPresent(transcodingStartPositionTicks, forKey: .transcodingStartPositionTicks)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(audioChannels, forKey: .audioChannels)
        try container.encodeIfPresent(transcodeReasons, forKey: .transcodeReasons)
        try container.encodeIfPresent(currentCpuUsage, forKey: .currentCpuUsage)
        try container.encodeIfPresent(averageCpuUsage, forKey: .averageCpuUsage)
        try container.encodeIfPresent(cpuHistory, forKey: .cpuHistory)
        try container.encodeIfPresent(currentThrottle, forKey: .currentThrottle)
        try container.encodeIfPresent(videoDecoder, forKey: .videoDecoder)
        try container.encodeIfPresent(videoDecoderIsHardware, forKey: .videoDecoderIsHardware)
        try container.encodeIfPresent(videoDecoderMediaType, forKey: .videoDecoderMediaType)
        try container.encodeIfPresent(videoDecoderHwAccel, forKey: .videoDecoderHwAccel)
        try container.encodeIfPresent(videoEncoder, forKey: .videoEncoder)
        try container.encodeIfPresent(videoEncoderIsHardware, forKey: .videoEncoderIsHardware)
        try container.encodeIfPresent(videoEncoderMediaType, forKey: .videoEncoderMediaType)
        try container.encodeIfPresent(videoEncoderHwAccel, forKey: .videoEncoderHwAccel)
    }
}

