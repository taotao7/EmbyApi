//
// UpdatesPackageInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdatesPackageInfo: Codable, JSONEncodable, Hashable {

    public enum TargetSystem: String, Codable, CaseIterable {
        case server = "Server"
        case mbtheater = "MBTheater"
        case mbclassic = "MBClassic"
    }
    public var id: String?
    public var name: String?
    public var shortDescription: String?
    public var overview: String?
    public var isPremium: Bool?
    public var adult: Bool?
    public var richDescUrl: String?
    public var thumbImage: String?
    public var previewImage: String?
    public var type: String?
    public var targetFilename: String?
    public var owner: String?
    public var category: String?
    public var tileColor: String?
    public var featureId: String?
    public var regInfo: String?
    public var price: Float?
    public var targetSystem: TargetSystem?
    public var guid: String?
    public var totalRatings: Int?
    public var avgRating: Float?
    public var isRegistered: Bool?
    public var expDate: Date?
    public var versions: [UpdatesPackageVersionInfo]?
    public var enableInAppStore: Bool?
    public var installs: Int?

    public init(id: String? = nil, name: String? = nil, shortDescription: String? = nil, overview: String? = nil, isPremium: Bool? = nil, adult: Bool? = nil, richDescUrl: String? = nil, thumbImage: String? = nil, previewImage: String? = nil, type: String? = nil, targetFilename: String? = nil, owner: String? = nil, category: String? = nil, tileColor: String? = nil, featureId: String? = nil, regInfo: String? = nil, price: Float? = nil, targetSystem: TargetSystem? = nil, guid: String? = nil, totalRatings: Int? = nil, avgRating: Float? = nil, isRegistered: Bool? = nil, expDate: Date? = nil, versions: [UpdatesPackageVersionInfo]? = nil, enableInAppStore: Bool? = nil, installs: Int? = nil) {
        self.id = id
        self.name = name
        self.shortDescription = shortDescription
        self.overview = overview
        self.isPremium = isPremium
        self.adult = adult
        self.richDescUrl = richDescUrl
        self.thumbImage = thumbImage
        self.previewImage = previewImage
        self.type = type
        self.targetFilename = targetFilename
        self.owner = owner
        self.category = category
        self.tileColor = tileColor
        self.featureId = featureId
        self.regInfo = regInfo
        self.price = price
        self.targetSystem = targetSystem
        self.guid = guid
        self.totalRatings = totalRatings
        self.avgRating = avgRating
        self.isRegistered = isRegistered
        self.expDate = expDate
        self.versions = versions
        self.enableInAppStore = enableInAppStore
        self.installs = installs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case shortDescription
        case overview
        case isPremium
        case adult
        case richDescUrl
        case thumbImage
        case previewImage
        case type
        case targetFilename
        case owner
        case category
        case tileColor
        case featureId
        case regInfo
        case price
        case targetSystem
        case guid
        case totalRatings
        case avgRating
        case isRegistered
        case expDate
        case versions
        case enableInAppStore
        case installs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(shortDescription, forKey: .shortDescription)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(isPremium, forKey: .isPremium)
        try container.encodeIfPresent(adult, forKey: .adult)
        try container.encodeIfPresent(richDescUrl, forKey: .richDescUrl)
        try container.encodeIfPresent(thumbImage, forKey: .thumbImage)
        try container.encodeIfPresent(previewImage, forKey: .previewImage)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(targetFilename, forKey: .targetFilename)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(tileColor, forKey: .tileColor)
        try container.encodeIfPresent(featureId, forKey: .featureId)
        try container.encodeIfPresent(regInfo, forKey: .regInfo)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(targetSystem, forKey: .targetSystem)
        try container.encodeIfPresent(guid, forKey: .guid)
        try container.encodeIfPresent(totalRatings, forKey: .totalRatings)
        try container.encodeIfPresent(avgRating, forKey: .avgRating)
        try container.encodeIfPresent(isRegistered, forKey: .isRegistered)
        try container.encodeIfPresent(expDate, forKey: .expDate)
        try container.encodeIfPresent(versions, forKey: .versions)
        try container.encodeIfPresent(enableInAppStore, forKey: .enableInAppStore)
        try container.encodeIfPresent(installs, forKey: .installs)
    }
}

