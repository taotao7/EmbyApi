//
// ConfigurationServerConfiguration.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConfigurationServerConfiguration: Codable, JSONEncodable, Hashable {

    public enum ImageSavingConvention: String, Codable, CaseIterable {
        case legacy = "Legacy"
        case compatible = "Compatible"
    }
    public var enableUPnP: Bool?
    public var publicPort: Int?
    public var publicHttpsPort: Int?
    public var httpServerPortNumber: Int?
    public var httpsPortNumber: Int?
    public var enableHttps: Bool?
    public var subtitlePermissionsUpgraded: Bool?
    public var certificatePath: String?
    public var certificatePassword: String?
    public var isPortAuthorized: Bool?
    public var autoRunWebApp: Bool?
    public var enableRemoteAccess: Bool?
    public var logAllQueryTimes: Bool?
    public var enableCaseSensitiveItemIds: Bool?
    public var metadataPath: String?
    public var metadataNetworkPath: String?
    public var preferredMetadataLanguage: String?
    public var metadataCountryCode: String?
    public var sortReplaceCharacters: [String]?
    public var sortRemoveCharacters: [String]?
    public var sortRemoveWords: [String]?
    public var libraryMonitorDelay: Int?
    public var enableDashboardResponseCaching: Bool?
    public var dashboardSourcePath: String?
    public var imageSavingConvention: ImageSavingConvention?
    public var enableAutomaticRestart: Bool?
    public var skipDeserializationForBasicTypes: Bool?
    public var serverName: String?
    public var wanDdns: String?
    public var uICulture: String?
    public var saveMetadataHidden: Bool?
    public var remoteClientBitrateLimit: Int?
    public var schemaVersion: Int?
    public var displaySpecialsWithinSeasons: Bool?
    public var localNetworkSubnets: [String]?
    public var localNetworkAddresses: [String]?
    public var enableExternalContentInSuggestions: Bool?
    public var requireHttps: Bool?
    public var isBehindProxy: Bool?
    public var remoteIPFilter: [String]?
    public var isRemoteIPFilterBlacklist: Bool?
    public var imageExtractionTimeoutMs: Int?
    public var pathSubstitutions: [ConfigurationPathSubstitution]?
    public var uninstalledPlugins: [String]?
    public var collapseVideoFolders: Bool?
    public var enableOriginalTrackTitles: Bool?
    public var enableDebugLevelLogging: Bool?
    public var enableAutoUpdate: Bool?
    public var logFileRetentionDays: Int?
    public var runAtStartup: Bool?
    public var isStartupWizardCompleted: Bool?
    public var cachePath: String?

    public init(enableUPnP: Bool? = nil, publicPort: Int? = nil, publicHttpsPort: Int? = nil, httpServerPortNumber: Int? = nil, httpsPortNumber: Int? = nil, enableHttps: Bool? = nil, subtitlePermissionsUpgraded: Bool? = nil, certificatePath: String? = nil, certificatePassword: String? = nil, isPortAuthorized: Bool? = nil, autoRunWebApp: Bool? = nil, enableRemoteAccess: Bool? = nil, logAllQueryTimes: Bool? = nil, enableCaseSensitiveItemIds: Bool? = nil, metadataPath: String? = nil, metadataNetworkPath: String? = nil, preferredMetadataLanguage: String? = nil, metadataCountryCode: String? = nil, sortReplaceCharacters: [String]? = nil, sortRemoveCharacters: [String]? = nil, sortRemoveWords: [String]? = nil, libraryMonitorDelay: Int? = nil, enableDashboardResponseCaching: Bool? = nil, dashboardSourcePath: String? = nil, imageSavingConvention: ImageSavingConvention? = nil, enableAutomaticRestart: Bool? = nil, skipDeserializationForBasicTypes: Bool? = nil, serverName: String? = nil, wanDdns: String? = nil, uICulture: String? = nil, saveMetadataHidden: Bool? = nil, remoteClientBitrateLimit: Int? = nil, schemaVersion: Int? = nil, displaySpecialsWithinSeasons: Bool? = nil, localNetworkSubnets: [String]? = nil, localNetworkAddresses: [String]? = nil, enableExternalContentInSuggestions: Bool? = nil, requireHttps: Bool? = nil, isBehindProxy: Bool? = nil, remoteIPFilter: [String]? = nil, isRemoteIPFilterBlacklist: Bool? = nil, imageExtractionTimeoutMs: Int? = nil, pathSubstitutions: [ConfigurationPathSubstitution]? = nil, uninstalledPlugins: [String]? = nil, collapseVideoFolders: Bool? = nil, enableOriginalTrackTitles: Bool? = nil, enableDebugLevelLogging: Bool? = nil, enableAutoUpdate: Bool? = nil, logFileRetentionDays: Int? = nil, runAtStartup: Bool? = nil, isStartupWizardCompleted: Bool? = nil, cachePath: String? = nil) {
        self.enableUPnP = enableUPnP
        self.publicPort = publicPort
        self.publicHttpsPort = publicHttpsPort
        self.httpServerPortNumber = httpServerPortNumber
        self.httpsPortNumber = httpsPortNumber
        self.enableHttps = enableHttps
        self.subtitlePermissionsUpgraded = subtitlePermissionsUpgraded
        self.certificatePath = certificatePath
        self.certificatePassword = certificatePassword
        self.isPortAuthorized = isPortAuthorized
        self.autoRunWebApp = autoRunWebApp
        self.enableRemoteAccess = enableRemoteAccess
        self.logAllQueryTimes = logAllQueryTimes
        self.enableCaseSensitiveItemIds = enableCaseSensitiveItemIds
        self.metadataPath = metadataPath
        self.metadataNetworkPath = metadataNetworkPath
        self.preferredMetadataLanguage = preferredMetadataLanguage
        self.metadataCountryCode = metadataCountryCode
        self.sortReplaceCharacters = sortReplaceCharacters
        self.sortRemoveCharacters = sortRemoveCharacters
        self.sortRemoveWords = sortRemoveWords
        self.libraryMonitorDelay = libraryMonitorDelay
        self.enableDashboardResponseCaching = enableDashboardResponseCaching
        self.dashboardSourcePath = dashboardSourcePath
        self.imageSavingConvention = imageSavingConvention
        self.enableAutomaticRestart = enableAutomaticRestart
        self.skipDeserializationForBasicTypes = skipDeserializationForBasicTypes
        self.serverName = serverName
        self.wanDdns = wanDdns
        self.uICulture = uICulture
        self.saveMetadataHidden = saveMetadataHidden
        self.remoteClientBitrateLimit = remoteClientBitrateLimit
        self.schemaVersion = schemaVersion
        self.displaySpecialsWithinSeasons = displaySpecialsWithinSeasons
        self.localNetworkSubnets = localNetworkSubnets
        self.localNetworkAddresses = localNetworkAddresses
        self.enableExternalContentInSuggestions = enableExternalContentInSuggestions
        self.requireHttps = requireHttps
        self.isBehindProxy = isBehindProxy
        self.remoteIPFilter = remoteIPFilter
        self.isRemoteIPFilterBlacklist = isRemoteIPFilterBlacklist
        self.imageExtractionTimeoutMs = imageExtractionTimeoutMs
        self.pathSubstitutions = pathSubstitutions
        self.uninstalledPlugins = uninstalledPlugins
        self.collapseVideoFolders = collapseVideoFolders
        self.enableOriginalTrackTitles = enableOriginalTrackTitles
        self.enableDebugLevelLogging = enableDebugLevelLogging
        self.enableAutoUpdate = enableAutoUpdate
        self.logFileRetentionDays = logFileRetentionDays
        self.runAtStartup = runAtStartup
        self.isStartupWizardCompleted = isStartupWizardCompleted
        self.cachePath = cachePath
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case enableUPnP = "EnableUPnP"
        case publicPort = "PublicPort"
        case publicHttpsPort = "PublicHttpsPort"
        case httpServerPortNumber = "HttpServerPortNumber"
        case httpsPortNumber = "HttpsPortNumber"
        case enableHttps = "EnableHttps"
        case subtitlePermissionsUpgraded = "SubtitlePermissionsUpgraded"
        case certificatePath = "CertificatePath"
        case certificatePassword = "CertificatePassword"
        case isPortAuthorized = "IsPortAuthorized"
        case autoRunWebApp = "AutoRunWebApp"
        case enableRemoteAccess = "EnableRemoteAccess"
        case logAllQueryTimes = "LogAllQueryTimes"
        case enableCaseSensitiveItemIds = "EnableCaseSensitiveItemIds"
        case metadataPath = "MetadataPath"
        case metadataNetworkPath = "MetadataNetworkPath"
        case preferredMetadataLanguage = "PreferredMetadataLanguage"
        case metadataCountryCode = "MetadataCountryCode"
        case sortReplaceCharacters = "SortReplaceCharacters"
        case sortRemoveCharacters = "SortRemoveCharacters"
        case sortRemoveWords = "SortRemoveWords"
        case libraryMonitorDelay = "LibraryMonitorDelay"
        case enableDashboardResponseCaching = "EnableDashboardResponseCaching"
        case dashboardSourcePath = "DashboardSourcePath"
        case imageSavingConvention = "ImageSavingConvention"
        case enableAutomaticRestart = "EnableAutomaticRestart"
        case skipDeserializationForBasicTypes = "SkipDeserializationForBasicTypes"
        case serverName = "ServerName"
        case wanDdns = "WanDdns"
        case uICulture = "UICulture"
        case saveMetadataHidden = "SaveMetadataHidden"
        case remoteClientBitrateLimit = "RemoteClientBitrateLimit"
        case schemaVersion = "SchemaVersion"
        case displaySpecialsWithinSeasons = "DisplaySpecialsWithinSeasons"
        case localNetworkSubnets = "LocalNetworkSubnets"
        case localNetworkAddresses = "LocalNetworkAddresses"
        case enableExternalContentInSuggestions = "EnableExternalContentInSuggestions"
        case requireHttps = "RequireHttps"
        case isBehindProxy = "IsBehindProxy"
        case remoteIPFilter = "RemoteIPFilter"
        case isRemoteIPFilterBlacklist = "IsRemoteIPFilterBlacklist"
        case imageExtractionTimeoutMs = "ImageExtractionTimeoutMs"
        case pathSubstitutions = "PathSubstitutions"
        case uninstalledPlugins = "UninstalledPlugins"
        case collapseVideoFolders = "CollapseVideoFolders"
        case enableOriginalTrackTitles = "EnableOriginalTrackTitles"
        case enableDebugLevelLogging = "EnableDebugLevelLogging"
        case enableAutoUpdate = "EnableAutoUpdate"
        case logFileRetentionDays = "LogFileRetentionDays"
        case runAtStartup = "RunAtStartup"
        case isStartupWizardCompleted = "IsStartupWizardCompleted"
        case cachePath = "CachePath"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(enableUPnP, forKey: .enableUPnP)
        try container.encodeIfPresent(publicPort, forKey: .publicPort)
        try container.encodeIfPresent(publicHttpsPort, forKey: .publicHttpsPort)
        try container.encodeIfPresent(httpServerPortNumber, forKey: .httpServerPortNumber)
        try container.encodeIfPresent(httpsPortNumber, forKey: .httpsPortNumber)
        try container.encodeIfPresent(enableHttps, forKey: .enableHttps)
        try container.encodeIfPresent(subtitlePermissionsUpgraded, forKey: .subtitlePermissionsUpgraded)
        try container.encodeIfPresent(certificatePath, forKey: .certificatePath)
        try container.encodeIfPresent(certificatePassword, forKey: .certificatePassword)
        try container.encodeIfPresent(isPortAuthorized, forKey: .isPortAuthorized)
        try container.encodeIfPresent(autoRunWebApp, forKey: .autoRunWebApp)
        try container.encodeIfPresent(enableRemoteAccess, forKey: .enableRemoteAccess)
        try container.encodeIfPresent(logAllQueryTimes, forKey: .logAllQueryTimes)
        try container.encodeIfPresent(enableCaseSensitiveItemIds, forKey: .enableCaseSensitiveItemIds)
        try container.encodeIfPresent(metadataPath, forKey: .metadataPath)
        try container.encodeIfPresent(metadataNetworkPath, forKey: .metadataNetworkPath)
        try container.encodeIfPresent(preferredMetadataLanguage, forKey: .preferredMetadataLanguage)
        try container.encodeIfPresent(metadataCountryCode, forKey: .metadataCountryCode)
        try container.encodeIfPresent(sortReplaceCharacters, forKey: .sortReplaceCharacters)
        try container.encodeIfPresent(sortRemoveCharacters, forKey: .sortRemoveCharacters)
        try container.encodeIfPresent(sortRemoveWords, forKey: .sortRemoveWords)
        try container.encodeIfPresent(libraryMonitorDelay, forKey: .libraryMonitorDelay)
        try container.encodeIfPresent(enableDashboardResponseCaching, forKey: .enableDashboardResponseCaching)
        try container.encodeIfPresent(dashboardSourcePath, forKey: .dashboardSourcePath)
        try container.encodeIfPresent(imageSavingConvention, forKey: .imageSavingConvention)
        try container.encodeIfPresent(enableAutomaticRestart, forKey: .enableAutomaticRestart)
        try container.encodeIfPresent(skipDeserializationForBasicTypes, forKey: .skipDeserializationForBasicTypes)
        try container.encodeIfPresent(serverName, forKey: .serverName)
        try container.encodeIfPresent(wanDdns, forKey: .wanDdns)
        try container.encodeIfPresent(uICulture, forKey: .uICulture)
        try container.encodeIfPresent(saveMetadataHidden, forKey: .saveMetadataHidden)
        try container.encodeIfPresent(remoteClientBitrateLimit, forKey: .remoteClientBitrateLimit)
        try container.encodeIfPresent(schemaVersion, forKey: .schemaVersion)
        try container.encodeIfPresent(displaySpecialsWithinSeasons, forKey: .displaySpecialsWithinSeasons)
        try container.encodeIfPresent(localNetworkSubnets, forKey: .localNetworkSubnets)
        try container.encodeIfPresent(localNetworkAddresses, forKey: .localNetworkAddresses)
        try container.encodeIfPresent(enableExternalContentInSuggestions, forKey: .enableExternalContentInSuggestions)
        try container.encodeIfPresent(requireHttps, forKey: .requireHttps)
        try container.encodeIfPresent(isBehindProxy, forKey: .isBehindProxy)
        try container.encodeIfPresent(remoteIPFilter, forKey: .remoteIPFilter)
        try container.encodeIfPresent(isRemoteIPFilterBlacklist, forKey: .isRemoteIPFilterBlacklist)
        try container.encodeIfPresent(imageExtractionTimeoutMs, forKey: .imageExtractionTimeoutMs)
        try container.encodeIfPresent(pathSubstitutions, forKey: .pathSubstitutions)
        try container.encodeIfPresent(uninstalledPlugins, forKey: .uninstalledPlugins)
        try container.encodeIfPresent(collapseVideoFolders, forKey: .collapseVideoFolders)
        try container.encodeIfPresent(enableOriginalTrackTitles, forKey: .enableOriginalTrackTitles)
        try container.encodeIfPresent(enableDebugLevelLogging, forKey: .enableDebugLevelLogging)
        try container.encodeIfPresent(enableAutoUpdate, forKey: .enableAutoUpdate)
        try container.encodeIfPresent(logFileRetentionDays, forKey: .logFileRetentionDays)
        try container.encodeIfPresent(runAtStartup, forKey: .runAtStartup)
        try container.encodeIfPresent(isStartupWizardCompleted, forKey: .isStartupWizardCompleted)
        try container.encodeIfPresent(cachePath, forKey: .cachePath)
    }
}

