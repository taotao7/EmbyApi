//
// PlaybackStopInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PlaybackStopInfo: Codable, JSONEncodable, Hashable {

    public var nowPlayingQueue: [QueueItem]?
    public var playlistItemId: String?
    public var item: BaseItemDto?
    public var itemId: String?
    public var sessionId: String?
    public var mediaSourceId: String?
    public var positionTicks: Int64?
    public var liveStreamId: String?
    public var playSessionId: String?
    public var failed: Bool?
    public var nextMediaType: String?

    public init(nowPlayingQueue: [QueueItem]? = nil, playlistItemId: String? = nil, item: BaseItemDto? = nil, itemId: String? = nil, sessionId: String? = nil, mediaSourceId: String? = nil, positionTicks: Int64? = nil, liveStreamId: String? = nil, playSessionId: String? = nil, failed: Bool? = nil, nextMediaType: String? = nil) {
        self.nowPlayingQueue = nowPlayingQueue
        self.playlistItemId = playlistItemId
        self.item = item
        self.itemId = itemId
        self.sessionId = sessionId
        self.mediaSourceId = mediaSourceId
        self.positionTicks = positionTicks
        self.liveStreamId = liveStreamId
        self.playSessionId = playSessionId
        self.failed = failed
        self.nextMediaType = nextMediaType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nowPlayingQueue = "NowPlayingQueue"
        case playlistItemId = "PlaylistItemId"
        case item = "Item"
        case itemId = "ItemId"
        case sessionId = "SessionId"
        case mediaSourceId = "MediaSourceId"
        case positionTicks = "PositionTicks"
        case liveStreamId = "LiveStreamId"
        case playSessionId = "PlaySessionId"
        case failed = "Failed"
        case nextMediaType = "NextMediaType"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(nowPlayingQueue, forKey: .nowPlayingQueue)
        try container.encodeIfPresent(playlistItemId, forKey: .playlistItemId)
        try container.encodeIfPresent(item, forKey: .item)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(mediaSourceId, forKey: .mediaSourceId)
        try container.encodeIfPresent(positionTicks, forKey: .positionTicks)
        try container.encodeIfPresent(liveStreamId, forKey: .liveStreamId)
        try container.encodeIfPresent(playSessionId, forKey: .playSessionId)
        try container.encodeIfPresent(failed, forKey: .failed)
        try container.encodeIfPresent(nextMediaType, forKey: .nextMediaType)
    }
}

