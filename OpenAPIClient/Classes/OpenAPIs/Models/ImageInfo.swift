//
// ImageInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ImageInfo: Codable, JSONEncodable, Hashable {

    public enum ImageType: String, Codable, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }
    public var imageType: ImageType?
    public var imageIndex: Int?
    public var path: String?
    public var height: Int?
    public var width: Int?
    public var size: Int64?

    public init(imageType: ImageType? = nil, imageIndex: Int? = nil, path: String? = nil, height: Int? = nil, width: Int? = nil, size: Int64? = nil) {
        self.imageType = imageType
        self.imageIndex = imageIndex
        self.path = path
        self.height = height
        self.width = width
        self.size = size
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imageType = "ImageType"
        case imageIndex = "ImageIndex"
        case path = "Path"
        case height = "Height"
        case width = "Width"
        case size = "Size"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(imageType, forKey: .imageType)
        try container.encodeIfPresent(imageIndex, forKey: .imageIndex)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(height, forKey: .height)
        try container.encodeIfPresent(width, forKey: .width)
        try container.encodeIfPresent(size, forKey: .size)
    }
}

