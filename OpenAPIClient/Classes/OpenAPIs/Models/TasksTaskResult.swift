//
// TasksTaskResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TasksTaskResult: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case completed = "Completed"
        case failed = "Failed"
        case cancelled = "Cancelled"
        case aborted = "Aborted"
    }
    public var startTimeUtc: Date?
    public var endTimeUtc: Date?
    public var status: Status?
    public var name: String?
    public var key: String?
    public var id: String?
    public var errorMessage: String?
    public var longErrorMessage: String?

    public init(startTimeUtc: Date? = nil, endTimeUtc: Date? = nil, status: Status? = nil, name: String? = nil, key: String? = nil, id: String? = nil, errorMessage: String? = nil, longErrorMessage: String? = nil) {
        self.startTimeUtc = startTimeUtc
        self.endTimeUtc = endTimeUtc
        self.status = status
        self.name = name
        self.key = key
        self.id = id
        self.errorMessage = errorMessage
        self.longErrorMessage = longErrorMessage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startTimeUtc = "StartTimeUtc"
        case endTimeUtc = "EndTimeUtc"
        case status = "Status"
        case name = "Name"
        case key = "Key"
        case id = "Id"
        case errorMessage = "ErrorMessage"
        case longErrorMessage = "LongErrorMessage"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(startTimeUtc, forKey: .startTimeUtc)
        try container.encodeIfPresent(endTimeUtc, forKey: .endTimeUtc)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        try container.encodeIfPresent(longErrorMessage, forKey: .longErrorMessage)
    }
}

