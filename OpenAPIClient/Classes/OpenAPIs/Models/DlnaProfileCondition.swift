//
// DlnaProfileCondition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DlnaProfileCondition: Codable, JSONEncodable, Hashable {

    public enum Condition: String, Codable, CaseIterable {
        case equals = "Equals"
        case notEquals = "NotEquals"
        case lessThanEqual = "LessThanEqual"
        case greaterThanEqual = "GreaterThanEqual"
        case equalsAny = "EqualsAny"
    }
    public enum Property: String, Codable, CaseIterable {
        case audioChannels = "AudioChannels"
        case audioBitrate = "AudioBitrate"
        case audioProfile = "AudioProfile"
        case width = "Width"
        case height = "Height"
        case has64BitOffsets = "Has64BitOffsets"
        case packetLength = "PacketLength"
        case videoBitDepth = "VideoBitDepth"
        case videoBitrate = "VideoBitrate"
        case videoFramerate = "VideoFramerate"
        case videoLevel = "VideoLevel"
        case videoProfile = "VideoProfile"
        case videoTimestamp = "VideoTimestamp"
        case isAnamorphic = "IsAnamorphic"
        case refFrames = "RefFrames"
        case numAudioStreams = "NumAudioStreams"
        case numVideoStreams = "NumVideoStreams"
        case isSecondaryAudio = "IsSecondaryAudio"
        case videoCodecTag = "VideoCodecTag"
        case isAvc = "IsAvc"
        case isInterlaced = "IsInterlaced"
        case audioSampleRate = "AudioSampleRate"
        case audioBitDepth = "AudioBitDepth"
    }
    public var condition: Condition?
    public var property: Property?
    public var value: String?
    public var isRequired: Bool?

    public init(condition: Condition? = nil, property: Property? = nil, value: String? = nil, isRequired: Bool? = nil) {
        self.condition = condition
        self.property = property
        self.value = value
        self.isRequired = isRequired
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case condition = "Condition"
        case property = "Property"
        case value = "Value"
        case isRequired = "IsRequired"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encodeIfPresent(property, forKey: .property)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(isRequired, forKey: .isRequired)
    }
}

