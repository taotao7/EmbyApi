//
// LiveTvTunerHostInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LiveTvTunerHostInfo: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var url: String?
    public var type: String?
    public var deviceId: String?
    public var friendlyName: String?
    public var importFavoritesOnly: Bool?
    public var allowHWTranscoding: Bool?
    public var source: String?
    public var tunerCount: Int?
    public var userAgent: String?

    public init(id: String? = nil, url: String? = nil, type: String? = nil, deviceId: String? = nil, friendlyName: String? = nil, importFavoritesOnly: Bool? = nil, allowHWTranscoding: Bool? = nil, source: String? = nil, tunerCount: Int? = nil, userAgent: String? = nil) {
        self.id = id
        self.url = url
        self.type = type
        self.deviceId = deviceId
        self.friendlyName = friendlyName
        self.importFavoritesOnly = importFavoritesOnly
        self.allowHWTranscoding = allowHWTranscoding
        self.source = source
        self.tunerCount = tunerCount
        self.userAgent = userAgent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case url = "Url"
        case type = "Type"
        case deviceId = "DeviceId"
        case friendlyName = "FriendlyName"
        case importFavoritesOnly = "ImportFavoritesOnly"
        case allowHWTranscoding = "AllowHWTranscoding"
        case source = "Source"
        case tunerCount = "TunerCount"
        case userAgent = "UserAgent"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(deviceId, forKey: .deviceId)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(importFavoritesOnly, forKey: .importFavoritesOnly)
        try container.encodeIfPresent(allowHWTranscoding, forKey: .allowHWTranscoding)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(tunerCount, forKey: .tunerCount)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
    }
}

