//
// ActivityLogEntry.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ActivityLogEntry: Codable, JSONEncodable, Hashable {

    public enum Severity: String, Codable, CaseIterable {
        case info = "Info"
        case debug = "Debug"
        case warn = "Warn"
        case error = "Error"
        case fatal = "Fatal"
    }
    public var id: Int64?
    public var name: String?
    public var overview: String?
    public var shortOverview: String?
    public var type: String?
    public var itemId: String?
    public var date: Date?
    public var userId: String?
    public var userPrimaryImageTag: String?
    public var severity: Severity?

    public init(id: Int64? = nil, name: String? = nil, overview: String? = nil, shortOverview: String? = nil, type: String? = nil, itemId: String? = nil, date: Date? = nil, userId: String? = nil, userPrimaryImageTag: String? = nil, severity: Severity? = nil) {
        self.id = id
        self.name = name
        self.overview = overview
        self.shortOverview = shortOverview
        self.type = type
        self.itemId = itemId
        self.date = date
        self.userId = userId
        self.userPrimaryImageTag = userPrimaryImageTag
        self.severity = severity
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case name = "Name"
        case overview = "Overview"
        case shortOverview = "ShortOverview"
        case type = "Type"
        case itemId = "ItemId"
        case date = "Date"
        case userId = "UserId"
        case userPrimaryImageTag = "UserPrimaryImageTag"
        case severity = "Severity"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(overview, forKey: .overview)
        try container.encodeIfPresent(shortOverview, forKey: .shortOverview)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(userPrimaryImageTag, forKey: .userPrimaryImageTag)
        try container.encodeIfPresent(severity, forKey: .severity)
    }
}

