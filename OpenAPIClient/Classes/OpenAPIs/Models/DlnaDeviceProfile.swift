//
// DlnaDeviceProfile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DlnaDeviceProfile: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var id: String?
    public var identification: DlnaDeviceIdentification?
    public var friendlyName: String?
    public var manufacturer: String?
    public var manufacturerUrl: String?
    public var modelName: String?
    public var modelDescription: String?
    public var modelNumber: String?
    public var modelUrl: String?
    public var serialNumber: String?
    public var enableAlbumArtInDidl: Bool?
    public var enableSingleAlbumArtLimit: Bool?
    public var enableSingleSubtitleLimit: Bool?
    public var supportedMediaTypes: String?
    public var userId: String?
    public var albumArtPn: String?
    public var maxAlbumArtWidth: Int?
    public var maxAlbumArtHeight: Int?
    public var maxIconWidth: Int?
    public var maxIconHeight: Int?
    public var maxStreamingBitrate: Int64?
    public var maxStaticBitrate: Int64?
    public var musicStreamingTranscodingBitrate: Int?
    public var maxStaticMusicBitrate: Int?
    public var sonyAggregationFlags: String?
    public var protocolInfo: String?
    public var timelineOffsetSeconds: Int?
    public var requiresPlainVideoItems: Bool?
    public var requiresPlainFolders: Bool?
    public var enableMSMediaReceiverRegistrar: Bool?
    public var ignoreTranscodeByteRangeRequests: Bool?
    public var xmlRootAttributes: [DlnaXmlAttribute]?
    public var directPlayProfiles: [DlnaDirectPlayProfile]?
    public var transcodingProfiles: [DlnaTranscodingProfile]?
    public var containerProfiles: [DlnaContainerProfile]?
    public var codecProfiles: [DlnaCodecProfile]?
    public var responseProfiles: [DlnaResponseProfile]?
    public var subtitleProfiles: [DlnaSubtitleProfile]?

    public init(name: String? = nil, id: String? = nil, identification: DlnaDeviceIdentification? = nil, friendlyName: String? = nil, manufacturer: String? = nil, manufacturerUrl: String? = nil, modelName: String? = nil, modelDescription: String? = nil, modelNumber: String? = nil, modelUrl: String? = nil, serialNumber: String? = nil, enableAlbumArtInDidl: Bool? = nil, enableSingleAlbumArtLimit: Bool? = nil, enableSingleSubtitleLimit: Bool? = nil, supportedMediaTypes: String? = nil, userId: String? = nil, albumArtPn: String? = nil, maxAlbumArtWidth: Int? = nil, maxAlbumArtHeight: Int? = nil, maxIconWidth: Int? = nil, maxIconHeight: Int? = nil, maxStreamingBitrate: Int64? = nil, maxStaticBitrate: Int64? = nil, musicStreamingTranscodingBitrate: Int? = nil, maxStaticMusicBitrate: Int? = nil, sonyAggregationFlags: String? = nil, protocolInfo: String? = nil, timelineOffsetSeconds: Int? = nil, requiresPlainVideoItems: Bool? = nil, requiresPlainFolders: Bool? = nil, enableMSMediaReceiverRegistrar: Bool? = nil, ignoreTranscodeByteRangeRequests: Bool? = nil, xmlRootAttributes: [DlnaXmlAttribute]? = nil, directPlayProfiles: [DlnaDirectPlayProfile]? = nil, transcodingProfiles: [DlnaTranscodingProfile]? = nil, containerProfiles: [DlnaContainerProfile]? = nil, codecProfiles: [DlnaCodecProfile]? = nil, responseProfiles: [DlnaResponseProfile]? = nil, subtitleProfiles: [DlnaSubtitleProfile]? = nil) {
        self.name = name
        self.id = id
        self.identification = identification
        self.friendlyName = friendlyName
        self.manufacturer = manufacturer
        self.manufacturerUrl = manufacturerUrl
        self.modelName = modelName
        self.modelDescription = modelDescription
        self.modelNumber = modelNumber
        self.modelUrl = modelUrl
        self.serialNumber = serialNumber
        self.enableAlbumArtInDidl = enableAlbumArtInDidl
        self.enableSingleAlbumArtLimit = enableSingleAlbumArtLimit
        self.enableSingleSubtitleLimit = enableSingleSubtitleLimit
        self.supportedMediaTypes = supportedMediaTypes
        self.userId = userId
        self.albumArtPn = albumArtPn
        self.maxAlbumArtWidth = maxAlbumArtWidth
        self.maxAlbumArtHeight = maxAlbumArtHeight
        self.maxIconWidth = maxIconWidth
        self.maxIconHeight = maxIconHeight
        self.maxStreamingBitrate = maxStreamingBitrate
        self.maxStaticBitrate = maxStaticBitrate
        self.musicStreamingTranscodingBitrate = musicStreamingTranscodingBitrate
        self.maxStaticMusicBitrate = maxStaticMusicBitrate
        self.sonyAggregationFlags = sonyAggregationFlags
        self.protocolInfo = protocolInfo
        self.timelineOffsetSeconds = timelineOffsetSeconds
        self.requiresPlainVideoItems = requiresPlainVideoItems
        self.requiresPlainFolders = requiresPlainFolders
        self.enableMSMediaReceiverRegistrar = enableMSMediaReceiverRegistrar
        self.ignoreTranscodeByteRangeRequests = ignoreTranscodeByteRangeRequests
        self.xmlRootAttributes = xmlRootAttributes
        self.directPlayProfiles = directPlayProfiles
        self.transcodingProfiles = transcodingProfiles
        self.containerProfiles = containerProfiles
        self.codecProfiles = codecProfiles
        self.responseProfiles = responseProfiles
        self.subtitleProfiles = subtitleProfiles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case id = "Id"
        case identification = "Identification"
        case friendlyName = "FriendlyName"
        case manufacturer = "Manufacturer"
        case manufacturerUrl = "ManufacturerUrl"
        case modelName = "ModelName"
        case modelDescription = "ModelDescription"
        case modelNumber = "ModelNumber"
        case modelUrl = "ModelUrl"
        case serialNumber = "SerialNumber"
        case enableAlbumArtInDidl = "EnableAlbumArtInDidl"
        case enableSingleAlbumArtLimit = "EnableSingleAlbumArtLimit"
        case enableSingleSubtitleLimit = "EnableSingleSubtitleLimit"
        case supportedMediaTypes = "SupportedMediaTypes"
        case userId = "UserId"
        case albumArtPn = "AlbumArtPn"
        case maxAlbumArtWidth = "MaxAlbumArtWidth"
        case maxAlbumArtHeight = "MaxAlbumArtHeight"
        case maxIconWidth = "MaxIconWidth"
        case maxIconHeight = "MaxIconHeight"
        case maxStreamingBitrate = "MaxStreamingBitrate"
        case maxStaticBitrate = "MaxStaticBitrate"
        case musicStreamingTranscodingBitrate = "MusicStreamingTranscodingBitrate"
        case maxStaticMusicBitrate = "MaxStaticMusicBitrate"
        case sonyAggregationFlags = "SonyAggregationFlags"
        case protocolInfo = "ProtocolInfo"
        case timelineOffsetSeconds = "TimelineOffsetSeconds"
        case requiresPlainVideoItems = "RequiresPlainVideoItems"
        case requiresPlainFolders = "RequiresPlainFolders"
        case enableMSMediaReceiverRegistrar = "EnableMSMediaReceiverRegistrar"
        case ignoreTranscodeByteRangeRequests = "IgnoreTranscodeByteRangeRequests"
        case xmlRootAttributes = "XmlRootAttributes"
        case directPlayProfiles = "DirectPlayProfiles"
        case transcodingProfiles = "TranscodingProfiles"
        case containerProfiles = "ContainerProfiles"
        case codecProfiles = "CodecProfiles"
        case responseProfiles = "ResponseProfiles"
        case subtitleProfiles = "SubtitleProfiles"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(identification, forKey: .identification)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(manufacturer, forKey: .manufacturer)
        try container.encodeIfPresent(manufacturerUrl, forKey: .manufacturerUrl)
        try container.encodeIfPresent(modelName, forKey: .modelName)
        try container.encodeIfPresent(modelDescription, forKey: .modelDescription)
        try container.encodeIfPresent(modelNumber, forKey: .modelNumber)
        try container.encodeIfPresent(modelUrl, forKey: .modelUrl)
        try container.encodeIfPresent(serialNumber, forKey: .serialNumber)
        try container.encodeIfPresent(enableAlbumArtInDidl, forKey: .enableAlbumArtInDidl)
        try container.encodeIfPresent(enableSingleAlbumArtLimit, forKey: .enableSingleAlbumArtLimit)
        try container.encodeIfPresent(enableSingleSubtitleLimit, forKey: .enableSingleSubtitleLimit)
        try container.encodeIfPresent(supportedMediaTypes, forKey: .supportedMediaTypes)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(albumArtPn, forKey: .albumArtPn)
        try container.encodeIfPresent(maxAlbumArtWidth, forKey: .maxAlbumArtWidth)
        try container.encodeIfPresent(maxAlbumArtHeight, forKey: .maxAlbumArtHeight)
        try container.encodeIfPresent(maxIconWidth, forKey: .maxIconWidth)
        try container.encodeIfPresent(maxIconHeight, forKey: .maxIconHeight)
        try container.encodeIfPresent(maxStreamingBitrate, forKey: .maxStreamingBitrate)
        try container.encodeIfPresent(maxStaticBitrate, forKey: .maxStaticBitrate)
        try container.encodeIfPresent(musicStreamingTranscodingBitrate, forKey: .musicStreamingTranscodingBitrate)
        try container.encodeIfPresent(maxStaticMusicBitrate, forKey: .maxStaticMusicBitrate)
        try container.encodeIfPresent(sonyAggregationFlags, forKey: .sonyAggregationFlags)
        try container.encodeIfPresent(protocolInfo, forKey: .protocolInfo)
        try container.encodeIfPresent(timelineOffsetSeconds, forKey: .timelineOffsetSeconds)
        try container.encodeIfPresent(requiresPlainVideoItems, forKey: .requiresPlainVideoItems)
        try container.encodeIfPresent(requiresPlainFolders, forKey: .requiresPlainFolders)
        try container.encodeIfPresent(enableMSMediaReceiverRegistrar, forKey: .enableMSMediaReceiverRegistrar)
        try container.encodeIfPresent(ignoreTranscodeByteRangeRequests, forKey: .ignoreTranscodeByteRangeRequests)
        try container.encodeIfPresent(xmlRootAttributes, forKey: .xmlRootAttributes)
        try container.encodeIfPresent(directPlayProfiles, forKey: .directPlayProfiles)
        try container.encodeIfPresent(transcodingProfiles, forKey: .transcodingProfiles)
        try container.encodeIfPresent(containerProfiles, forKey: .containerProfiles)
        try container.encodeIfPresent(codecProfiles, forKey: .codecProfiles)
        try container.encodeIfPresent(responseProfiles, forKey: .responseProfiles)
        try container.encodeIfPresent(subtitleProfiles, forKey: .subtitleProfiles)
    }
}

