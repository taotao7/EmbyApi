//
// SyncModelSyncJobRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SyncModelSyncJobRequest: Codable, JSONEncodable, Hashable {

    public enum Category: String, Codable, CaseIterable {
        case latest = "Latest"
        case nextUp = "NextUp"
        case resume = "Resume"
    }
    public var targetId: String?
    public var itemIds: [String]?
    public var category: Category?
    public var parentId: String?
    public var quality: String?
    public var profile: String?
    public var name: String?
    public var userId: String?
    public var unwatchedOnly: Bool?
    public var syncNewContent: Bool?
    public var itemLimit: Int?
    public var bitrate: Int?

    public init(targetId: String? = nil, itemIds: [String]? = nil, category: Category? = nil, parentId: String? = nil, quality: String? = nil, profile: String? = nil, name: String? = nil, userId: String? = nil, unwatchedOnly: Bool? = nil, syncNewContent: Bool? = nil, itemLimit: Int? = nil, bitrate: Int? = nil) {
        self.targetId = targetId
        self.itemIds = itemIds
        self.category = category
        self.parentId = parentId
        self.quality = quality
        self.profile = profile
        self.name = name
        self.userId = userId
        self.unwatchedOnly = unwatchedOnly
        self.syncNewContent = syncNewContent
        self.itemLimit = itemLimit
        self.bitrate = bitrate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case targetId = "TargetId"
        case itemIds = "ItemIds"
        case category = "Category"
        case parentId = "ParentId"
        case quality = "Quality"
        case profile = "Profile"
        case name = "Name"
        case userId = "UserId"
        case unwatchedOnly = "UnwatchedOnly"
        case syncNewContent = "SyncNewContent"
        case itemLimit = "ItemLimit"
        case bitrate = "Bitrate"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(targetId, forKey: .targetId)
        try container.encodeIfPresent(itemIds, forKey: .itemIds)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(quality, forKey: .quality)
        try container.encodeIfPresent(profile, forKey: .profile)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(unwatchedOnly, forKey: .unwatchedOnly)
        try container.encodeIfPresent(syncNewContent, forKey: .syncNewContent)
        try container.encodeIfPresent(itemLimit, forKey: .itemLimit)
        try container.encodeIfPresent(bitrate, forKey: .bitrate)
    }
}

