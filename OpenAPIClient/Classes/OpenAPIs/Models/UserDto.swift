//
// UserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserDto: Codable, JSONEncodable, Hashable {

    public enum ConnectLinkType: String, Codable, CaseIterable {
        case linkedUser = "LinkedUser"
        case guest = "Guest"
    }
    public var name: String?
    public var serverId: String?
    public var serverName: String?
    public var connectUserName: String?
    public var connectLinkType: ConnectLinkType?
    public var id: String?
    public var primaryImageTag: String?
    public var hasPassword: Bool?
    public var hasConfiguredPassword: Bool?
    public var hasConfiguredEasyPassword: Bool?
    public var enableAutoLogin: Bool?
    public var lastLoginDate: Date?
    public var lastActivityDate: Date?
    public var configuration: ConfigurationUserConfiguration?
    public var policy: UsersUserPolicy?
    public var primaryImageAspectRatio: Double?

    public init(name: String? = nil, serverId: String? = nil, serverName: String? = nil, connectUserName: String? = nil, connectLinkType: ConnectLinkType? = nil, id: String? = nil, primaryImageTag: String? = nil, hasPassword: Bool? = nil, hasConfiguredPassword: Bool? = nil, hasConfiguredEasyPassword: Bool? = nil, enableAutoLogin: Bool? = nil, lastLoginDate: Date? = nil, lastActivityDate: Date? = nil, configuration: ConfigurationUserConfiguration? = nil, policy: UsersUserPolicy? = nil, primaryImageAspectRatio: Double? = nil) {
        self.name = name
        self.serverId = serverId
        self.serverName = serverName
        self.connectUserName = connectUserName
        self.connectLinkType = connectLinkType
        self.id = id
        self.primaryImageTag = primaryImageTag
        self.hasPassword = hasPassword
        self.hasConfiguredPassword = hasConfiguredPassword
        self.hasConfiguredEasyPassword = hasConfiguredEasyPassword
        self.enableAutoLogin = enableAutoLogin
        self.lastLoginDate = lastLoginDate
        self.lastActivityDate = lastActivityDate
        self.configuration = configuration
        self.policy = policy
        self.primaryImageAspectRatio = primaryImageAspectRatio
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case serverId = "ServerId"
        case serverName = "ServerName"
        case connectUserName = "ConnectUserName"
        case connectLinkType = "ConnectLinkType"
        case id = "Id"
        case primaryImageTag = "PrimaryImageTag"
        case hasPassword = "HasPassword"
        case hasConfiguredPassword = "HasConfiguredPassword"
        case hasConfiguredEasyPassword = "HasConfiguredEasyPassword"
        case enableAutoLogin = "EnableAutoLogin"
        case lastLoginDate = "LastLoginDate"
        case lastActivityDate = "LastActivityDate"
        case configuration = "Configuration"
        case policy = "Policy"
        case primaryImageAspectRatio = "PrimaryImageAspectRatio"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(serverId, forKey: .serverId)
        try container.encodeIfPresent(serverName, forKey: .serverName)
        try container.encodeIfPresent(connectUserName, forKey: .connectUserName)
        try container.encodeIfPresent(connectLinkType, forKey: .connectLinkType)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(primaryImageTag, forKey: .primaryImageTag)
        try container.encodeIfPresent(hasPassword, forKey: .hasPassword)
        try container.encodeIfPresent(hasConfiguredPassword, forKey: .hasConfiguredPassword)
        try container.encodeIfPresent(hasConfiguredEasyPassword, forKey: .hasConfiguredEasyPassword)
        try container.encodeIfPresent(enableAutoLogin, forKey: .enableAutoLogin)
        try container.encodeIfPresent(lastLoginDate, forKey: .lastLoginDate)
        try container.encodeIfPresent(lastActivityDate, forKey: .lastActivityDate)
        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(policy, forKey: .policy)
        try container.encodeIfPresent(primaryImageAspectRatio, forKey: .primaryImageAspectRatio)
    }
}

