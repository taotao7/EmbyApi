//
// UsersUserAction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UsersUserAction: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case playedItem = "PlayedItem"
    }
    public var id: String?
    public var serverId: String?
    public var userId: String?
    public var itemId: String?
    public var type: ModelType?
    public var date: Date?
    public var positionTicks: Int64?

    public init(id: String? = nil, serverId: String? = nil, userId: String? = nil, itemId: String? = nil, type: ModelType? = nil, date: Date? = nil, positionTicks: Int64? = nil) {
        self.id = id
        self.serverId = serverId
        self.userId = userId
        self.itemId = itemId
        self.type = type
        self.date = date
        self.positionTicks = positionTicks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case serverId = "ServerId"
        case userId = "UserId"
        case itemId = "ItemId"
        case type = "Type"
        case date = "Date"
        case positionTicks = "PositionTicks"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(serverId, forKey: .serverId)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(date, forKey: .date)
        try container.encodeIfPresent(positionTicks, forKey: .positionTicks)
    }
}

