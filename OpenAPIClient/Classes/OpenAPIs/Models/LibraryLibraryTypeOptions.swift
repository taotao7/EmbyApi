//
// LibraryLibraryTypeOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LibraryLibraryTypeOptions: Codable, JSONEncodable, Hashable {

    public enum SupportedImageTypes: String, Codable, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }
    public var type: String?
    public var metadataFetchers: [LibraryLibraryOptionInfo]?
    public var imageFetchers: [LibraryLibraryOptionInfo]?
    public var supportedImageTypes: [SupportedImageTypes]?
    public var defaultImageOptions: [ConfigurationImageOption]?

    public init(type: String? = nil, metadataFetchers: [LibraryLibraryOptionInfo]? = nil, imageFetchers: [LibraryLibraryOptionInfo]? = nil, supportedImageTypes: [SupportedImageTypes]? = nil, defaultImageOptions: [ConfigurationImageOption]? = nil) {
        self.type = type
        self.metadataFetchers = metadataFetchers
        self.imageFetchers = imageFetchers
        self.supportedImageTypes = supportedImageTypes
        self.defaultImageOptions = defaultImageOptions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type = "Type"
        case metadataFetchers = "MetadataFetchers"
        case imageFetchers = "ImageFetchers"
        case supportedImageTypes = "SupportedImageTypes"
        case defaultImageOptions = "DefaultImageOptions"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(metadataFetchers, forKey: .metadataFetchers)
        try container.encodeIfPresent(imageFetchers, forKey: .imageFetchers)
        try container.encodeIfPresent(supportedImageTypes, forKey: .supportedImageTypes)
        try container.encodeIfPresent(defaultImageOptions, forKey: .defaultImageOptions)
    }
}

