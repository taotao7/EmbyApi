//
// SyncModelItemFileInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SyncModelItemFileInfo: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case media = "Media"
        case image = "Image"
        case subtitles = "Subtitles"
    }
    public enum ImageType: String, Codable, CaseIterable {
        case primary = "Primary"
        case art = "Art"
        case backdrop = "Backdrop"
        case banner = "Banner"
        case logo = "Logo"
        case thumb = "Thumb"
        case disc = "Disc"
        case box = "Box"
        case screenshot = "Screenshot"
        case menu = "Menu"
        case chapter = "Chapter"
        case boxRear = "BoxRear"
        case thumbnail = "Thumbnail"
    }
    public var type: ModelType?
    public var name: String?
    public var path: String?
    public var imageType: ImageType?
    public var index: Int?

    public init(type: ModelType? = nil, name: String? = nil, path: String? = nil, imageType: ImageType? = nil, index: Int? = nil) {
        self.type = type
        self.name = name
        self.path = path
        self.imageType = imageType
        self.index = index
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case type = "Type"
        case name = "Name"
        case path = "Path"
        case imageType = "ImageType"
        case index = "Index"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(imageType, forKey: .imageType)
        try container.encodeIfPresent(index, forKey: .index)
    }
}

