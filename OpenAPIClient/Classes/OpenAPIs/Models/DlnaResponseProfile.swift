//
// DlnaResponseProfile.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DlnaResponseProfile: Codable, JSONEncodable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case audio = "Audio"
        case video = "Video"
        case photo = "Photo"
    }
    public var container: String?
    public var audioCodec: String?
    public var videoCodec: String?
    public var type: ModelType?
    public var orgPn: String?
    public var mimeType: String?
    public var conditions: [DlnaProfileCondition]?

    public init(container: String? = nil, audioCodec: String? = nil, videoCodec: String? = nil, type: ModelType? = nil, orgPn: String? = nil, mimeType: String? = nil, conditions: [DlnaProfileCondition]? = nil) {
        self.container = container
        self.audioCodec = audioCodec
        self.videoCodec = videoCodec
        self.type = type
        self.orgPn = orgPn
        self.mimeType = mimeType
        self.conditions = conditions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case container = "Container"
        case audioCodec = "AudioCodec"
        case videoCodec = "VideoCodec"
        case type = "Type"
        case orgPn = "OrgPn"
        case mimeType = "MimeType"
        case conditions = "Conditions"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(container, forKey: .container)
        try container.encodeIfPresent(audioCodec, forKey: .audioCodec)
        try container.encodeIfPresent(videoCodec, forKey: .videoCodec)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(orgPn, forKey: .orgPn)
        try container.encodeIfPresent(mimeType, forKey: .mimeType)
        try container.encodeIfPresent(conditions, forKey: .conditions)
    }
}

