//
// MediaEncodingCodecsVideoCodecsVideoCodecBase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaEncodingCodecsVideoCodecsVideoCodecBase: Codable, JSONEncodable, Hashable {

    public enum CodecKind: String, Codable, CaseIterable {
        case audio = "Audio"
        case video = "Video"
        case subTitles = "SubTitles"
    }
    public enum VideoMediaType: String, Codable, CaseIterable {
        case unknown = "Unknown"
        case copy = "copy"
        case flv1 = "flv1"
        case h263 = "h263"
        case h263p = "h263p"
        case h264 = "h264"
        case hevc = "hevc"
        case mjpeg = "mjpeg"
        case mpeg1video = "mpeg1video"
        case mpeg2video = "mpeg2video"
        case mpeg4 = "mpeg4"
        case msvideo1 = "msvideo1"
        case theora = "theora"
        case vc1image = "vc1image"
        case vc1 = "vc1"
        case vp8 = "vp8"
        case vp9 = "vp9"
        case wmv1 = "wmv1"
        case wmv2 = "wmv2"
        case wmv3 = "wmv3"
        case 012v = "_012v"
        case 4xm = "_4xm"
        case 8bps = "_8bps"
        case a64Multi = "a64_multi"
        case a64Multi5 = "a64_multi5"
        case aasc = "aasc"
        case aic = "aic"
        case aliasPix = "alias_pix"
        case amv = "amv"
        case anm = "anm"
        case ansi = "ansi"
        case apng = "apng"
        case asv1 = "asv1"
        case asv2 = "asv2"
        case aura = "aura"
        case aura2 = "aura2"
        case av1 = "av1"
        case avrn = "avrn"
        case avrp = "avrp"
        case avs = "avs"
        case avui = "avui"
        case ayuv = "ayuv"
        case bethsoftvid = "bethsoftvid"
        case bfi = "bfi"
        case binkvideo = "binkvideo"
        case bintext = "bintext"
        case bitpacked = "bitpacked"
        case bmp = "bmp"
        case bmvVideo = "bmv_video"
        case brenderPix = "brender_pix"
        case c93 = "c93"
        case cavs = "cavs"
        case cdgraphics = "cdgraphics"
        case cdxl = "cdxl"
        case cfhd = "cfhd"
        case cinepak = "cinepak"
        case clearvideo = "clearvideo"
        case cljr = "cljr"
        case cllc = "cllc"
        case cmv = "cmv"
        case cpia = "cpia"
        case cscd = "cscd"
        case cyuv = "cyuv"
        case daala = "daala"
        case dds = "dds"
        case dfa = "dfa"
        case dirac = "dirac"
        case dnxhd = "dnxhd"
        case dpx = "dpx"
        case dsicinvideo = "dsicinvideo"
        case dvvideo = "dvvideo"
        case dxa = "dxa"
        case dxtory = "dxtory"
        case dxv = "dxv"
        case escape124 = "escape124"
        case escape130 = "escape130"
        case exr = "exr"
        case ffv1 = "ffv1"
        case ffvhuff = "ffvhuff"
        case fic = "fic"
        case fits = "fits"
        case flashsv = "flashsv"
        case flashsv2 = "flashsv2"
        case flic = "flic"
        case fmvc = "fmvc"
        case fraps = "fraps"
        case frwu = "frwu"
        case g2m = "g2m"
        case gdv = "gdv"
        case gif = "gif"
        case h261 = "h261"
        case h263i = "h263i"
        case hap = "hap"
        case hnm4video = "hnm4video"
        case hqHqa = "hq_hqa"
        case hqx = "hqx"
        case huffyuv = "huffyuv"
        case idcin = "idcin"
        case idf = "idf"
        case iffIlbm = "iff_ilbm"
        case indeo2 = "indeo2"
        case indeo3 = "indeo3"
        case indeo4 = "indeo4"
        case indeo5 = "indeo5"
        case interplayvideo = "interplayvideo"
        case jpeg2000 = "jpeg2000"
        case jpegls = "jpegls"
        case jv = "jv"
        case kgv1 = "kgv1"
        case kmvc = "kmvc"
        case lagarith = "lagarith"
        case ljpeg = "ljpeg"
        case loco = "loco"
        case m101 = "m101"
        case mad = "mad"
        case magicyuv = "magicyuv"
        case mdec = "mdec"
        case mimic = "mimic"
        case mjpegb = "mjpegb"
        case mmvideo = "mmvideo"
        case motionpixels = "motionpixels"
        case msa1 = "msa1"
        case mscc = "mscc"
        case msmpeg4v1 = "msmpeg4v1"
        case msmpeg4v2 = "msmpeg4v2"
        case msmpeg4v3 = "msmpeg4v3"
        case msrle = "msrle"
        case mss1 = "mss1"
        case mss2 = "mss2"
        case mszh = "mszh"
        case mts2 = "mts2"
        case mvc1 = "mvc1"
        case mvc2 = "mvc2"
        case mxpeg = "mxpeg"
        case nuv = "nuv"
        case pafVideo = "paf_video"
        case pam = "pam"
        case pbm = "pbm"
        case pcx = "pcx"
        case pgm = "pgm"
        case pgmyuv = "pgmyuv"
        case pictor = "pictor"
        case pixlet = "pixlet"
        case png = "png"
        case ppm = "ppm"
        case prores = "prores"
        case psd = "psd"
        case ptx = "ptx"
        case qdraw = "qdraw"
        case qpeg = "qpeg"
        case qtrle = "qtrle"
        case r10k = "r10k"
        case r210 = "r210"
        case rawvideo = "rawvideo"
        case rl2 = "rl2"
        case roq = "roq"
        case rpza = "rpza"
        case rscc = "rscc"
        case rv10 = "rv10"
        case rv20 = "rv20"
        case rv30 = "rv30"
        case rv40 = "rv40"
        case sanm = "sanm"
        case scpr = "scpr"
        case screenpresso = "screenpresso"
        case sgi = "sgi"
        case sgirle = "sgirle"
        case sheervideo = "sheervideo"
        case smackvideo = "smackvideo"
        case smc = "smc"
        case smvjpeg = "smvjpeg"
        case snow = "snow"
        case sp5x = "sp5x"
        case speedhq = "speedhq"
        case srgc = "srgc"
        case sunrast = "sunrast"
        case svg = "svg"
        case svq1 = "svq1"
        case svq3 = "svq3"
        case targa = "targa"
        case targaY216 = "targa_y216"
        case tdsc = "tdsc"
        case tgq = "tgq"
        case tgv = "tgv"
        case thp = "thp"
        case tiertexseqvideo = "tiertexseqvideo"
        case tiff = "tiff"
        case tmv = "tmv"
        case tqi = "tqi"
        case truemotion1 = "truemotion1"
        case truemotion2 = "truemotion2"
        case truemotion2rt = "truemotion2rt"
        case tscc = "tscc"
        case tscc2 = "tscc2"
        case txd = "txd"
        case ulti = "ulti"
        case utvideo = "utvideo"
        case v210 = "v210"
        case v210x = "v210x"
        case v308 = "v308"
        case v408 = "v408"
        case v410 = "v410"
        case vb = "vb"
        case vble = "vble"
        case vcr1 = "vcr1"
        case vixl = "vixl"
        case vmdvideo = "vmdvideo"
        case vmnc = "vmnc"
        case vp3 = "vp3"
        case vp5 = "vp5"
        case vp6 = "vp6"
        case vp6a = "vp6a"
        case vp6f = "vp6f"
        case vp7 = "vp7"
        case webp = "webp"
        case wmv3image = "wmv3image"
        case wnv1 = "wnv1"
        case wrappedAvframe = "wrapped_avframe"
        case wsVqa = "ws_vqa"
        case xanWc3 = "xan_wc3"
        case xanWc4 = "xan_wc4"
        case xbin = "xbin"
        case xbm = "xbm"
        case xface = "xface"
        case xpm = "xpm"
        case xwd = "xwd"
        case y41p = "y41p"
        case ylc = "ylc"
        case yop = "yop"
        case yuv4 = "yuv4"
        case zerocodec = "zerocodec"
        case zlib = "zlib"
        case zmbv = "zmbv"
    }
    public enum SupportedColorFormats: String, Codable, CaseIterable {
        case unknown = "Unknown"
        case yuv420p = "yuv420p"
        case yuyv422 = "yuyv422"
        case rgb24 = "rgb24"
        case bgr24 = "bgr24"
        case yuv422p = "yuv422p"
        case yuv444p = "yuv444p"
        case yuv410p = "yuv410p"
        case yuv411p = "yuv411p"
        case gray = "gray"
        case monow = "monow"
        case monob = "monob"
        case pal8 = "pal8"
        case yuvj420p = "yuvj420p"
        case yuvj422p = "yuvj422p"
        case yuvj444p = "yuvj444p"
        case uyvy422 = "uyvy422"
        case uyyvyy411 = "uyyvyy411"
        case bgr8 = "bgr8"
        case bgr4 = "bgr4"
        case bgr4Byte = "bgr4_byte"
        case rgb8 = "rgb8"
        case rgb4 = "rgb4"
        case rgb4Byte = "rgb4_byte"
        case nv12 = "nv12"
        case nv21 = "nv21"
        case argb = "argb"
        case rgba = "rgba"
        case abgr = "abgr"
        case bgra = "bgra"
        case gray16 = "gray16"
        case yuv440p = "yuv440p"
        case yuvj440p = "yuvj440p"
        case yuva420p = "yuva420p"
        case rgb48 = "rgb48"
        case rgb565 = "rgb565"
        case rgb555 = "rgb555"
        case bgr565 = "bgr565"
        case bgr555 = "bgr555"
        case vaapiMoco = "vaapi_moco"
        case vaapiIdct = "vaapi_idct"
        case vaapiVld = "vaapi_vld"
        case yuv420p16 = "yuv420p16"
        case yuv422p16 = "yuv422p16"
        case yuv444p16 = "yuv444p16"
        case dxva2Vld = "dxva2_vld"
        case rgb444 = "rgb444"
        case bgr444 = "bgr444"
        case ya8 = "ya8"
        case bgr48 = "bgr48"
        case yuv420p9 = "yuv420p9"
        case yuv420p10 = "yuv420p10"
        case yuv422p10 = "yuv422p10"
        case yuv444p9 = "yuv444p9"
        case yuv444p10 = "yuv444p10"
        case yuv422p9 = "yuv422p9"
        case gbrp = "gbrp"
        case gbrp9 = "gbrp9"
        case gbrp10 = "gbrp10"
        case gbrp16 = "gbrp16"
        case yuva422p = "yuva422p"
        case yuva444p = "yuva444p"
        case yuva420p9 = "yuva420p9"
        case yuva422p9 = "yuva422p9"
        case yuva444p9 = "yuva444p9"
        case yuva420p10 = "yuva420p10"
        case yuva422p10 = "yuva422p10"
        case yuva444p10 = "yuva444p10"
        case yuva420p16 = "yuva420p16"
        case yuva422p16 = "yuva422p16"
        case yuva444p16 = "yuva444p16"
        case vdpau = "vdpau"
        case xyz12 = "xyz12"
        case nv16 = "nv16"
        case nv20 = "nv20"
        case rgba64 = "rgba64"
        case bgra64 = "bgra64"
        case yvyu422 = "yvyu422"
        case ya16 = "ya16"
        case gbrap = "gbrap"
        case gbrap16 = "gbrap16"
        case qsv = "qsv"
        case mmal = "mmal"
        case d3d11vaVld = "d3d11va_vld"
        case cuda = "cuda"
        case 0rgb = "_0rgb"
        case rgb0 = "rgb0"
        case 0bgr = "_0bgr"
        case bgr0 = "bgr0"
        case yuv420p12 = "yuv420p12"
        case yuv420p14 = "yuv420p14"
        case yuv422p12 = "yuv422p12"
        case yuv422p14 = "yuv422p14"
        case yuv444p12 = "yuv444p12"
        case yuv444p14 = "yuv444p14"
        case gbrp12 = "gbrp12"
        case gbrp14 = "gbrp14"
        case yuvj411p = "yuvj411p"
        case bayerBggr8 = "bayer_bggr8"
        case bayerRggb8 = "bayer_rggb8"
        case bayerGbrg8 = "bayer_gbrg8"
        case bayerGrbg8 = "bayer_grbg8"
        case bayerBggr16 = "bayer_bggr16"
        case bayerRggb16 = "bayer_rggb16"
        case bayerGbrg16 = "bayer_gbrg16"
        case bayerGrbg16 = "bayer_grbg16"
        case xvmc = "xvmc"
        case yuv440p10 = "yuv440p10"
        case yuv440p12 = "yuv440p12"
        case ayuv64 = "ayuv64"
        case videotoolboxVld = "videotoolbox_vld"
        case p010 = "p010"
        case gbrap12 = "gbrap12"
        case gbrap10 = "gbrap10"
        case mediacodec = "mediacodec"
        case gray12 = "gray12"
        case gray10 = "gray10"
        case p016 = "p016"
        case d3d11 = "d3d11"
        case gray9 = "gray9"
        case gbrpf32 = "gbrpf32"
        case gbrapf32 = "gbrapf32"
        case drmPrime = "drm_prime"
        case opencl = "opencl"
    }
    public enum Direction: String, Codable, CaseIterable {
        case encoder = "Encoder"
        case decoder = "Decoder"
    }
    public enum SecondaryFramework: String, Codable, CaseIterable {
        case unknown = "Unknown"
        case _none = "None"
        case amdAmf = "AmdAmf"
        case mediaCodec = "MediaCodec"
        case nvEncDec = "NvEncDec"
        case openMax = "OpenMax"
        case quickSync = "QuickSync"
        case vaApi = "VaApi"
        case v4L2 = "V4L2"
        case dxVa = "DxVa"
        case d3d11va = "D3d11va"
        case videoToolbox = "VideoToolbox"
    }
    public var codecKind: CodecKind?
    public var mediaTypeName: String?
    public var videoMediaType: VideoMediaType?
    public var minWidth: Int?
    public var maxWidth: Int?
    public var minHeight: Int?
    public var maxHeight: Int?
    public var widthAlignment: Int?
    public var heightAlignment: Int?
    public var minFrameRate: Int?
    public var maxFrameRate: Int?
    public var supportedColorFormats: [SupportedColorFormats]?
    public var supportedColorFormatStrings: [String]?
    public var profileAndLevelInformation: [MediaEncodingCodecsCommonTypesProfileLevelInformation]?
    public var id: String?
    public var direction: Direction?
    public var name: String?
    public var description: String?
    public var frameworkCodec: String?
    public var isHardwareCodec: Bool?
    public var secondaryFramework: SecondaryFramework?
    public var secondaryFrameworkCodec: String?
    public var maxInstanceCount: Int?
    public var minBitRate: MediaEncodingCodecsCommonTypesBitRate?
    public var maxBitRate: MediaEncodingCodecsCommonTypesBitRate?
    public var isEnabledByDefault: Bool?
    public var defaultPriority: Int?

    public init(codecKind: CodecKind? = nil, mediaTypeName: String? = nil, videoMediaType: VideoMediaType? = nil, minWidth: Int? = nil, maxWidth: Int? = nil, minHeight: Int? = nil, maxHeight: Int? = nil, widthAlignment: Int? = nil, heightAlignment: Int? = nil, minFrameRate: Int? = nil, maxFrameRate: Int? = nil, supportedColorFormats: [SupportedColorFormats]? = nil, supportedColorFormatStrings: [String]? = nil, profileAndLevelInformation: [MediaEncodingCodecsCommonTypesProfileLevelInformation]? = nil, id: String? = nil, direction: Direction? = nil, name: String? = nil, description: String? = nil, frameworkCodec: String? = nil, isHardwareCodec: Bool? = nil, secondaryFramework: SecondaryFramework? = nil, secondaryFrameworkCodec: String? = nil, maxInstanceCount: Int? = nil, minBitRate: MediaEncodingCodecsCommonTypesBitRate? = nil, maxBitRate: MediaEncodingCodecsCommonTypesBitRate? = nil, isEnabledByDefault: Bool? = nil, defaultPriority: Int? = nil) {
        self.codecKind = codecKind
        self.mediaTypeName = mediaTypeName
        self.videoMediaType = videoMediaType
        self.minWidth = minWidth
        self.maxWidth = maxWidth
        self.minHeight = minHeight
        self.maxHeight = maxHeight
        self.widthAlignment = widthAlignment
        self.heightAlignment = heightAlignment
        self.minFrameRate = minFrameRate
        self.maxFrameRate = maxFrameRate
        self.supportedColorFormats = supportedColorFormats
        self.supportedColorFormatStrings = supportedColorFormatStrings
        self.profileAndLevelInformation = profileAndLevelInformation
        self.id = id
        self.direction = direction
        self.name = name
        self.description = description
        self.frameworkCodec = frameworkCodec
        self.isHardwareCodec = isHardwareCodec
        self.secondaryFramework = secondaryFramework
        self.secondaryFrameworkCodec = secondaryFrameworkCodec
        self.maxInstanceCount = maxInstanceCount
        self.minBitRate = minBitRate
        self.maxBitRate = maxBitRate
        self.isEnabledByDefault = isEnabledByDefault
        self.defaultPriority = defaultPriority
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case codecKind = "CodecKind"
        case mediaTypeName = "MediaTypeName"
        case videoMediaType = "VideoMediaType"
        case minWidth = "MinWidth"
        case maxWidth = "MaxWidth"
        case minHeight = "MinHeight"
        case maxHeight = "MaxHeight"
        case widthAlignment = "WidthAlignment"
        case heightAlignment = "HeightAlignment"
        case minFrameRate = "MinFrameRate"
        case maxFrameRate = "MaxFrameRate"
        case supportedColorFormats = "SupportedColorFormats"
        case supportedColorFormatStrings = "SupportedColorFormatStrings"
        case profileAndLevelInformation = "ProfileAndLevelInformation"
        case id = "Id"
        case direction = "Direction"
        case name = "Name"
        case description = "Description"
        case frameworkCodec = "FrameworkCodec"
        case isHardwareCodec = "IsHardwareCodec"
        case secondaryFramework = "SecondaryFramework"
        case secondaryFrameworkCodec = "SecondaryFrameworkCodec"
        case maxInstanceCount = "MaxInstanceCount"
        case minBitRate = "MinBitRate"
        case maxBitRate = "MaxBitRate"
        case isEnabledByDefault = "IsEnabledByDefault"
        case defaultPriority = "DefaultPriority"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(codecKind, forKey: .codecKind)
        try container.encodeIfPresent(mediaTypeName, forKey: .mediaTypeName)
        try container.encodeIfPresent(videoMediaType, forKey: .videoMediaType)
        try container.encodeIfPresent(minWidth, forKey: .minWidth)
        try container.encodeIfPresent(maxWidth, forKey: .maxWidth)
        try container.encodeIfPresent(minHeight, forKey: .minHeight)
        try container.encodeIfPresent(maxHeight, forKey: .maxHeight)
        try container.encodeIfPresent(widthAlignment, forKey: .widthAlignment)
        try container.encodeIfPresent(heightAlignment, forKey: .heightAlignment)
        try container.encodeIfPresent(minFrameRate, forKey: .minFrameRate)
        try container.encodeIfPresent(maxFrameRate, forKey: .maxFrameRate)
        try container.encodeIfPresent(supportedColorFormats, forKey: .supportedColorFormats)
        try container.encodeIfPresent(supportedColorFormatStrings, forKey: .supportedColorFormatStrings)
        try container.encodeIfPresent(profileAndLevelInformation, forKey: .profileAndLevelInformation)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(direction, forKey: .direction)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(frameworkCodec, forKey: .frameworkCodec)
        try container.encodeIfPresent(isHardwareCodec, forKey: .isHardwareCodec)
        try container.encodeIfPresent(secondaryFramework, forKey: .secondaryFramework)
        try container.encodeIfPresent(secondaryFrameworkCodec, forKey: .secondaryFrameworkCodec)
        try container.encodeIfPresent(maxInstanceCount, forKey: .maxInstanceCount)
        try container.encodeIfPresent(minBitRate, forKey: .minBitRate)
        try container.encodeIfPresent(maxBitRate, forKey: .maxBitRate)
        try container.encodeIfPresent(isEnabledByDefault, forKey: .isEnabledByDefault)
        try container.encodeIfPresent(defaultPriority, forKey: .defaultPriority)
    }
}

