//
// SystemInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SystemInfo: Codable, JSONEncodable, Hashable {

    public enum SystemUpdateLevel: String, Codable, CaseIterable {
        case release = "Release"
        case beta = "Beta"
        case dev = "Dev"
    }
    public var systemUpdateLevel: SystemUpdateLevel?
    public var operatingSystemDisplayName: String?
    public var packageName: String?
    public var hasPendingRestart: Bool?
    public var isShuttingDown: Bool?
    public var supportsLibraryMonitor: Bool?
    public var webSocketPortNumber: Int?
    public var completedInstallations: [UpdatesInstallationInfo]?
    public var canSelfRestart: Bool?
    public var canSelfUpdate: Bool?
    public var canLaunchWebBrowser: Bool?
    public var programDataPath: String?
    public var itemsByNamePath: String?
    public var cachePath: String?
    public var logPath: String?
    public var internalMetadataPath: String?
    public var transcodingTempPath: String?
    public var httpServerPortNumber: Int?
    public var supportsHttps: Bool?
    public var httpsPortNumber: Int?
    public var hasUpdateAvailable: Bool?
    public var supportsAutoRunAtStartup: Bool?
    public var hardwareAccelerationRequiresPremiere: Bool?
    public var localAddress: String?
    public var wanAddress: String?
    public var serverName: String?
    public var version: String?
    public var operatingSystem: String?
    public var id: String?

    public init(systemUpdateLevel: SystemUpdateLevel? = nil, operatingSystemDisplayName: String? = nil, packageName: String? = nil, hasPendingRestart: Bool? = nil, isShuttingDown: Bool? = nil, supportsLibraryMonitor: Bool? = nil, webSocketPortNumber: Int? = nil, completedInstallations: [UpdatesInstallationInfo]? = nil, canSelfRestart: Bool? = nil, canSelfUpdate: Bool? = nil, canLaunchWebBrowser: Bool? = nil, programDataPath: String? = nil, itemsByNamePath: String? = nil, cachePath: String? = nil, logPath: String? = nil, internalMetadataPath: String? = nil, transcodingTempPath: String? = nil, httpServerPortNumber: Int? = nil, supportsHttps: Bool? = nil, httpsPortNumber: Int? = nil, hasUpdateAvailable: Bool? = nil, supportsAutoRunAtStartup: Bool? = nil, hardwareAccelerationRequiresPremiere: Bool? = nil, localAddress: String? = nil, wanAddress: String? = nil, serverName: String? = nil, version: String? = nil, operatingSystem: String? = nil, id: String? = nil) {
        self.systemUpdateLevel = systemUpdateLevel
        self.operatingSystemDisplayName = operatingSystemDisplayName
        self.packageName = packageName
        self.hasPendingRestart = hasPendingRestart
        self.isShuttingDown = isShuttingDown
        self.supportsLibraryMonitor = supportsLibraryMonitor
        self.webSocketPortNumber = webSocketPortNumber
        self.completedInstallations = completedInstallations
        self.canSelfRestart = canSelfRestart
        self.canSelfUpdate = canSelfUpdate
        self.canLaunchWebBrowser = canLaunchWebBrowser
        self.programDataPath = programDataPath
        self.itemsByNamePath = itemsByNamePath
        self.cachePath = cachePath
        self.logPath = logPath
        self.internalMetadataPath = internalMetadataPath
        self.transcodingTempPath = transcodingTempPath
        self.httpServerPortNumber = httpServerPortNumber
        self.supportsHttps = supportsHttps
        self.httpsPortNumber = httpsPortNumber
        self.hasUpdateAvailable = hasUpdateAvailable
        self.supportsAutoRunAtStartup = supportsAutoRunAtStartup
        self.hardwareAccelerationRequiresPremiere = hardwareAccelerationRequiresPremiere
        self.localAddress = localAddress
        self.wanAddress = wanAddress
        self.serverName = serverName
        self.version = version
        self.operatingSystem = operatingSystem
        self.id = id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case systemUpdateLevel = "SystemUpdateLevel"
        case operatingSystemDisplayName = "OperatingSystemDisplayName"
        case packageName = "PackageName"
        case hasPendingRestart = "HasPendingRestart"
        case isShuttingDown = "IsShuttingDown"
        case supportsLibraryMonitor = "SupportsLibraryMonitor"
        case webSocketPortNumber = "WebSocketPortNumber"
        case completedInstallations = "CompletedInstallations"
        case canSelfRestart = "CanSelfRestart"
        case canSelfUpdate = "CanSelfUpdate"
        case canLaunchWebBrowser = "CanLaunchWebBrowser"
        case programDataPath = "ProgramDataPath"
        case itemsByNamePath = "ItemsByNamePath"
        case cachePath = "CachePath"
        case logPath = "LogPath"
        case internalMetadataPath = "InternalMetadataPath"
        case transcodingTempPath = "TranscodingTempPath"
        case httpServerPortNumber = "HttpServerPortNumber"
        case supportsHttps = "SupportsHttps"
        case httpsPortNumber = "HttpsPortNumber"
        case hasUpdateAvailable = "HasUpdateAvailable"
        case supportsAutoRunAtStartup = "SupportsAutoRunAtStartup"
        case hardwareAccelerationRequiresPremiere = "HardwareAccelerationRequiresPremiere"
        case localAddress = "LocalAddress"
        case wanAddress = "WanAddress"
        case serverName = "ServerName"
        case version = "Version"
        case operatingSystem = "OperatingSystem"
        case id = "Id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(systemUpdateLevel, forKey: .systemUpdateLevel)
        try container.encodeIfPresent(operatingSystemDisplayName, forKey: .operatingSystemDisplayName)
        try container.encodeIfPresent(packageName, forKey: .packageName)
        try container.encodeIfPresent(hasPendingRestart, forKey: .hasPendingRestart)
        try container.encodeIfPresent(isShuttingDown, forKey: .isShuttingDown)
        try container.encodeIfPresent(supportsLibraryMonitor, forKey: .supportsLibraryMonitor)
        try container.encodeIfPresent(webSocketPortNumber, forKey: .webSocketPortNumber)
        try container.encodeIfPresent(completedInstallations, forKey: .completedInstallations)
        try container.encodeIfPresent(canSelfRestart, forKey: .canSelfRestart)
        try container.encodeIfPresent(canSelfUpdate, forKey: .canSelfUpdate)
        try container.encodeIfPresent(canLaunchWebBrowser, forKey: .canLaunchWebBrowser)
        try container.encodeIfPresent(programDataPath, forKey: .programDataPath)
        try container.encodeIfPresent(itemsByNamePath, forKey: .itemsByNamePath)
        try container.encodeIfPresent(cachePath, forKey: .cachePath)
        try container.encodeIfPresent(logPath, forKey: .logPath)
        try container.encodeIfPresent(internalMetadataPath, forKey: .internalMetadataPath)
        try container.encodeIfPresent(transcodingTempPath, forKey: .transcodingTempPath)
        try container.encodeIfPresent(httpServerPortNumber, forKey: .httpServerPortNumber)
        try container.encodeIfPresent(supportsHttps, forKey: .supportsHttps)
        try container.encodeIfPresent(httpsPortNumber, forKey: .httpsPortNumber)
        try container.encodeIfPresent(hasUpdateAvailable, forKey: .hasUpdateAvailable)
        try container.encodeIfPresent(supportsAutoRunAtStartup, forKey: .supportsAutoRunAtStartup)
        try container.encodeIfPresent(hardwareAccelerationRequiresPremiere, forKey: .hardwareAccelerationRequiresPremiere)
        try container.encodeIfPresent(localAddress, forKey: .localAddress)
        try container.encodeIfPresent(wanAddress, forKey: .wanAddress)
        try container.encodeIfPresent(serverName, forKey: .serverName)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(operatingSystem, forKey: .operatingSystem)
        try container.encodeIfPresent(id, forKey: .id)
    }
}

