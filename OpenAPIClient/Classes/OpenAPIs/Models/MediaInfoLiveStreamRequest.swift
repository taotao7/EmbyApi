//
// MediaInfoLiveStreamRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MediaInfoLiveStreamRequest: Codable, JSONEncodable, Hashable {

    public enum DirectPlayProtocols: String, Codable, CaseIterable {
        case file = "File"
        case http = "Http"
        case rtmp = "Rtmp"
        case rtsp = "Rtsp"
        case udp = "Udp"
        case rtp = "Rtp"
        case ftp = "Ftp"
        case mms = "Mms"
    }
    public var openToken: String?
    public var userId: String?
    public var playSessionId: String?
    public var maxStreamingBitrate: Int64?
    public var startTimeTicks: Int64?
    public var audioStreamIndex: Int?
    public var subtitleStreamIndex: Int?
    public var maxAudioChannels: Int?
    public var itemId: Int64?
    public var deviceProfile: DlnaDeviceProfile?
    public var enableDirectPlay: Bool?
    public var enableDirectStream: Bool?
    public var enableTranscoding: Bool?
    public var allowVideoStreamCopy: Bool?
    public var allowAudioStreamCopy: Bool?
    public var directPlayProtocols: [DirectPlayProtocols]?

    public init(openToken: String? = nil, userId: String? = nil, playSessionId: String? = nil, maxStreamingBitrate: Int64? = nil, startTimeTicks: Int64? = nil, audioStreamIndex: Int? = nil, subtitleStreamIndex: Int? = nil, maxAudioChannels: Int? = nil, itemId: Int64? = nil, deviceProfile: DlnaDeviceProfile? = nil, enableDirectPlay: Bool? = nil, enableDirectStream: Bool? = nil, enableTranscoding: Bool? = nil, allowVideoStreamCopy: Bool? = nil, allowAudioStreamCopy: Bool? = nil, directPlayProtocols: [DirectPlayProtocols]? = nil) {
        self.openToken = openToken
        self.userId = userId
        self.playSessionId = playSessionId
        self.maxStreamingBitrate = maxStreamingBitrate
        self.startTimeTicks = startTimeTicks
        self.audioStreamIndex = audioStreamIndex
        self.subtitleStreamIndex = subtitleStreamIndex
        self.maxAudioChannels = maxAudioChannels
        self.itemId = itemId
        self.deviceProfile = deviceProfile
        self.enableDirectPlay = enableDirectPlay
        self.enableDirectStream = enableDirectStream
        self.enableTranscoding = enableTranscoding
        self.allowVideoStreamCopy = allowVideoStreamCopy
        self.allowAudioStreamCopy = allowAudioStreamCopy
        self.directPlayProtocols = directPlayProtocols
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case openToken = "OpenToken"
        case userId = "UserId"
        case playSessionId = "PlaySessionId"
        case maxStreamingBitrate = "MaxStreamingBitrate"
        case startTimeTicks = "StartTimeTicks"
        case audioStreamIndex = "AudioStreamIndex"
        case subtitleStreamIndex = "SubtitleStreamIndex"
        case maxAudioChannels = "MaxAudioChannels"
        case itemId = "ItemId"
        case deviceProfile = "DeviceProfile"
        case enableDirectPlay = "EnableDirectPlay"
        case enableDirectStream = "EnableDirectStream"
        case enableTranscoding = "EnableTranscoding"
        case allowVideoStreamCopy = "AllowVideoStreamCopy"
        case allowAudioStreamCopy = "AllowAudioStreamCopy"
        case directPlayProtocols = "DirectPlayProtocols"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(openToken, forKey: .openToken)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(playSessionId, forKey: .playSessionId)
        try container.encodeIfPresent(maxStreamingBitrate, forKey: .maxStreamingBitrate)
        try container.encodeIfPresent(startTimeTicks, forKey: .startTimeTicks)
        try container.encodeIfPresent(audioStreamIndex, forKey: .audioStreamIndex)
        try container.encodeIfPresent(subtitleStreamIndex, forKey: .subtitleStreamIndex)
        try container.encodeIfPresent(maxAudioChannels, forKey: .maxAudioChannels)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(deviceProfile, forKey: .deviceProfile)
        try container.encodeIfPresent(enableDirectPlay, forKey: .enableDirectPlay)
        try container.encodeIfPresent(enableDirectStream, forKey: .enableDirectStream)
        try container.encodeIfPresent(enableTranscoding, forKey: .enableTranscoding)
        try container.encodeIfPresent(allowVideoStreamCopy, forKey: .allowVideoStreamCopy)
        try container.encodeIfPresent(allowAudioStreamCopy, forKey: .allowAudioStreamCopy)
        try container.encodeIfPresent(directPlayProtocols, forKey: .directPlayProtocols)
    }
}

