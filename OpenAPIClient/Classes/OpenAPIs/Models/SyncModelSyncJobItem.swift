//
// SyncModelSyncJobItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SyncModelSyncJobItem: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case queued = "Queued"
        case converting = "Converting"
        case readyToTransfer = "ReadyToTransfer"
        case transferring = "Transferring"
        case synced = "Synced"
        case failed = "Failed"
    }
    public var id: Int64?
    public var jobId: Int64?
    public var itemId: Int64?
    public var itemName: String?
    public var mediaSourceId: String?
    public var mediaSource: MediaSourceInfo?
    public var targetId: String?
    public var outputPath: String?
    public var status: Status?
    public var progress: Double?
    public var dateCreated: Date?
    public var primaryImageItemId: Int64?
    public var primaryImageTag: String?
    public var temporaryPath: String?
    public var additionalFiles: [SyncModelItemFileInfo]?
    public var itemDateModifiedTicks: Int64?

    public init(id: Int64? = nil, jobId: Int64? = nil, itemId: Int64? = nil, itemName: String? = nil, mediaSourceId: String? = nil, mediaSource: MediaSourceInfo? = nil, targetId: String? = nil, outputPath: String? = nil, status: Status? = nil, progress: Double? = nil, dateCreated: Date? = nil, primaryImageItemId: Int64? = nil, primaryImageTag: String? = nil, temporaryPath: String? = nil, additionalFiles: [SyncModelItemFileInfo]? = nil, itemDateModifiedTicks: Int64? = nil) {
        self.id = id
        self.jobId = jobId
        self.itemId = itemId
        self.itemName = itemName
        self.mediaSourceId = mediaSourceId
        self.mediaSource = mediaSource
        self.targetId = targetId
        self.outputPath = outputPath
        self.status = status
        self.progress = progress
        self.dateCreated = dateCreated
        self.primaryImageItemId = primaryImageItemId
        self.primaryImageTag = primaryImageTag
        self.temporaryPath = temporaryPath
        self.additionalFiles = additionalFiles
        self.itemDateModifiedTicks = itemDateModifiedTicks
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "Id"
        case jobId = "JobId"
        case itemId = "ItemId"
        case itemName = "ItemName"
        case mediaSourceId = "MediaSourceId"
        case mediaSource = "MediaSource"
        case targetId = "TargetId"
        case outputPath = "OutputPath"
        case status = "Status"
        case progress = "Progress"
        case dateCreated = "DateCreated"
        case primaryImageItemId = "PrimaryImageItemId"
        case primaryImageTag = "PrimaryImageTag"
        case temporaryPath = "TemporaryPath"
        case additionalFiles = "AdditionalFiles"
        case itemDateModifiedTicks = "ItemDateModifiedTicks"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(jobId, forKey: .jobId)
        try container.encodeIfPresent(itemId, forKey: .itemId)
        try container.encodeIfPresent(itemName, forKey: .itemName)
        try container.encodeIfPresent(mediaSourceId, forKey: .mediaSourceId)
        try container.encodeIfPresent(mediaSource, forKey: .mediaSource)
        try container.encodeIfPresent(targetId, forKey: .targetId)
        try container.encodeIfPresent(outputPath, forKey: .outputPath)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(progress, forKey: .progress)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(primaryImageItemId, forKey: .primaryImageItemId)
        try container.encodeIfPresent(primaryImageTag, forKey: .primaryImageTag)
        try container.encodeIfPresent(temporaryPath, forKey: .temporaryPath)
        try container.encodeIfPresent(additionalFiles, forKey: .additionalFiles)
        try container.encodeIfPresent(itemDateModifiedTicks, forKey: .itemDateModifiedTicks)
    }
}

