//
// LiveTvListingsProviderInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LiveTvListingsProviderInfo: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var setupUrl: String?
    public var id: String?
    public var type: String?
    public var username: String?
    public var password: String?
    public var listingsId: String?
    public var zipCode: String?
    public var country: String?
    public var path: String?
    public var enabledTuners: [String]?
    public var enableAllTuners: Bool?
    public var newsCategories: [String]?
    public var sportsCategories: [String]?
    public var kidsCategories: [String]?
    public var movieCategories: [String]?
    public var channelMappings: [NameValuePair]?
    public var moviePrefix: String?
    public var preferredLanguage: String?
    public var userAgent: String?

    public init(name: String? = nil, setupUrl: String? = nil, id: String? = nil, type: String? = nil, username: String? = nil, password: String? = nil, listingsId: String? = nil, zipCode: String? = nil, country: String? = nil, path: String? = nil, enabledTuners: [String]? = nil, enableAllTuners: Bool? = nil, newsCategories: [String]? = nil, sportsCategories: [String]? = nil, kidsCategories: [String]? = nil, movieCategories: [String]? = nil, channelMappings: [NameValuePair]? = nil, moviePrefix: String? = nil, preferredLanguage: String? = nil, userAgent: String? = nil) {
        self.name = name
        self.setupUrl = setupUrl
        self.id = id
        self.type = type
        self.username = username
        self.password = password
        self.listingsId = listingsId
        self.zipCode = zipCode
        self.country = country
        self.path = path
        self.enabledTuners = enabledTuners
        self.enableAllTuners = enableAllTuners
        self.newsCategories = newsCategories
        self.sportsCategories = sportsCategories
        self.kidsCategories = kidsCategories
        self.movieCategories = movieCategories
        self.channelMappings = channelMappings
        self.moviePrefix = moviePrefix
        self.preferredLanguage = preferredLanguage
        self.userAgent = userAgent
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case setupUrl = "SetupUrl"
        case id = "Id"
        case type = "Type"
        case username = "Username"
        case password = "Password"
        case listingsId = "ListingsId"
        case zipCode = "ZipCode"
        case country = "Country"
        case path = "Path"
        case enabledTuners = "EnabledTuners"
        case enableAllTuners = "EnableAllTuners"
        case newsCategories = "NewsCategories"
        case sportsCategories = "SportsCategories"
        case kidsCategories = "KidsCategories"
        case movieCategories = "MovieCategories"
        case channelMappings = "ChannelMappings"
        case moviePrefix = "MoviePrefix"
        case preferredLanguage = "PreferredLanguage"
        case userAgent = "UserAgent"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(setupUrl, forKey: .setupUrl)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(listingsId, forKey: .listingsId)
        try container.encodeIfPresent(zipCode, forKey: .zipCode)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(path, forKey: .path)
        try container.encodeIfPresent(enabledTuners, forKey: .enabledTuners)
        try container.encodeIfPresent(enableAllTuners, forKey: .enableAllTuners)
        try container.encodeIfPresent(newsCategories, forKey: .newsCategories)
        try container.encodeIfPresent(sportsCategories, forKey: .sportsCategories)
        try container.encodeIfPresent(kidsCategories, forKey: .kidsCategories)
        try container.encodeIfPresent(movieCategories, forKey: .movieCategories)
        try container.encodeIfPresent(channelMappings, forKey: .channelMappings)
        try container.encodeIfPresent(moviePrefix, forKey: .moviePrefix)
        try container.encodeIfPresent(preferredLanguage, forKey: .preferredLanguage)
        try container.encodeIfPresent(userAgent, forKey: .userAgent)
    }
}

